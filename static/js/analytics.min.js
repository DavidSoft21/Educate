/* eslint-disable no-undef */
/* eslint-disable no-declare */
/* eslint-disable no-redeclare */
/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */
(function umd (require) { if (typeof exports === 'object') { module.exports = require('1') } else if (typeof define === 'function' && define.amd) { define(function () { return require('1') }) } else { this.analytics = require('1') } })(function outer (modules, cache, entries) { const global = (function () { return this }()); function require (name, jumped) { if (cache[name]) return cache[name].exports; if (modules[name]) return call(name, require); throw new Error('cannot find module "' + name + '"') } function call (id, require) { const m = cache[id] = { exports: {} }; const mod = modules[id]; const name = mod[2]; const fn = mod[0]; fn.call(m.exports, function (req) { const dep = modules[id][1][req]; return require(dep || req) }, m, m.exports, outer, modules, cache, entries); if (name)cache[name] = cache[id]; return cache[id].exports } for (const id in entries) { if (entries[id]) { global[entries[id]] = require(id) } else { require(id) } }require.duo = true; require.cache = cache; require.modules = modules; return require }({
  1: [function (require, module, exports) { const _analytics = window.analytics; const Integrations = require('analytics.js-integrations'); const Analytics = require('./analytics'); const each = require('each'); const analytics = module.exports = exports = new Analytics(); analytics.require = require; exports.VERSION = require('../bower.json').version; each(Integrations, function (name, Integration) { analytics.use(Integration) }) }, { 'analytics.js-integrations': 2, './analytics': 3, each: 4, '../bower.json': 5 }],
  2: [function (require, module, exports) { const each = require('each'); const plugins = require('./integrations.js'); each(plugins, function (plugin) { const name = (plugin.Integration || plugin).prototype.name; exports[name] = plugin }) }, { each: 4, './integrations.js': 6 }],
  4: [function (require, module, exports) { const type = require('type'); const has = Object.prototype.hasOwnProperty; module.exports = function (obj, fn) { switch (type(obj)) { case 'array':return array(obj, fn); case 'object':if (typeof obj.length === 'number') return array(obj, fn); return object(obj, fn); case 'string':return string(obj, fn) } }; function string (obj, fn) { for (let i = 0; i < obj.length; ++i) { fn(obj.charAt(i), i) } } function object (obj, fn) { for (const key in obj) { if (has.call(obj, key)) { fn(key, obj[key]) } } } function array (obj, fn) { for (let i = 0; i < obj.length; ++i) { fn(obj[i], i) } } }, { type: 7 }],
  7: [function (require, module, exports) { const toString = Object.prototype.toString; module.exports = function (val) { switch (toString.call(val)) { case '[object Date]':return 'date'; case '[object RegExp]':return 'regexp'; case '[object Arguments]':return 'arguments'; case '[object Array]':return 'array'; case '[object Error]':return 'error' } if (val === null) return 'null'; if (val === undefined) return 'undefined'; if (val !== val) return 'nan'; if (val && val.nodeType === 1) return 'element'; val = val.valueOf ? val.valueOf() : Object.prototype.valueOf.apply(val); return typeof val } }, {}],
  6: [function (require, module, exports) { module.exports = [require('./lib/adroll'), require('./lib/adwords'), require('./lib/alexa'), require('./lib/amplitude'), require('./lib/appcues'), require('./lib/atatus'), require('./lib/autosend'), require('./lib/awesm'), require('./lib/bing-ads'), require('./lib/blueshift'), require('./lib/bronto'), require('./lib/bugherd'), require('./lib/bugsnag'), require('./lib/chartbeat'), require('./lib/churnbee'), require('./lib/clicktale'), require('./lib/clicky'), require('./lib/comscore'), require('./lib/crazy-egg'), require('./lib/curebit'), require('./lib/customerio'), require('./lib/drip'), require('./lib/errorception'), require('./lib/evergage'), require('./lib/extole'), require('./lib/facebook-conversion-tracking'), require('./lib/foxmetrics'), require('./lib/frontleaf'), require('./lib/fullstory'), require('./lib/gauges'), require('./lib/get-satisfaction'), require('./lib/google-analytics'), require('./lib/google-tag-manager'), require('./lib/gosquared'), require('./lib/heap'), require('./lib/hellobar'), require('./lib/hittail'), require('./lib/hubspot'), require('./lib/improvely'), require('./lib/insidevault'), require('./lib/inspectlet'), require('./lib/intercom'), require('./lib/keen-io'), require('./lib/kenshoo'), require('./lib/kissmetrics'), require('./lib/klaviyo'), require('./lib/livechat'), require('./lib/lucky-orange'), require('./lib/lytics'), require('./lib/mixpanel'), require('./lib/mojn'), require('./lib/mouseflow'), require('./lib/mousestats'), require('./lib/navilytics'), require('./lib/nudgespot'), require('./lib/olark'), require('./lib/optimizely'), require('./lib/perfect-audience'), require('./lib/pingdom'), require('./lib/piwik'), require('./lib/preact'), require('./lib/qualaroo'), require('./lib/quantcast'), require('./lib/rollbar'), require('./lib/saasquatch'), require('./lib/satismeter'), require('./lib/segmentio'), require('./lib/sentry'), require('./lib/snapengage'), require('./lib/spinnakr'), require('./lib/tapstream'), require('./lib/trakio'), require('./lib/twitter-ads'), require('./lib/userlike'), require('./lib/uservoice'), require('./lib/vero'), require('./lib/visual-website-optimizer'), require('./lib/webengage'), require('./lib/woopra'), require('./lib/yandex-metrica')] }, { './lib/adroll': 8, './lib/adwords': 9, './lib/alexa': 10, './lib/amplitude': 11, './lib/appcues': 12, './lib/atatus': 13, './lib/autosend': 14, './lib/awesm': 15, './lib/bing-ads': 16, './lib/blueshift': 17, './lib/bronto': 18, './lib/bugherd': 19, './lib/bugsnag': 20, './lib/chartbeat': 21, './lib/churnbee': 22, './lib/clicktale': 23, './lib/clicky': 24, './lib/comscore': 25, './lib/crazy-egg': 26, './lib/curebit': 27, './lib/customerio': 28, './lib/drip': 29, './lib/errorception': 30, './lib/evergage': 31, './lib/extole': 32, './lib/facebook-conversion-tracking': 33, './lib/foxmetrics': 34, './lib/frontleaf': 35, './lib/fullstory': 36, './lib/gauges': 37, './lib/get-satisfaction': 38, './lib/google-analytics': 39, './lib/google-tag-manager': 40, './lib/gosquared': 41, './lib/heap': 42, './lib/hellobar': 43, './lib/hittail': 44, './lib/hubspot': 45, './lib/improvely': 46, './lib/insidevault': 47, './lib/inspectlet': 48, './lib/intercom': 49, './lib/keen-io': 50, './lib/kenshoo': 51, './lib/kissmetrics': 52, './lib/klaviyo': 53, './lib/livechat': 54, './lib/lucky-orange': 55, './lib/lytics': 56, './lib/mixpanel': 57, './lib/mojn': 58, './lib/mouseflow': 59, './lib/mousestats': 60, './lib/navilytics': 61, './lib/nudgespot': 62, './lib/olark': 63, './lib/optimizely': 64, './lib/perfect-audience': 65, './lib/pingdom': 66, './lib/piwik': 67, './lib/preact': 68, './lib/qualaroo': 69, './lib/quantcast': 70, './lib/rollbar': 71, './lib/saasquatch': 72, './lib/satismeter': 73, './lib/segmentio': 74, './lib/sentry': 75, './lib/snapengage': 76, './lib/spinnakr': 77, './lib/tapstream': 78, './lib/trakio': 79, './lib/twitter-ads': 80, './lib/userlike': 81, './lib/uservoice': 82, './lib/vero': 83, './lib/visual-website-optimizer': 84, './lib/webengage': 85, './lib/woopra': 86, './lib/yandex-metrica': 87 }],
  8: [function (require, module, exports) { const integration = require('analytics.js-integration'); const snake = require('to-snake-case'); const useHttps = require('use-https'); const each = require('each'); const is = require('is'); const del = require('obj-case').del; const has = Object.prototype.hasOwnProperty; const AdRoll = module.exports = integration('AdRoll').assumesPageview().global('__adroll_loaded').global('adroll_adv_id').global('adroll_pix_id').global('adroll_custom_data').option('advId', '').option('pixId', '').tag('http', '<script src="http://a.adroll.com/j/roundtrip.js">').tag('https', '<script src="https://s.adroll.com/j/roundtrip.js">').mapping('events'); AdRoll.prototype.initialize = function (page) { window.adroll_adv_id = this.options.advId; window.adroll_pix_id = this.options.pixId; window.__adroll_loaded = true; const name = useHttps() ? 'https' : 'http'; this.load(name, this.ready) }; AdRoll.prototype.loaded = function () { return window.__adroll }; AdRoll.prototype.page = function (page) { const name = page.fullName(); this.track(page.track(name)) }; AdRoll.prototype.track = function (track) { const event = track.event(); const user = this.analytics.user(); const events = this.events(event); const total = track.revenue() || track.total() || 0; const orderId = track.orderId() || 0; const productId = track.id(); const sku = track.sku(); const customProps = track.properties(); const data = {}; if (user.id())data.user_id = user.id(); if (orderId)data.order_id = orderId; if (productId)data.product_id = productId; if (sku)data.sku = sku; del(customProps, 'revenue'); del(customProps, 'total'); del(customProps, 'orderId'); del(customProps, 'id'); del(customProps, 'sku'); if (!is.empty(customProps))data.adroll_custom_data = customProps; each(events, function (event) { data.adroll_conversion_value_in_dollars = total; data.adroll_segments = snake(event); window.__adroll.record_user(data) }); if (!events.length) { data.adroll_segments = snake(event); window.__adroll.record_user(data) } } }, { 'analytics.js-integration': 88, 'to-snake-case': 89, 'use-https': 90, each: 4, is: 91, 'obj-case': 92 }],
  88: [function (require, module, exports) { const bind = require('bind'); const callback = require('callback'); const clone = require('clone'); const debug = require('debug'); const defaults = require('defaults'); const protos = require('./protos'); const slug = require('slug'); const statics = require('./statics'); module.exports = createIntegration; function createIntegration (name) { function Integration (options) { if (options && options.addIntegration) { return options.addIntegration(Integration) } this.debug = debug('analytics:integration:' + slug(name)); this.options = defaults(clone(options) || {}, this.defaults); this._queue = []; this.once('ready', bind(this, this.flush)); Integration.emit('construct', this); this.ready = bind(this, this.ready); this._wrapInitialize(); this._wrapPage(); this._wrapTrack() }Integration.prototype.defaults = {}; Integration.prototype.globals = []; Integration.prototype.templates = {}; Integration.prototype.name = name; for (var key in statics)Integration[key] = statics[key]; for (var key in protos)Integration.prototype[key] = protos[key]; return Integration } }, { bind: 93, callback: 94, clone: 95, debug: 96, defaults: 97, './protos': 98, slug: 99, './statics': 100 }],
  93: [function (require, module, exports) { const bind = require('bind'); const bindAll = require('bind-all'); module.exports = exports = bind; exports.all = bindAll; exports.methods = bindMethods; function bindMethods (obj, methods) { methods = [].slice.call(arguments, 1); for (var i = 0, method; method = methods[i]; i++) { obj[method] = bind(obj, obj[method]) } return obj } }, { bind: 101, 'bind-all': 102 }],
  101: [function (require, module, exports) { const slice = [].slice; module.exports = function (obj, fn) { if (typeof fn === 'string')fn = obj[fn]; if (typeof fn !== 'function') throw new Error('bind() requires a function'); const args = slice.call(arguments, 2); return function () { return fn.apply(obj, args.concat(slice.call(arguments))) } } }, {}],
  102: [function (require, module, exports) { try { var bind = require('bind'); var type = require('type') } catch (e) { var bind = require('bind-component'); var type = require('type-component') }module.exports = function (obj) { for (const key in obj) { const val = obj[key]; if (type(val) === 'function')obj[key] = bind(obj, obj[key]) } return obj } }, { bind: 101, type: 7 }],
  94: [function (require, module, exports) { const next = require('next-tick'); module.exports = callback; function callback (fn) { if (typeof fn === 'function')fn() }callback.async = function (fn, wait) { if (typeof fn !== 'function') return; if (!wait) return next(fn); setTimeout(fn, wait) }; callback.sync = callback }, { 'next-tick': 103 }],
  103: [function (require, module, exports) { 'use strict'; if (typeof setImmediate === 'function') { module.exports = function (f) { setImmediate(f) } } else if (typeof process !== 'undefined' && typeof process.nextTick === 'function') { module.exports = process.nextTick } else if (typeof window === 'undefined' || window.ActiveXObject || !window.postMessage) { module.exports = function (f) { setTimeout(f) } } else { let q = []; window.addEventListener('message', function () { let i = 0; while (i < q.length) { try { q[i++]() } catch (e) { q = q.slice(i); window.postMessage('tic!', '*'); throw e } }q.length = 0 }, true); module.exports = function (fn) { if (!q.length)window.postMessage('tic!', '*'); q.push(fn) } } }, {}],
  95: [function (require, module, exports) { let type; try { type = require('type') } catch (e) { type = require('type-component') }module.exports = clone; function clone (obj) { switch (type(obj)) { case 'object':var copy = {}; for (const key in obj) { if (obj.hasOwnProperty(key)) { copy[key] = clone(obj[key]) } } return copy; case 'array':var copy = new Array(obj.length); for (let i = 0, l = obj.length; i < l; i++) { copy[i] = clone(obj[i]) } return copy; case 'regexp':var flags = ''; flags += obj.multiline ? 'm' : ''; flags += obj.global ? 'g' : ''; flags += obj.ignoreCase ? 'i' : ''; return new RegExp(obj.source, flags); case 'date':return new Date(obj.getTime()); default:return obj } } }, { type: 7 }],
  96: [function (require, module, exports) { if (typeof window === 'undefined') { module.exports = require('./lib/debug') } else { module.exports = require('./debug') } }, { './lib/debug': 104, './debug': 105 }],
  104: [function (require, module, exports) { const tty = require('tty'); module.exports = debug; const names = []; const skips = []; (process.env.DEBUG || '').split(/[\s,]+/).forEach(function (name) { name = name.replace('*', '.*?'); if (name[0] === '-') { skips.push(new RegExp('^' + name.substr(1) + '$')) } else { names.push(new RegExp('^' + name + '$')) } }); const colors = [6, 2, 3, 4, 5, 1]; const prev = {}; let prevColor = 0; const isatty = tty.isatty(2); function color () { return colors[prevColor++ % colors.length] } function humanize (ms) { const sec = 1e3; const min = 60 * 1e3; const hour = 60 * min; if (ms >= hour) return (ms / hour).toFixed(1) + 'h'; if (ms >= min) return (ms / min).toFixed(1) + 'm'; if (ms >= sec) return (ms / sec | 0) + 's'; return ms + 'ms' } function debug (name) { function disabled () {}disabled.enabled = false; let match = skips.some(function (re) { return re.test(name) }); if (match) return disabled; match = names.some(function (re) { return re.test(name) }); if (!match) return disabled; const c = color(); function colored (fmt) { fmt = coerce(fmt); const curr = new Date(); const ms = curr - (prev[name] || curr); prev[name] = curr; fmt = '  [9' + c + 'm' + name + ' ' + '[3' + c + 'm[90m' + fmt + '[3' + c + 'm' + ' +' + humanize(ms) + '[0m'; console.error.apply(this, arguments) } function plain (fmt) { fmt = coerce(fmt); fmt = (new Date()).toUTCString() + ' ' + name + ' ' + fmt; console.error.apply(this, arguments) }colored.enabled = plain.enabled = true; return isatty || process.env.DEBUG_COLORS ? colored : plain } function coerce (val) { if (val instanceof Error) return val.stack || val.message; return val } }, {}],
  105: [function (require, module, exports) { module.exports = debug; function debug (name) { if (!debug.enabled(name)) return function () {}; return function (fmt) { fmt = coerce(fmt); const curr = new Date(); const ms = curr - (debug[name] || curr); debug[name] = curr; fmt = name + ' ' + fmt + ' +' + debug.humanize(ms); window.console && console.log && Function.prototype.apply.call(console.log, console, arguments) } }debug.names = []; debug.skips = []; debug.enable = function (name) { try { localStorage.debug = name } catch (e) {} const split = (name || '').split(/[\s,]+/); const len = split.length; for (let i = 0; i < len; i++) { name = split[i].replace('*', '.*?'); if (name[0] === '-') { debug.skips.push(new RegExp('^' + name.substr(1) + '$')) } else { debug.names.push(new RegExp('^' + name + '$')) } } }; debug.disable = function () { debug.enable('') }; debug.humanize = function (ms) { const sec = 1e3; const min = 60 * 1e3; const hour = 60 * min; if (ms >= hour) return (ms / hour).toFixed(1) + 'h'; if (ms >= min) return (ms / min).toFixed(1) + 'm'; if (ms >= sec) return (ms / sec | 0) + 's'; return ms + 'ms' }; debug.enabled = function (name) { for (var i = 0, len = debug.skips.length; i < len; i++) { if (debug.skips[i].test(name)) { return false } } for (var i = 0, len = debug.names.length; i < len; i++) { if (debug.names[i].test(name)) { return true } } return false }; function coerce (val) { if (val instanceof Error) return val.stack || val.message; return val } try { if (window.localStorage)debug.enable(localStorage.debug) } catch (e) {} }, {}],
  97: [function (require, module, exports) { 'use strict'; const defaults = function (dest, src, recursive) { for (const prop in src) { if (recursive && dest[prop] instanceof Object && src[prop] instanceof Object) { dest[prop] = defaults(dest[prop], src[prop], true) } else if (!(prop in dest)) { dest[prop] = src[prop] } } return dest }; module.exports = defaults }, {}],
  98: [function (require, module, exports) { const loadScript = require('load-script'); const loadIframe = require('load-iframe'); const events = require('analytics-events'); const normalize = require('to-no-case'); const callback = require('callback'); const Emitter = require('emitter'); const tick = require('next-tick'); const after = require('after'); const each = require('each'); const type = require('type'); const fmt = require('fmt'); function noop () {} const setTimeout = window.setTimeout; const setInterval = window.setInterval; const onerror = window.onerror; const onload = null; Emitter(exports); exports.initialize = function () { const ready = this.ready; tick(ready) }; exports.loaded = function () { return false }; exports.page = function (page) {}; exports.track = function (track) {}; exports.map = function (obj, str) { const a = normalize(str); const ret = []; if (!obj) return ret; if (type(obj) == 'object') { for (const k in obj) { var item = obj[k]; var b = normalize(k); if (b == a)ret.push(item) } } if (type(obj) == 'array') { if (!obj.length) return ret; if (!obj[0].key) return ret; for (let i = 0; i < obj.length; ++i) { var item = obj[i]; var b = normalize(item.key); if (b == a)ret.push(item.value) } } return ret }; exports.invoke = function (method) { if (!this[method]) return; const args = [].slice.call(arguments, 1); if (!this._ready) return this.queue(method, args); let ret; try { this.debug('%s with %o', method, args); ret = this[method].apply(this, args) } catch (e) { this.debug('error %o calling %s with %o', e, method, args) } return ret }; exports.queue = function (method, args) { if (method == 'page' && this._assumesPageview && !this._initialized) { return this.page.apply(this, args) } this._queue.push({ method, args }) }; exports.flush = function () { this._ready = true; let call; while (call = this._queue.shift()) this[call.method].apply(this, call.args) }; exports.reset = function () { for (var i = 0, key; key = this.globals[i]; i++)window[key] = undefined; window.setTimeout = setTimeout; window.setInterval = setInterval; window.onerror = onerror; window.onload = onload }; exports.load = function (name, locals, fn) { if (typeof name === 'function')fn = name, locals = null, name = null; if (name && typeof name === 'object')fn = locals, locals = name, name = null; if (typeof locals === 'function')fn = locals, locals = null; name = name || 'library'; locals = locals || {}; locals = this.locals(locals); const template = this.templates[name]; if (!template) throw new Error(fmt('template "%s" not defined.', name)); const attrs = render(template, locals); var fn = fn || noop; const self = this; let el; switch (template.type) { case 'img':attrs.width = 1; attrs.height = 1; el = loadImage(attrs, fn); break; case 'script':el = loadScript(attrs, function (err) { if (!err) return fn(); self.debug('error loading "%s" error="%s"', self.name, err) }); delete attrs.src; each(attrs, function (key, val) { el.setAttribute(key, val) }); break; case 'iframe':el = loadIframe(attrs, fn); break } return el }; exports.locals = function (locals) { locals = locals || {}; const cache = Math.floor((new Date()).getTime() / 36e5); if (!locals.hasOwnProperty('cache'))locals.cache = cache; each(this.options, function (key, val) { if (!locals.hasOwnProperty(key))locals[key] = val }); return locals }; exports.ready = function () { this.emit('ready') }; exports._wrapInitialize = function () { const initialize = this.initialize; this.initialize = function () { this.debug('initialize'); this._initialized = true; const ret = initialize.apply(this, arguments); this.emit('initialize'); return ret }; if (this._assumesPageview) this.initialize = after(2, this.initialize) }; exports._wrapPage = function () { const page = this.page; this.page = function () { if (this._assumesPageview && !this._initialized) { return this.initialize.apply(this, arguments) } return page.apply(this, arguments) } }; exports._wrapTrack = function () { const t = this.track; this.track = function (track) { const event = track.event(); let called; let ret; for (const method in events) { const regexp = events[method]; if (!this[method]) continue; if (!regexp.test(event)) continue; ret = this[method].apply(this, arguments); called = true; break } if (!called)ret = t.apply(this, arguments); return ret } }; function loadImage (attrs, fn) { fn = fn || function () {}; const img = new Image(); img.onerror = error(fn, 'failed to load pixel', img); img.onload = function () { fn() }; img.src = attrs.src; img.width = 1; img.height = 1; return img } function error (fn, message, img) { return function (e) { e = e || window.event; const err = new Error(message); err.event = e; err.source = img; fn(err) } } function render (template, locals) { const attrs = {}; each(template.attrs, function (key, val) { attrs[key] = val.replace(/\{\{\ *(\w+)\ *\}\}/g, function (_, $1) { return locals[$1] }) }); return attrs } }, { 'load-script': 106, 'load-iframe': 107, 'analytics-events': 108, 'to-no-case': 109, callback: 94, emitter: 110, 'next-tick': 103, after: 111, each: 112, type: 113, fmt: 114 }],
  106: [function (require, module, exports) { const onload = require('script-onload'); const tick = require('next-tick'); const type = require('type'); module.exports = function loadScript (options, fn) { if (!options) throw new Error('Cant load nothing...'); if (type(options) == 'string')options = { src: options }; const https = document.location.protocol === 'https:' || document.location.protocol === 'chrome-extension:'; if (options.src && options.src.indexOf('//') === 0) { options.src = https ? 'https:' + options.src : 'http:' + options.src } if (https && options.https)options.src = options.https; else if (!https && options.http)options.src = options.http; const script = document.createElement('script'); script.type = 'text/javascript'; script.async = true; script.src = options.src; if (type(fn) == 'function') { onload(script, fn) }tick(function () { const firstScript = document.getElementsByTagName('script')[0]; firstScript.parentNode.insertBefore(script, firstScript) }); return script } }, { 'script-onload': 115, 'next-tick': 103, type: 7 }],
  115: [function (require, module, exports) { module.exports = function (el, fn) { return el.addEventListener ? add(el, fn) : attach(el, fn) }; function add (el, fn) { el.addEventListener('load', function (_, e) { fn(null, e) }, false); el.addEventListener('error', function (e) { const err = new Error('script error "' + el.src + '"'); err.event = e; fn(err) }, false) } function attach (el, fn) { el.attachEvent('onreadystatechange', function (e) { if (!/complete|loaded/.test(el.readyState)) return; fn(null, e) }); el.attachEvent('onerror', function (e) { const err = new Error('failed to load the script "' + el.src + '"'); err.event = e || window.event; fn(err) }) } }, {}],
  107: [function (require, module, exports) { const onload = require('script-onload'); const tick = require('next-tick'); const type = require('type'); module.exports = function loadIframe (options, fn) { if (!options) throw new Error('Cant load nothing...'); if (type(options) == 'string')options = { src: options }; const https = document.location.protocol === 'https:' || document.location.protocol === 'chrome-extension:'; if (options.src && options.src.indexOf('//') === 0) { options.src = https ? 'https:' + options.src : 'http:' + options.src } if (https && options.https)options.src = options.https; else if (!https && options.http)options.src = options.http; const iframe = document.createElement('iframe'); iframe.src = options.src; iframe.width = options.width || 1; iframe.height = options.height || 1; iframe.style.display = 'none'; if (type(fn) == 'function') { onload(iframe, fn) }tick(function () { const firstScript = document.getElementsByTagName('script')[0]; firstScript.parentNode.insertBefore(iframe, firstScript) }); return iframe } }, { 'script-onload': 115, 'next-tick': 103, type: 7 }],
  108: [function (require, module, exports) { module.exports = { removedProduct: /^[ _]?removed[ _]?product[ _]?$/i, viewedProduct: /^[ _]?viewed[ _]?product[ _]?$/i, viewedProductCategory: /^[ _]?viewed[ _]?product[ _]?category[ _]?$/i, addedProduct: /^[ _]?added[ _]?product[ _]?$/i, completedOrder: /^[ _]?completed[ _]?order[ _]?$/i, startedOrder: /^[ _]?started[ _]?order[ _]?$/i, updatedOrder: /^[ _]?updated[ _]?order[ _]?$/i, refundedOrder: /^[ _]?refunded?[ _]?order[ _]?$/i, viewedProductDetails: /^[ _]?viewed[ _]?product[ _]?details?[ _]?$/i, clickedProduct: /^[ _]?clicked[ _]?product[ _]?$/i, viewedPromotion: /^[ _]?viewed[ _]?promotion?[ _]?$/i, clickedPromotion: /^[ _]?clicked[ _]?promotion?[ _]?$/i, viewedCheckoutStep: /^[ _]?viewed[ _]?checkout[ _]?step[ _]?$/i, completedCheckoutStep: /^[ _]?completed[ _]?checkout[ _]?step[ _]?$/i } }, {}],
  109: [function (require, module, exports) { module.exports = toNoCase; const hasSpace = /\s/; const hasSeparator = /[\W_]/; function toNoCase (string) { if (hasSpace.test(string)) return string.toLowerCase(); if (hasSeparator.test(string)) return unseparate(string).toLowerCase(); return uncamelize(string).toLowerCase() } const separatorSplitter = /[\W_]+(.|$)/g; function unseparate (string) { return string.replace(separatorSplitter, function (m, next) { return next ? ' ' + next : '' }) } const camelSplitter = /(.)([A-Z]+)/g; function uncamelize (string) { return string.replace(camelSplitter, function (m, previous, uppers) { return previous + ' ' + uppers.toLowerCase().split('').join(' ') }) } }, {}],
  110: [function (require, module, exports) { const index = require('indexof'); module.exports = Emitter; function Emitter (obj) { if (obj) return mixin(obj) } function mixin (obj) { for (const key in Emitter.prototype) { obj[key] = Emitter.prototype[key] } return obj }Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) { this._callbacks = this._callbacks || {}; (this._callbacks[event] = this._callbacks[event] || []).push(fn); return this }; Emitter.prototype.once = function (event, fn) { const self = this; this._callbacks = this._callbacks || {}; function on () { self.off(event, on); fn.apply(this, arguments) }fn._off = on; this.on(event, on); return this }; Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) { this._callbacks = this._callbacks || {}; if (arguments.length == 0) { this._callbacks = {}; return this } const callbacks = this._callbacks[event]; if (!callbacks) return this; if (arguments.length == 1) { delete this._callbacks[event]; return this } const i = index(callbacks, fn._off || fn); if (~i)callbacks.splice(i, 1); return this }; Emitter.prototype.emit = function (event) { this._callbacks = this._callbacks || {}; const args = [].slice.call(arguments, 1); let callbacks = this._callbacks[event]; if (callbacks) { callbacks = callbacks.slice(0); for (let i = 0, len = callbacks.length; i < len; ++i) { callbacks[i].apply(this, args) } } return this }; Emitter.prototype.listeners = function (event) { this._callbacks = this._callbacks || {}; return this._callbacks[event] || [] }; Emitter.prototype.hasListeners = function (event) { return !!this.listeners(event).length } }, { indexof: 116 }],
  116: [function (require, module, exports) { module.exports = function (arr, obj) { if (arr.indexOf) return arr.indexOf(obj); for (let i = 0; i < arr.length; ++i) { if (arr[i] === obj) return i } return -1 } }, {}],
  111: [function (require, module, exports) { module.exports = function after (times, func) { if (times <= 0) return func(); return function () { if (--times < 1) { return func.apply(this, arguments) } } } }, {}],
  112: [function (require, module, exports) { try { var type = require('type') } catch (err) { var type = require('component-type') } const toFunction = require('to-function'); const has = Object.prototype.hasOwnProperty; module.exports = function (obj, fn, ctx) { fn = toFunction(fn); ctx = ctx || this; switch (type(obj)) { case 'array':return array(obj, fn, ctx); case 'object':if (typeof obj.length === 'number') return array(obj, fn, ctx); return object(obj, fn, ctx); case 'string':return string(obj, fn, ctx) } }; function string (obj, fn, ctx) { for (let i = 0; i < obj.length; ++i) { fn.call(ctx, obj.charAt(i), i) } } function object (obj, fn, ctx) { for (const key in obj) { if (has.call(obj, key)) { fn.call(ctx, key, obj[key]) } } } function array (obj, fn, ctx) { for (let i = 0; i < obj.length; ++i) { fn.call(ctx, obj[i], i) } } }, { type: 113, 'component-type': 113, 'to-function': 117 }],
  113: [function (require, module, exports) { const toString = Object.prototype.toString; module.exports = function (val) { switch (toString.call(val)) { case '[object Function]':return 'function'; case '[object Date]':return 'date'; case '[object RegExp]':return 'regexp'; case '[object Arguments]':return 'arguments'; case '[object Array]':return 'array'; case '[object String]':return 'string' } if (val === null) return 'null'; if (val === undefined) return 'undefined'; if (val && val.nodeType === 1) return 'element'; if (val === Object(val)) return 'object'; return typeof val } }, {}],
  117: [function (require, module, exports) { let expr; try { expr = require('props') } catch (e) { expr = require('component-props') }module.exports = toFunction; function toFunction (obj) { switch ({}.toString.call(obj)) { case '[object Object]':return objectToFunction(obj); case '[object Function]':return obj; case '[object String]':return stringToFunction(obj); case '[object RegExp]':return regexpToFunction(obj); default:return defaultToFunction(obj) } } function defaultToFunction (val) { return function (obj) { return val === obj } } function regexpToFunction (re) { return function (obj) { return re.test(obj) } } function stringToFunction (str) { if (/^ *\W+/.test(str)) return new Function('_', 'return _ ' + str); return new Function('_', 'return ' + get(str)) } function objectToFunction (obj) { const match = {}; for (const key in obj) { match[key] = typeof obj[key] === 'string' ? defaultToFunction(obj[key]) : toFunction(obj[key]) } return function (val) { if (typeof val !== 'object') return false; for (const key in match) { if (!(key in val)) return false; if (!match[key](val[key])) return false } return true } } function get (str) { const props = expr(str); if (!props.length) return '_.' + str; let val, i, prop; for (i = 0; i < props.length; i++) { prop = props[i]; val = '_.' + prop; val = "('function' == typeof " + val + ' ? ' + val + '() : ' + val + ')'; str = stripNested(prop, str, val) } return str } function stripNested (prop, str, val) { return str.replace(new RegExp('(\\.)?' + prop, 'g'), function ($0, $1) { return $1 ? $0 : val }) } }, { props: 118, 'component-props': 118 }],
  118: [function (require, module, exports) { const globals = /\b(this|Array|Date|Object|Math|JSON)\b/g; module.exports = function (str, fn) { const p = unique(props(str)); if (fn && typeof fn === 'string')fn = prefixed(fn); if (fn) return map(str, p, fn); return p }; function props (str) { return str.replace(/\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\//g, '').replace(globals, '').match(/[$a-zA-Z_]\w*/g) || [] } function map (str, props, fn) { const re = /\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\/|[a-zA-Z_]\w*/g; return str.replace(re, function (_) { if (_[_.length - 1] == '(') return fn(_); if (!~props.indexOf(_)) return _; return fn(_) }) } function unique (arr) { const ret = []; for (let i = 0; i < arr.length; i++) { if (~ret.indexOf(arr[i])) continue; ret.push(arr[i]) } return ret } function prefixed (str) { return function (_) { return str + _ } } }, {}],
  114: [function (require, module, exports) { const toString = window.JSON ? JSON.stringify : function (_) { return String(_) }; module.exports = fmt; fmt.o = toString; fmt.s = String; fmt.d = parseInt; function fmt (str) { const args = [].slice.call(arguments, 1); let j = 0; return str.replace(/%([a-z])/gi, function (_, f) { return fmt[f] ? fmt[f](args[j++]) : _ + f }) } }, {}],
  99: [function (require, module, exports) { module.exports = function (str, options) { options || (options = {}); return str.toLowerCase().replace(options.replace || /[^a-z0-9]/g, ' ').replace(/^ +| +$/g, '').replace(/ +/g, options.separator || '-') } }, {}],
  100: [function (require, module, exports) { const after = require('after'); const domify = require('domify'); const each = require('each'); const Emitter = require('emitter'); Emitter(exports); exports.option = function (key, value) { this.prototype.defaults[key] = value; return this }; exports.mapping = function (name) { this.option(name, []); this.prototype[name] = function (str) { return this.map(this.options[name], str) }; return this }; exports.global = function (key) { this.prototype.globals.push(key); return this }; exports.assumesPageview = function () { this.prototype._assumesPageview = true; return this }; exports.readyOnLoad = function () { this.prototype._readyOnLoad = true; return this }; exports.readyOnInitialize = function () { this.prototype._readyOnInitialize = true; return this }; exports.tag = function (name, str) { if (str == null) { str = name; name = 'library' } this.prototype.templates[name] = objectify(str); return this }; function objectify (str) { str = str.replace(' src="', ' data-src="'); const el = domify(str); const attrs = {}; each(el.attributes, function (attr) { const name = attr.name == 'data-src' ? 'src' : attr.name; if (!~str.indexOf(attr.name + '=')) return; attrs[name] = attr.value }); return { type: el.tagName.toLowerCase(), attrs } } }, { after: 111, domify: 119, each: 112, emitter: 110 }],
  119: [function (require, module, exports) {
    module.exports = parse; let div = document.createElement('div'); div.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>'; const innerHTMLBug = !div.getElementsByTagName('link').length; div = undefined; const map = { legend: [1, '<fieldset>', '</fieldset>'], tr: [2, '<table><tbody>', '</tbody></table>'], col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'], _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', ''] }; map.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>']; map.option = map.optgroup = [1, '<select multiple="multiple">', '</select>']; map.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>']; map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">', '</svg>']; function parse (html, doc) {
      if (typeof html !== 'string') throw new TypeError('String expected'); if (!doc)doc = document; const m = /<([\w:]+)/.exec(html); if (!m) return doc.createTextNode(html); html = html.replace(/^\s+|\s+$/g, ''); const tag = m[1]; if (tag == 'body') { var el = doc.createElement('html'); el.innerHTML = html; return el.removeChild(el.lastChild) } const wrap = map[tag] || map._default; let depth = wrap[0]
      const prefix = wrap[1]; const suffix = wrap[2]; var el = doc.createElement('div'); el.innerHTML = prefix + html + suffix; while (depth--)el = el.lastChild; if (el.firstChild == el.lastChild) { return el.removeChild(el.firstChild) } const fragment = doc.createDocumentFragment(); while (el.firstChild) { fragment.appendChild(el.removeChild(el.firstChild)) } return fragment
    }
  }, {}],
  89: [function (require, module, exports) { const toSpace = require('to-space-case'); module.exports = toSnakeCase; function toSnakeCase (string) { return toSpace(string).replace(/\s/g, '_') } }, { 'to-space-case': 120 }],
  120: [function (require, module, exports) { const clean = require('to-no-case'); module.exports = toSpaceCase; function toSpaceCase (string) { return clean(string).replace(/[\W_]+(.|$)/g, function (matches, match) { return match ? ' ' + match : '' }) } }, { 'to-no-case': 121 }],
  121: [function (require, module, exports) { module.exports = toNoCase; const hasSpace = /\s/; const hasCamel = /[a-z][A-Z]/; const hasSeparator = /[\W_]/; function toNoCase (string) { if (hasSpace.test(string)) return string.toLowerCase(); if (hasSeparator.test(string))string = unseparate(string); if (hasCamel.test(string))string = uncamelize(string); return string.toLowerCase() } const separatorSplitter = /[\W_]+(.|$)/g; function unseparate (string) { return string.replace(separatorSplitter, function (m, next) { return next ? ' ' + next : '' }) } const camelSplitter = /(.)([A-Z]+)/g; function uncamelize (string) { return string.replace(camelSplitter, function (m, previous, uppers) { return previous + ' ' + uppers.toLowerCase().split('').join(' ') }) } }, {}],
  90: [function (require, module, exports) { module.exports = function (url) { switch (arguments.length) { case 0:return check(); case 1:return transform(url) } }; function transform (url) { return check() ? 'https:' + url : 'http:' + url } function check () { return location.protocol == 'https:' || location.protocol == 'chrome-extension:' } }, {}],
  91: [function (require, module, exports) { const isEmpty = require('is-empty'); try { var typeOf = require('type') } catch (e) { var typeOf = require('component-type') } const types = ['arguments', 'array', 'boolean', 'date', 'element', 'function', 'null', 'number', 'object', 'regexp', 'string', 'undefined']; for (var i = 0, type; type = types[i]; i++)exports[type] = generate(type); exports.fn = exports.function; exports.empty = isEmpty; exports.nan = function (val) { return exports.number(val) && val != val }; function generate (type) { return function (value) { return type === typeOf(value) } } }, { 'is-empty': 122, type: 7, 'component-type': 7 }],
  122: [function (require, module, exports) { module.exports = isEmpty; const has = Object.prototype.hasOwnProperty; function isEmpty (val) { if (val == null) return true; if (typeof val === 'number') return val === 0; if (undefined !== val.length) return val.length === 0; for (const key in val) if (has.call(val, key)) return false; return true } }, {}],
  92: [function (require, module, exports) { const Case = require('case'); const identity = function (_) { return _ }; const cases = [identity, Case.upper, Case.lower, Case.snake, Case.pascal, Case.camel, Case.constant, Case.title, Case.capital, Case.sentence]; module.exports = module.exports.find = multiple(find); module.exports.replace = function (obj, key, val) { multiple(replace).apply(this, arguments); return obj }; module.exports.del = function (obj, key) { multiple(del).apply(this, arguments); return obj }; function multiple (fn) { return function (obj, key, val) { const keys = key.split('.'); if (keys.length === 0) return; while (keys.length > 1) { key = keys.shift(); obj = find(obj, key); if (obj === null || obj === undefined) return }key = keys.shift(); return fn(obj, key, val) } } function find (obj, key) { for (let i = 0; i < cases.length; i++) { const cased = cases[i](key); if (obj.hasOwnProperty(cased)) return obj[cased] } } function del (obj, key) { for (let i = 0; i < cases.length; i++) { const cased = cases[i](key); if (obj.hasOwnProperty(cased)) delete obj[cased] } return obj } function replace (obj, key, val) { for (let i = 0; i < cases.length; i++) { const cased = cases[i](key); if (obj.hasOwnProperty(cased))obj[cased] = val } return obj } }, { case: 123 }],
  123: [function (require, module, exports) { const cases = require('./cases'); module.exports = exports = determineCase; function determineCase (string) { for (const key in cases) { if (key == 'none') continue; const convert = cases[key]; if (convert(string) == string) return key } return null }exports.add = function (name, convert) { exports[name] = cases[name] = convert }; for (const key in cases) { exports.add(key, cases[key]) } }, { './cases': 124 }],
  124: [function (require, module, exports) { const camel = require('to-camel-case'); const capital = require('to-capital-case'); const constant = require('to-constant-case'); const dot = require('to-dot-case'); const none = require('to-no-case'); const pascal = require('to-pascal-case'); const sentence = require('to-sentence-case'); const slug = require('to-slug-case'); const snake = require('to-snake-case'); const space = require('to-space-case'); const title = require('to-title-case'); exports.camel = camel; exports.pascal = pascal; exports.dot = dot; exports.slug = slug; exports.snake = snake; exports.space = space; exports.constant = constant; exports.capital = capital; exports.title = title; exports.sentence = sentence; exports.lower = function (string) { return none(string).toLowerCase() }; exports.upper = function (string) { return none(string).toUpperCase() }; exports.inverse = function (string) { for (var i = 0, char; char = string[i]; i++) { if (!/[a-z]/i.test(char)) continue; const upper = char.toUpperCase(); const lower = char.toLowerCase(); string[i] = char == upper ? lower : upper } return string }; exports.none = none }, { 'to-camel-case': 125, 'to-capital-case': 126, 'to-constant-case': 127, 'to-dot-case': 128, 'to-no-case': 121, 'to-pascal-case': 129, 'to-sentence-case': 130, 'to-slug-case': 131, 'to-snake-case': 132, 'to-space-case': 133, 'to-title-case': 134 }],
  125: [function (require, module, exports) { const toSpace = require('to-space-case'); module.exports = toCamelCase; function toCamelCase (string) { return toSpace(string).replace(/\s(\w)/g, function (matches, letter) { return letter.toUpperCase() }) } }, { 'to-space-case': 133 }],
  133: [function (require, module, exports) { const clean = require('to-no-case'); module.exports = toSpaceCase; function toSpaceCase (string) { return clean(string).replace(/[\W_]+(.|$)/g, function (matches, match) { return match ? ' ' + match : '' }) } }, { 'to-no-case': 121 }],
  126: [function (require, module, exports) { const clean = require('to-no-case'); module.exports = toCapitalCase; function toCapitalCase (string) { return clean(string).replace(/(^|\s)(\w)/g, function (matches, previous, letter) { return previous + letter.toUpperCase() }) } }, { 'to-no-case': 121 }],
  127: [function (require, module, exports) { const snake = require('to-snake-case'); module.exports = toConstantCase; function toConstantCase (string) { return snake(string).toUpperCase() } }, { 'to-snake-case': 132 }],
  132: [function (require, module, exports) { const toSpace = require('to-space-case'); module.exports = toSnakeCase; function toSnakeCase (string) { return toSpace(string).replace(/\s/g, '_') } }, { 'to-space-case': 133 }],
  128: [function (require, module, exports) { const toSpace = require('to-space-case'); module.exports = toDotCase; function toDotCase (string) { return toSpace(string).replace(/\s/g, '.') } }, { 'to-space-case': 133 }],
  129: [function (require, module, exports) { const toSpace = require('to-space-case'); module.exports = toPascalCase; function toPascalCase (string) { return toSpace(string).replace(/(?:^|\s)(\w)/g, function (matches, letter) { return letter.toUpperCase() }) } }, { 'to-space-case': 133 }],
  130: [function (require, module, exports) { const clean = require('to-no-case'); module.exports = toSentenceCase; function toSentenceCase (string) { return clean(string).replace(/[a-z]/i, function (letter) { return letter.toUpperCase() }) } }, { 'to-no-case': 121 }],
  131: [function (require, module, exports) { const toSpace = require('to-space-case'); module.exports = toSlugCase; function toSlugCase (string) { return toSpace(string).replace(/\s/g, '-') } }, { 'to-space-case': 133 }],
  134: [function (require, module, exports) { const capital = require('to-capital-case'); const escape = require('escape-regexp'); const map = require('map'); const minors = require('title-case-minors'); module.exports = toTitleCase; const escaped = map(minors, escape); const minorMatcher = new RegExp('[^^]\\b(' + escaped.join('|') + ')\\b', 'ig'); const colonMatcher = /:\s*(\w)/g; function toTitleCase (string) { return capital(string).replace(minorMatcher, function (minor) { return minor.toLowerCase() }).replace(colonMatcher, function (letter) { return letter.toUpperCase() }) } }, { 'to-capital-case': 126, 'escape-regexp': 135, map: 136, 'title-case-minors': 137 }],
  135: [function (require, module, exports) { module.exports = function (str) { return String(str).replace(/([.*+?=^!:${}()|[\]\/\\])/g, '\\$1') } }, {}],
  136: [function (require, module, exports) { const each = require('each'); module.exports = function map (obj, iterator) { const arr = []; each(obj, function (o) { arr.push(iterator.apply(null, arguments)) }); return arr } }, { each: 112 }],
  137: [function (require, module, exports) { module.exports = ['a', 'an', 'and', 'as', 'at', 'but', 'by', 'en', 'for', 'from', 'how', 'if', 'in', 'neither', 'nor', 'of', 'on', 'only', 'onto', 'out', 'or', 'per', 'so', 'than', 'that', 'the', 'to', 'until', 'up', 'upon', 'v', 'v.', 'versus', 'vs', 'vs.', 'via', 'when', 'with', 'without', 'yet'] }, {}],
  9: [function (require, module, exports) { const integration = require('analytics.js-integration'); const domify = require('domify'); const each = require('each'); const has = Object.prototype.hasOwnProperty; const AdWords = module.exports = integration('AdWords').option('conversionId', '').option('remarketing', false).tag('<script src="//www.googleadservices.com/pagead/conversion_async.js">').mapping('events'); AdWords.prototype.initialize = function () { this.load(this.ready) }; AdWords.prototype.loaded = function () { return !!document.body }; AdWords.prototype.page = function (page) { const remarketing = !!this.options.remarketing; const id = this.options.conversionId; const props = {}; window.google_trackConversion({ google_conversion_id: id, google_custom_params: props, google_remarketing_only: remarketing }) }; AdWords.prototype.track = function (track) { const id = this.options.conversionId; const events = this.events(track.event()); const revenue = track.revenue() || 0; each(events, function (label) { const props = track.properties(); delete props.revenue; window.google_trackConversion({ google_conversion_id: id, google_custom_params: props, google_conversion_language: 'en', google_conversion_format: '3', google_conversion_color: 'ffffff', google_conversion_label: label, google_conversion_value: revenue, google_remarketing_only: false }) }) } }, { 'analytics.js-integration': 88, domify: 119, each: 4 }],
  10: [function (require, module, exports) { const integration = require('analytics.js-integration'); const Alexa = module.exports = integration('Alexa').assumesPageview().global('_atrk_opts').option('account', null).option('domain', '').option('dynamic', true).tag('<script src="//d31qbv1cthcecs.cloudfront.net/atrk.js">'); Alexa.prototype.initialize = function (page) { const self = this; window._atrk_opts = { atrk_acct: this.options.account, domain: this.options.domain, dynamic: this.options.dynamic }; this.load(function () { window.atrk(); self.ready() }) }; Alexa.prototype.loaded = function () { return !!window.atrk } }, { 'analytics.js-integration': 88 }],
  11: [function (require, module, exports) { const integration = require('analytics.js-integration'); const utm = require('utm-params'); const top = require('top-domain'); const umd = typeof define === 'function' && define.amd; const src = '//d24n15hnbwhuhn.cloudfront.net/libs/amplitude-2.0.3-min.js'; const Amplitude = module.exports = integration('Amplitude').global('amplitude').option('apiKey', '').option('trackAllPages', false).option('trackNamedPages', true).option('trackCategorizedPages', true).tag('<script src="' + src + '">'); Amplitude.prototype.initialize = function (page) { (function (h, a) { const f = h.amplitude || {}; f._q = []; function e (i) { f[i] = function () { f._q.push([i].concat(Array.prototype.slice.call(arguments, 0))) } } const c = ['init', 'logEvent', 'setUserId', 'setUserProperties', 'setVersionName', 'setDomain', 'setDeviceId', 'setGlobalUserProperties']; for (let d = 0; d < c.length; d++) { e(c[d]) }h.amplitude = f })(window, document); this.setDomain(window.location.href); window.amplitude.init(this.options.apiKey); this.setUserProperties(window.location.search); const self = this; if (umd) { window.require([src], function (amplitude) { window.amplitude = amplitude; self.ready() }); return } this.load(function () { self.ready() }) }; Amplitude.prototype.loaded = function () { return !!(window.amplitude && window.amplitude.options) }; Amplitude.prototype.page = function (page) { const properties = page.properties(); const category = page.category(); const name = page.fullName(); const opts = this.options; if (opts.trackAllPages) { this.track(page.track()) } if (category && opts.trackCategorizedPages) { this.track(page.track(category)) } if (name && opts.trackNamedPages) { this.track(page.track(name)) } }; Amplitude.prototype.identify = function (identify) { const id = identify.userId(); const traits = identify.traits(); if (id)window.amplitude.setUserId(id); if (traits)window.amplitude.setUserProperties(traits) }; Amplitude.prototype.track = function (track) { const props = track.properties(); const event = track.event(); window.amplitude.logEvent(event, props) }; Amplitude.prototype.setDomain = function (href) { const domain = top(href); window.amplitude.setDomain(domain) }; Amplitude.prototype.setDeviceId = function (deviceId) { if (deviceId)window.amplitude.setDeviceId(deviceId) }; Amplitude.prototype.setUserProperties = function (query) { const campaign = utm(query); const campaignName = campaign.name; campaign.campaign = campaignName; delete campaign.name; if (campaign)window.amplitude.setUserProperties(campaign) } }, { 'analytics.js-integration': 88, 'utm-params': 138, 'top-domain': 139 }],
  138: [function (require, module, exports) { const parse = require('querystring').parse; module.exports = utm; function utm (query) { if (query.charAt(0) == '?')query = query.substring(1); var query = query.replace(/\?/g, '&'); const params = parse(query); let param; const ret = {}; for (const key in params) { if (~key.indexOf('utm_')) { param = key.substr(4); if (param == 'campaign')param = 'name'; ret[param] = params[key] } } return ret } }, { querystring: 140 }],
  140: [function (require, module, exports) { const encode = encodeURIComponent; const decode = decodeURIComponent; const trim = require('trim'); const type = require('type'); exports.parse = function (str) { if (typeof str !== 'string') return {}; str = trim(str); if (str == '') return {}; if (str.charAt(0) == '?')str = str.slice(1); const obj = {}; const pairs = str.split('&'); for (let i = 0; i < pairs.length; i++) { const parts = pairs[i].split('='); const key = decode(parts[0]); var m; if (m = /(\w+)\[(\d+)\]/.exec(key)) { obj[m[1]] = obj[m[1]] || []; obj[m[1]][m[2]] = decode(parts[1]); continue }obj[parts[0]] = parts[1] == null ? '' : decode(parts[1]) } return obj }; exports.stringify = function (obj) { if (!obj) return ''; const pairs = []; for (const key in obj) { const value = obj[key]; if (type(value) == 'array') { for (let i = 0; i < value.length; ++i) { pairs.push(encode(key + '[' + i + ']') + '=' + encode(value[i])) } continue }pairs.push(encode(key) + '=' + encode(obj[key])) } return pairs.join('&') } }, { trim: 141, type: 7 }],
  141: [function (require, module, exports) { exports = module.exports = trim; function trim (str) { if (str.trim) return str.trim(); return str.replace(/^\s*|\s*$/g, '') }exports.left = function (str) { if (str.trimLeft) return str.trimLeft(); return str.replace(/^\s*/, '') }; exports.right = function (str) { if (str.trimRight) return str.trimRight(); return str.replace(/\s*$/, '') } }, {}],
  139: [function (require, module, exports) { const parse = require('url').parse; module.exports = domain; const regexp = /[a-z0-9][a-z0-9\-]*[a-z0-9]\.[a-z\.]{2,6}$/i; function domain (url) { const host = parse(url).hostname; const match = host.match(regexp); return match ? match[0] : '' } }, { url: 142 }],
  142: [function (require, module, exports) { exports.parse = function (url) { const a = document.createElement('a'); a.href = url; return { href: a.href, host: a.host || location.host, port: a.port === '0' || a.port === '' ? port(a.protocol) : a.port, hash: a.hash, hostname: a.hostname || location.hostname, pathname: a.pathname.charAt(0) != '/' ? '/' + a.pathname : a.pathname, protocol: !a.protocol || a.protocol == ':' ? location.protocol : a.protocol, search: a.search, query: a.search.slice(1) } }; exports.isAbsolute = function (url) { return url.indexOf('//') == 0 || !!~url.indexOf('://') }; exports.isRelative = function (url) { return !exports.isAbsolute(url) }; exports.isCrossDomain = function (url) { url = exports.parse(url); const location = exports.parse(window.location.href); return url.hostname !== location.hostname || url.port !== location.port || url.protocol !== location.protocol }; function port (protocol) { switch (protocol) { case 'http:':return 80; case 'https:':return 443; default:return location.port } } }, {}],
  12: [function (require, module, exports) { const integration = require('analytics.js-integration'); const load = require('load-script'); const is = require('is'); module.exports = exports = function (analytics) { analytics.addIntegration(Appcues) }; var Appcues = exports.Integration = integration('Appcues').assumesPageview().global('Appcues').global('AppcuesIdentity').option('appcuesId', '').option('userId', '').option('userEmail', ''); Appcues.prototype.initialize = function () { this.load(function () { window.Appcues.init() }) }; Appcues.prototype.loaded = function () { return is.object(window.Appcues) }; Appcues.prototype.load = function (callback) { const script = load('//d2dubfq97s02eu.cloudfront.net/appcues-bundle.min.js', callback); script.setAttribute('data-appcues-id', this.options.appcuesId); script.setAttribute('data-user-id', this.options.userId); script.setAttribute('data-user-email', this.options.userEmail) }; Appcues.prototype.identify = function (identify) { window.Appcues.identify(identify.traits()) } }, { 'analytics.js-integration': 88, 'load-script': 143, is: 91 }],
  143: [function (require, module, exports) { const onload = require('script-onload'); const tick = require('next-tick'); const type = require('type'); module.exports = function loadScript (options, fn) { if (!options) throw new Error('Cant load nothing...'); if (type(options) == 'string')options = { src: options }; const https = document.location.protocol === 'https:' || document.location.protocol === 'chrome-extension:'; if (options.src && options.src.indexOf('//') === 0) { options.src = https ? 'https:' + options.src : 'http:' + options.src } if (https && options.https)options.src = options.https; else if (!https && options.http)options.src = options.http; const script = document.createElement('script'); script.type = 'text/javascript'; script.async = true; script.src = options.src; if (type(fn) == 'function') { onload(script, fn) }tick(function () { const firstScript = document.getElementsByTagName('script')[0]; firstScript.parentNode.insertBefore(script, firstScript) }); return script } }, { 'script-onload': 115, 'next-tick': 103, type: 7 }],
  13: [function (require, module, exports) { const integration = require('analytics.js-integration'); const is = require('is'); const Atatus = module.exports = integration('Atatus').global('atatus').option('apiKey', '').tag('<script src="//www.atatus.com/atatus.js">'); Atatus.prototype.initialize = function (page) { const self = this; this.load(function () { window.atatus.config(self.options.apiKey).install(); self.ready() }) }; Atatus.prototype.loaded = function () { return is.object(window.atatus) }; Atatus.prototype.identify = function (identify) { window.atatus.setCustomData({ person: identify.traits() }) } }, { 'analytics.js-integration': 88, is: 91 }],
  14: [function (require, module, exports) { const integration = require('analytics.js-integration'); const Autosend = module.exports = integration('Autosend').global('_autosend').option('appKey', '').tag('<script id="asnd-tracker" src="https://d2zjxodm1cz8d6.cloudfront.net/js/v1/autosend.js" data-auth-key="{{ appKey }}">'); Autosend.prototype.initialize = function (page) { window._autosend = window._autosend || []; (function () { let a, b, c; a = function (f) { return function () { window._autosend.push([f].concat(Array.prototype.slice.call(arguments, 0))) } }; b = ['identify', 'track', 'cb']; for (c = 0; c < b.length; c++) { window._autosend[b[c]] = a(b[c]) } })(); this.load(this.ready) }; Autosend.prototype.loaded = function () { return !!window._autosend }; Autosend.prototype.identify = function (identify) { const id = identify.userId(); if (!id) return; const traits = identify.traits(); traits.id = id; window._autosend.identify(traits) }; Autosend.prototype.track = function (track) { window._autosend.track(track.event()) } }, { 'analytics.js-integration': 88 }],
  15: [function (require, module, exports) { const integration = require('analytics.js-integration'); const each = require('each'); const Awesm = module.exports = integration('awe.sm').assumesPageview().global('AWESM').option('apiKey', '').tag('<script src="//widgets.awe.sm/v3/widgets.js?key={{ apiKey }}&async=true">').mapping('events'); Awesm.prototype.initialize = function (page) { window.AWESM = { api_key: this.options.apiKey }; this.load(this.ready) }; Awesm.prototype.loaded = function () { return !!(window.AWESM && window.AWESM._exists) }; Awesm.prototype.track = function (track) { const user = this.analytics.user(); const goals = this.events(track.event()); each(goals, function (goal) { window.AWESM.convert(goal, track.cents(), null, user.id()) }) } }, { 'analytics.js-integration': 88, each: 4 }],
  16: [function (require, module, exports) { const integration = require('analytics.js-integration'); const onbody = require('on-body'); const domify = require('domify'); const extend = require('extend'); const bind = require('bind'); const when = require('when'); const each = require('each'); const has = Object.prototype.hasOwnProperty; const noop = function () {}; const Bing = module.exports = integration('Bing Ads').global('uetq').option('tagId', '').tag('<script src="//bat.bing.com/bat.js">'); Bing.prototype.initialize = function () { window.uetq = window.uetq || []; const self = this; self.load(function () { const setup = { ti: self.options.tagId, q: window.uetq }; window.uetq = new UET(setup); self.ready() }) }; Bing.prototype.loaded = function () { return !!(window.uetq && window.uetq.push !== Array.prototype.push) }; Bing.prototype.page = function () { window.uetq.push('pageLoad') }; Bing.prototype.track = function (track) { const event = { ea: 'track', el: track.event() }; if (track.category())event.ec = track.category(); if (track.revenue())event.ev = track.revenue(); window.uetq.push(event) } }, { 'analytics.js-integration': 88, 'on-body': 144, domify: 119, extend: 145, bind: 101, when: 146, each: 4 }],
  144: [function (require, module, exports) { const each = require('each'); let body = false; const callbacks = []; module.exports = function onBody (callback) { if (body) { call(callback) } else { callbacks.push(callback) } }; var interval = setInterval(function () { if (!document.body) return; body = true; each(callbacks, call); clearInterval(interval) }, 5); function call (callback) { callback(document.body) } }, { each: 112 }],
  145: [function (require, module, exports) { module.exports = function extend (object) { const args = Array.prototype.slice.call(arguments, 1); for (var i = 0, source; source = args[i]; i++) { if (!source) continue; for (const property in source) { object[property] = source[property] } } return object } }, {}],
  146: [function (require, module, exports) { const callback = require('callback'); module.exports = when; function when (condition, fn, interval) { if (condition()) return callback.async(fn); var ref = setInterval(function () { if (!condition()) return; callback(fn); clearInterval(ref) }, interval || 10) } }, { callback: 94 }],
  17: [function (require, module, exports) { const integration = require('analytics.js-integration'); const Blueshift = module.exports = integration('Blueshift').global('blueshift').global('_blueshiftid').option('apiKey', '').option('retarget', false).tag('<script src="https://cdn.getblueshift.com/blueshift.js">'); Blueshift.prototype.initialize = function (page) { window.blueshift = window.blueshift || []; window.blueshift.load = function (a) { window._blueshiftid = a; const d = function (a) { return function () { blueshift.push([a].concat(Array.prototype.slice.call(arguments, 0))) } }; const e = ['identify', 'track', 'click', 'pageload', 'capture', 'retarget']; for (let f = 0; f < e.length; f++)blueshift[e[f]] = d(e[f]) }; window.blueshift.load(this.options.apiKey); this.load(this.ready) }; Blueshift.prototype.loaded = function () { return !!(window.blueshift && window._blueshiftid) }; Blueshift.prototype.page = function (page) { if (this.options.retarget)window.blueshift.retarget(); const properties = page.properties(); properties._bsft_source = 'segment.com'; window.blueshift.pageload(properties) }; Blueshift.prototype.identify = function (identify) { if (!identify.userId()) return this.debug('user id required'); const traits = identify.traits({ created: 'created_at' }); traits._bsft_source = 'segment.com'; window.blueshift.identify(traits) }; Blueshift.prototype.group = function (group) { const traits = group.traits({ created: 'created_at' }); traits._bsft_source = 'segment.com'; window.blueshift.track('group', traits) }; Blueshift.prototype.track = function (track) { const properties = track.properties(); properties._bsft_source = 'segment.com'; window.blueshift.track(track.event(), properties) } }, { 'analytics.js-integration': 88 }],
  18: [function (require, module, exports) { const integration = require('analytics.js-integration'); const Identify = require('facade').Identify; const Track = require('facade').Track; const pixel = require('load-pixel')('http://app.bronto.com/public/'); const qs = require('querystring'); const each = require('each'); const Bronto = module.exports = integration('Bronto').global('__bta').option('siteId', '').option('host', '').tag('<script src="//p.bm23.com/bta.js">'); Bronto.prototype.initialize = function (page) { const self = this; const params = qs.parse(window.location.search); if (!params._bta_tid && !params._bta_c) { this.debug('missing tracking URL parameters `_bta_tid` and `_bta_c`.') } this.load(function () { const opts = self.options; self.bta = new window.__bta(opts.siteId); if (opts.host)self.bta.setHost(opts.host); self.ready() }) }; Bronto.prototype.loaded = function () { return this.bta }; Bronto.prototype.completedOrder = function (track) { const user = this.analytics.user(); const products = track.products(); const props = track.properties(); const items = []; const identify = new Identify({ userId: user.id(), traits: user.traits() }); const email = identify.email(); each(products, function (product) { const track = new Track({ properties: product }); items.push({ item_id: track.id() || track.sku(), desc: product.description || track.name(), quantity: track.quantity(), amount: track.price() }) }); this.bta.addOrder({ order_id: track.orderId(), email, items }) } }, { 'analytics.js-integration': 88, facade: 147, 'load-pixel': 148, querystring: 140, each: 4 }],
  147: [function (require, module, exports) { const Facade = require('./facade'); module.exports = Facade; Facade.Alias = require('./alias'); Facade.Group = require('./group'); Facade.Identify = require('./identify'); Facade.Track = require('./track'); Facade.Page = require('./page'); Facade.Screen = require('./screen') }, { './facade': 149, './alias': 150, './group': 151, './identify': 152, './track': 153, './page': 154, './screen': 155 }],
  149: [function (require, module, exports) { const traverse = require('isodate-traverse'); const isEnabled = require('./is-enabled'); const clone = require('./utils').clone; const type = require('./utils').type; const address = require('./address'); const objCase = require('obj-case'); const newDate = require('new-date'); module.exports = Facade; function Facade (obj) { if (!obj.hasOwnProperty('timestamp'))obj.timestamp = new Date(); else obj.timestamp = newDate(obj.timestamp); traverse(obj); this.obj = obj }address(Facade.prototype); Facade.prototype.proxy = function (field) { const fields = field.split('.'); field = fields.shift(); let obj = this[field] || this.field(field); if (!obj) return obj; if (typeof obj === 'function')obj = obj.call(this) || {}; if (fields.length === 0) return transform(obj); obj = objCase(obj, fields.join('.')); return transform(obj) }; Facade.prototype.field = function (field) { const obj = this.obj[field]; return transform(obj) }; Facade.proxy = function (field) { return function () { return this.proxy(field) } }; Facade.field = function (field) { return function () { return this.field(field) } }; Facade.multi = function (path) { return function () { const multi = this.proxy(path + 's'); if (type(multi) == 'array') return multi; let one = this.proxy(path); if (one)one = [clone(one)]; return one || [] } }; Facade.one = function (path) { return function () { const one = this.proxy(path); if (one) return one; const multi = this.proxy(path + 's'); if (type(multi) == 'array') return multi[0] } }; Facade.prototype.json = function () { const ret = clone(this.obj); if (this.type)ret.type = this.type(); return ret }; Facade.prototype.context = Facade.prototype.options = function (integration) { const options = clone(this.obj.options || this.obj.context) || {}; if (!integration) return clone(options); if (!this.enabled(integration)) return; const integrations = this.integrations(); let value = integrations[integration] || objCase(integrations, integration); if (typeof value === 'boolean')value = {}; return value || {} }; Facade.prototype.enabled = function (integration) { let allEnabled = this.proxy('options.providers.all'); if (typeof allEnabled !== 'boolean')allEnabled = this.proxy('options.all'); if (typeof allEnabled !== 'boolean')allEnabled = this.proxy('integrations.all'); if (typeof allEnabled !== 'boolean')allEnabled = true; let enabled = allEnabled && isEnabled(integration); const options = this.integrations(); if (options.providers && options.providers.hasOwnProperty(integration)) { enabled = options.providers[integration] } if (options.hasOwnProperty(integration)) { const settings = options[integration]; if (typeof settings === 'boolean') { enabled = settings } else { enabled = true } } return !!enabled }; Facade.prototype.integrations = function () { return this.obj.integrations || this.proxy('options.providers') || this.options() }; Facade.prototype.active = function () { let active = this.proxy('options.active'); if (active === null || active === undefined)active = true; return active }; Facade.prototype.sessionId = Facade.prototype.anonymousId = function () { return this.field('anonymousId') || this.field('sessionId') }; Facade.prototype.groupId = Facade.proxy('options.groupId'); Facade.prototype.traits = function (aliases) { const ret = this.proxy('options.traits') || {}; const id = this.userId(); aliases = aliases || {}; if (id)ret.id = id; for (const alias in aliases) { const value = this[alias] == null ? this.proxy('options.traits.' + alias) : this[alias](); if (value == null) continue; ret[aliases[alias]] = value; delete ret[alias] } return ret }; Facade.prototype.library = function () { const library = this.proxy('options.library'); if (!library) return { name: 'unknown', version: null }; if (typeof library === 'string') return { name: library, version: null }; return library }; Facade.prototype.userId = Facade.field('userId'); Facade.prototype.channel = Facade.field('channel'); Facade.prototype.timestamp = Facade.field('timestamp'); Facade.prototype.userAgent = Facade.proxy('options.userAgent'); Facade.prototype.ip = Facade.proxy('options.ip'); function transform (obj) { const cloned = clone(obj); return cloned } }, { 'isodate-traverse': 156, './is-enabled': 157, './utils': 158, './address': 159, 'obj-case': 160, 'new-date': 161 }],
  156: [function (require, module, exports) { const is = require('is'); const isodate = require('isodate'); let each; try { each = require('each') } catch (err) { each = require('each-component') }module.exports = traverse; function traverse (input, strict) { if (strict === undefined)strict = true; if (is.object(input)) return object(input, strict); if (is.array(input)) return array(input, strict); return input } function object (obj, strict) { each(obj, function (key, val) { if (isodate.is(val, strict)) { obj[key] = isodate.parse(val) } else if (is.object(val) || is.array(val)) { traverse(val, strict) } }); return obj } function array (arr, strict) { each(arr, function (val, x) { if (is.object(val)) { traverse(val, strict) } else if (isodate.is(val, strict)) { arr[x] = isodate.parse(val) } }); return arr } }, { is: 162, isodate: 163, each: 4 }],
  162: [function (require, module, exports) { const isEmpty = require('is-empty'); try { var typeOf = require('type') } catch (e) { var typeOf = require('component-type') } const types = ['arguments', 'array', 'boolean', 'date', 'element', 'function', 'null', 'number', 'object', 'regexp', 'string', 'undefined']; for (var i = 0, type; type = types[i]; i++)exports[type] = generate(type); exports.fn = exports.function; exports.empty = isEmpty; exports.nan = function (val) { return exports.number(val) && val != val }; function generate (type) { return function (value) { return type === typeOf(value) } } }, { 'is-empty': 122, type: 7, 'component-type': 7 }],
  163: [function (require, module, exports) { const matcher = /^(\d{4})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:([ T])(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/; exports.parse = function (iso) { const numericKeys = [1, 5, 6, 7, 11, 12]; const arr = matcher.exec(iso); let offset = 0; if (!arr) return new Date(iso); for (var i = 0, val; val = numericKeys[i]; i++) { arr[val] = parseInt(arr[val], 10) || 0 }arr[2] = parseInt(arr[2], 10) || 1; arr[3] = parseInt(arr[3], 10) || 1; arr[2]--; arr[8] = arr[8] ? (arr[8] + '00').substring(0, 3) : 0; if (arr[4] == ' ') { offset = (new Date()).getTimezoneOffset() } else if (arr[9] !== 'Z' && arr[10]) { offset = arr[11] * 60 + arr[12]; if (arr[10] == '+')offset = 0 - offset } const millis = Date.UTC(arr[1], arr[2], arr[3], arr[5], arr[6] + offset, arr[7], arr[8]); return new Date(millis) }; exports.is = function (string, strict) { if (strict && /^\d{4}-\d{2}-\d{2}/.test(string) === false) return false; return matcher.test(string) } }, {}],
  157: [function (require, module, exports) { const disabled = { Salesforce: true }; module.exports = function (integration) { return !disabled[integration] } }, {}],
  158: [function (require, module, exports) { try { exports.inherit = require('inherit'); exports.clone = require('clone'); exports.type = require('type') } catch (e) { exports.inherit = require('inherit-component'); exports.clone = require('clone-component'); exports.type = require('type-component') } }, { inherit: 164, clone: 165, type: 7 }],
  164: [function (require, module, exports) {
    module.exports = function (a, b) {
      const fn = function () {}
      fn.prototype = b.prototype; a.prototype = new fn(); a.prototype.constructor = a
    }
  }, {}],
  165: [function (require, module, exports) { let type; try { type = require('component-type') } catch (_) { type = require('type') }module.exports = clone; function clone (obj) { switch (type(obj)) { case 'object':var copy = {}; for (const key in obj) { if (obj.hasOwnProperty(key)) { copy[key] = clone(obj[key]) } } return copy; case 'array':var copy = new Array(obj.length); for (let i = 0, l = obj.length; i < l; i++) { copy[i] = clone(obj[i]) } return copy; case 'regexp':var flags = ''; flags += obj.multiline ? 'm' : ''; flags += obj.global ? 'g' : ''; flags += obj.ignoreCase ? 'i' : ''; return new RegExp(obj.source, flags); case 'date':return new Date(obj.getTime()); default:return obj } } }, { 'component-type': 7, type: 7 }],
  159: [function (require, module, exports) { const get = require('obj-case'); module.exports = function (proto) { proto.zip = trait('postalCode', 'zip'); proto.country = trait('country'); proto.street = trait('street'); proto.state = trait('state'); proto.city = trait('city'); function trait (a, b) { return function () { const traits = this.traits(); const props = this.properties ? this.properties() : {}; return get(traits, 'address.' + a) || get(traits, a) || (b ? get(traits, 'address.' + b) : null) || (b ? get(traits, b) : null) || get(props, 'address.' + a) || get(props, a) || (b ? get(props, 'address.' + b) : null) || (b ? get(props, b) : null) } } } }, { 'obj-case': 160 }],
  160: [function (require, module, exports) { const identity = function (_) { return _ }; module.exports = multiple(find); module.exports.find = module.exports; module.exports.replace = function (obj, key, val, options) { multiple(replace).call(this, obj, key, val, options); return obj }; module.exports.del = function (obj, key, options) { multiple(del).call(this, obj, key, null, options); return obj }; function multiple (fn) { return function (obj, path, val, options) { const normalize = options && isFunction(options.normalizer) ? options.normalizer : defaultNormalize; path = normalize(path); let key; let finished = false; while (!finished)loop(); function loop () { for (key in obj) { const normalizedKey = normalize(key); if (path.indexOf(normalizedKey) === 0) { const temp = path.substr(normalizedKey.length); if (temp.charAt(0) === '.' || temp.length === 0) { path = temp.substr(1); const child = obj[key]; if (child == null) { finished = true; return } if (!path.length) { finished = true; return }obj = child; return } } }key = undefined; finished = true } if (!key) return; if (obj == null) return obj; return fn(obj, key, val) } } function find (obj, key) { if (obj.hasOwnProperty(key)) return obj[key] } function del (obj, key) { if (obj.hasOwnProperty(key)) delete obj[key]; return obj } function replace (obj, key, val) { if (obj.hasOwnProperty(key))obj[key] = val; return obj } function defaultNormalize (path) { return path.replace(/[^a-zA-Z0-9\.]+/g, '').toLowerCase() } function isFunction (val) { return typeof val === 'function' } }, {}],
  161: [function (require, module, exports) { const is = require('is'); const isodate = require('isodate'); const milliseconds = require('./milliseconds'); const seconds = require('./seconds'); module.exports = function newDate (val) { if (is.date(val)) return val; if (is.number(val)) return new Date(toMs(val)); if (isodate.is(val)) return isodate.parse(val); if (milliseconds.is(val)) return milliseconds.parse(val); if (seconds.is(val)) return seconds.parse(val); return new Date(val) }; function toMs (num) { if (num < 315576e5) return num * 1e3; return num } }, { is: 166, isodate: 163, './milliseconds': 167, './seconds': 168 }],
  166: [function (require, module, exports) { const isEmpty = require('is-empty'); const typeOf = require('type'); const types = ['arguments', 'array', 'boolean', 'date', 'element', 'function', 'null', 'number', 'object', 'regexp', 'string', 'undefined']; for (var i = 0, type; type = types[i]; i++)exports[type] = generate(type); exports.fn = exports.function; exports.empty = isEmpty; exports.nan = function (val) { return exports.number(val) && val != val }; function generate (type) { return function (value) { return type === typeOf(value) } } }, { 'is-empty': 122, type: 7 }],
  167: [function (require, module, exports) { const matcher = /\d{13}/; exports.is = function (string) { return matcher.test(string) }; exports.parse = function (millis) { millis = parseInt(millis, 10); return new Date(millis) } }, {}],
  168: [function (require, module, exports) { const matcher = /\d{10}/; exports.is = function (string) { return matcher.test(string) }; exports.parse = function (seconds) { const millis = parseInt(seconds, 10) * 1e3; return new Date(millis) } }, {}],
  150: [function (require, module, exports) { const inherit = require('./utils').inherit; const Facade = require('./facade'); module.exports = Alias; function Alias (dictionary) { Facade.call(this, dictionary) }inherit(Alias, Facade); Alias.prototype.type = Alias.prototype.action = function () { return 'alias' }; Alias.prototype.from = Alias.prototype.previousId = function () { return this.field('previousId') || this.field('from') }; Alias.prototype.to = Alias.prototype.userId = function () { return this.field('userId') || this.field('to') } }, { './utils': 158, './facade': 149 }],
  151: [function (require, module, exports) { const inherit = require('./utils').inherit; const address = require('./address'); const isEmail = require('is-email'); const newDate = require('new-date'); const Facade = require('./facade'); module.exports = Group; function Group (dictionary) { Facade.call(this, dictionary) }inherit(Group, Facade); Group.prototype.type = Group.prototype.action = function () { return 'group' }; Group.prototype.groupId = Facade.field('groupId'); Group.prototype.created = function () { const created = this.proxy('traits.createdAt') || this.proxy('traits.created') || this.proxy('properties.createdAt') || this.proxy('properties.created'); if (created) return newDate(created) }; Group.prototype.email = function () { const email = this.proxy('traits.email'); if (email) return email; const groupId = this.groupId(); if (isEmail(groupId)) return groupId }; Group.prototype.traits = function (aliases) { const ret = this.properties(); const id = this.groupId(); aliases = aliases || {}; if (id)ret.id = id; for (const alias in aliases) { const value = this[alias] == null ? this.proxy('traits.' + alias) : this[alias](); if (value == null) continue; ret[aliases[alias]] = value; delete ret[alias] } return ret }; Group.prototype.name = Facade.proxy('traits.name'); Group.prototype.industry = Facade.proxy('traits.industry'); Group.prototype.employees = Facade.proxy('traits.employees'); Group.prototype.properties = function () { return this.field('traits') || this.field('properties') || {} } }, { './utils': 158, './address': 159, 'is-email': 169, 'new-date': 161, './facade': 149 }],
  169: [function (require, module, exports) { module.exports = isEmail; const matcher = /.+\@.+\..+/; function isEmail (string) { return matcher.test(string) } }, {}],
  152: [function (require, module, exports) { const address = require('./address'); const Facade = require('./facade'); const isEmail = require('is-email'); const newDate = require('new-date'); const utils = require('./utils'); const get = require('obj-case'); const trim = require('trim'); const inherit = utils.inherit; const clone = utils.clone; const type = utils.type; module.exports = Identify; function Identify (dictionary) { Facade.call(this, dictionary) }inherit(Identify, Facade); Identify.prototype.type = Identify.prototype.action = function () { return 'identify' }; Identify.prototype.traits = function (aliases) { const ret = this.field('traits') || {}; const id = this.userId(); aliases = aliases || {}; if (id)ret.id = id; for (const alias in aliases) { const value = this[alias] == null ? this.proxy('traits.' + alias) : this[alias](); if (value == null) continue; ret[aliases[alias]] = value; if (alias !== aliases[alias]) delete ret[alias] } return ret }; Identify.prototype.email = function () { const email = this.proxy('traits.email'); if (email) return email; const userId = this.userId(); if (isEmail(userId)) return userId }; Identify.prototype.created = function () { const created = this.proxy('traits.created') || this.proxy('traits.createdAt'); if (created) return newDate(created) }; Identify.prototype.companyCreated = function () { const created = this.proxy('traits.company.created') || this.proxy('traits.company.createdAt'); if (created) return newDate(created) }; Identify.prototype.name = function () { const name = this.proxy('traits.name'); if (typeof name === 'string') return trim(name); const firstName = this.firstName(); const lastName = this.lastName(); if (firstName && lastName) return trim(firstName + ' ' + lastName) }; Identify.prototype.firstName = function () { const firstName = this.proxy('traits.firstName'); if (typeof firstName === 'string') return trim(firstName); const name = this.proxy('traits.name'); if (typeof name === 'string') return trim(name).split(' ')[0] }; Identify.prototype.lastName = function () { const lastName = this.proxy('traits.lastName'); if (typeof lastName === 'string') return trim(lastName); const name = this.proxy('traits.name'); if (typeof name !== 'string') return; const space = trim(name).indexOf(' '); if (space === -1) return; return trim(name.substr(space + 1)) }; Identify.prototype.uid = function () { return this.userId() || this.username() || this.email() }; Identify.prototype.description = function () { return this.proxy('traits.description') || this.proxy('traits.background') }; Identify.prototype.age = function () { const date = this.birthday(); const age = get(this.traits(), 'age'); if (age != null) return age; if (type(date) != 'date') return; const now = new Date(); return now.getFullYear() - date.getFullYear() }; Identify.prototype.avatar = function () { const traits = this.traits(); return get(traits, 'avatar') || get(traits, 'photoUrl') || get(traits, 'avatarUrl') }; Identify.prototype.position = function () { const traits = this.traits(); return get(traits, 'position') || get(traits, 'jobTitle') }; Identify.prototype.username = Facade.proxy('traits.username'); Identify.prototype.website = Facade.one('traits.website'); Identify.prototype.websites = Facade.multi('traits.website'); Identify.prototype.phone = Facade.one('traits.phone'); Identify.prototype.phones = Facade.multi('traits.phone'); Identify.prototype.address = Facade.proxy('traits.address'); Identify.prototype.gender = Facade.proxy('traits.gender'); Identify.prototype.birthday = Facade.proxy('traits.birthday') }, { './address': 159, './facade': 149, 'is-email': 169, 'new-date': 161, './utils': 158, 'obj-case': 160, trim: 141 }],
  153: [function (require, module, exports) { const inherit = require('./utils').inherit; const clone = require('./utils').clone; const type = require('./utils').type; const Facade = require('./facade'); const Identify = require('./identify'); const isEmail = require('is-email'); const get = require('obj-case'); module.exports = Track; function Track (dictionary) { Facade.call(this, dictionary) }inherit(Track, Facade); Track.prototype.type = Track.prototype.action = function () { return 'track' }; Track.prototype.event = Facade.field('event'); Track.prototype.value = Facade.proxy('properties.value'); Track.prototype.category = Facade.proxy('properties.category'); Track.prototype.id = Facade.proxy('properties.id'); Track.prototype.sku = Facade.proxy('properties.sku'); Track.prototype.tax = Facade.proxy('properties.tax'); Track.prototype.name = Facade.proxy('properties.name'); Track.prototype.price = Facade.proxy('properties.price'); Track.prototype.total = Facade.proxy('properties.total'); Track.prototype.coupon = Facade.proxy('properties.coupon'); Track.prototype.shipping = Facade.proxy('properties.shipping'); Track.prototype.discount = Facade.proxy('properties.discount'); Track.prototype.description = Facade.proxy('properties.description'); Track.prototype.plan = Facade.proxy('properties.plan'); Track.prototype.orderId = function () { return this.proxy('properties.id') || this.proxy('properties.orderId') }; Track.prototype.subtotal = function () { const subtotal = get(this.properties(), 'subtotal'); let total = this.total(); let n; if (subtotal) return subtotal; if (!total) return 0; if (n = this.tax())total -= n; if (n = this.shipping())total -= n; if (n = this.discount())total += n; return total }; Track.prototype.products = function () { const props = this.properties(); const products = get(props, 'products'); return type(products) == 'array' ? products : [] }; Track.prototype.quantity = function () { const props = this.obj.properties || {}; return props.quantity || 1 }; Track.prototype.currency = function () { const props = this.obj.properties || {}; return props.currency || 'USD' }; Track.prototype.referrer = Facade.proxy('properties.referrer'); Track.prototype.query = Facade.proxy('options.query'); Track.prototype.properties = function (aliases) { const ret = this.field('properties') || {}; aliases = aliases || {}; for (const alias in aliases) { const value = this[alias] == null ? this.proxy('properties.' + alias) : this[alias](); if (value == null) continue; ret[aliases[alias]] = value; delete ret[alias] } return ret }; Track.prototype.username = function () { return this.proxy('traits.username') || this.proxy('properties.username') || this.userId() || this.sessionId() }; Track.prototype.email = function () { let email = this.proxy('traits.email'); email = email || this.proxy('properties.email'); if (email) return email; const userId = this.userId(); if (isEmail(userId)) return userId }; Track.prototype.revenue = function () { let revenue = this.proxy('properties.revenue'); const event = this.event(); if (!revenue && event && event.match(/completed ?order/i)) { revenue = this.proxy('properties.total') } return currency(revenue) }; Track.prototype.cents = function () { const revenue = this.revenue(); return typeof revenue !== 'number' ? this.value() || 0 : revenue * 100 }; Track.prototype.identify = function () { const json = this.json(); json.traits = this.traits(); return new Identify(json) }; function currency (val) { if (!val) return; if (typeof val === 'number') return val; if (typeof val !== 'string') return; val = val.replace(/\$/g, ''); val = parseFloat(val); if (!isNaN(val)) return val } }, { './utils': 158, './facade': 149, './identify': 152, 'is-email': 169, 'obj-case': 160 }],
  154: [function (require, module, exports) { const inherit = require('./utils').inherit; const Facade = require('./facade'); const Track = require('./track'); module.exports = Page; function Page (dictionary) { Facade.call(this, dictionary) }inherit(Page, Facade); Page.prototype.type = Page.prototype.action = function () { return 'page' }; Page.prototype.category = Facade.field('category'); Page.prototype.name = Facade.field('name'); Page.prototype.title = Facade.proxy('properties.title'); Page.prototype.path = Facade.proxy('properties.path'); Page.prototype.url = Facade.proxy('properties.url'); Page.prototype.referrer = function () { return this.proxy('properties.referrer') || this.proxy('context.referrer.url') }; Page.prototype.properties = function () { const props = this.field('properties') || {}; const category = this.category(); const name = this.name(); if (category)props.category = category; if (name)props.name = name; return props }; Page.prototype.fullName = function () { const category = this.category(); const name = this.name(); return name && category ? category + ' ' + name : name }; Page.prototype.event = function (name) { return name ? 'Viewed ' + name + ' Page' : 'Loaded a Page' }; Page.prototype.track = function (name) { const props = this.properties(); return new Track({ event: this.event(name), timestamp: this.timestamp(), context: this.context(), properties: props }) } }, { './utils': 158, './facade': 149, './track': 153 }],
  155: [function (require, module, exports) { const inherit = require('./utils').inherit; const Page = require('./page'); const Track = require('./track'); module.exports = Screen; function Screen (dictionary) { Page.call(this, dictionary) }inherit(Screen, Page); Screen.prototype.type = Screen.prototype.action = function () { return 'screen' }; Screen.prototype.event = function (name) { return name ? 'Viewed ' + name + ' Screen' : 'Loaded a Screen' }; Screen.prototype.track = function (name) { const props = this.properties(); return new Track({ event: this.event(name), timestamp: this.timestamp(), context: this.context(), properties: props }) } }, { './utils': 158, './page': 154, './track': 153 }],
  148: [function (require, module, exports) { const stringify = require('querystring').stringify; const sub = require('substitute'); module.exports = function (path) { return function (query, obj, fn) { if (typeof obj === 'function')fn = obj, obj = {}; obj = obj || {}; fn = fn || function () {}; const url = sub(path, obj); const img = new Image(); img.onerror = error(fn, 'failed to load pixel', img); img.onload = function () { fn() }; query = stringify(query); if (query)query = '?' + query; img.src = url + query; img.width = 1; img.height = 1; return img } }; function error (fn, message, img) { return function (e) { e = e || window.event; const err = new Error(message); err.event = e; err.source = img; fn(err) } } }, { querystring: 140, substitute: 170 }],
  170: [function (require, module, exports) { module.exports = substitute; const type = Object.prototype.toString; function substitute (str, obj, expr) { if (!obj) throw new TypeError('expected an object'); expr = expr || /:(\w+)/g; return str.replace(expr, function (_, prop) { switch (type.call(obj)) { case '[object Object]':return obj[prop] != null ? obj[prop] : _; case '[object Array]':var val = obj.shift(); return val != null ? val : _ } }) } }, {}],
  19: [function (require, module, exports) { const integration = require('analytics.js-integration'); const tick = require('next-tick'); const BugHerd = module.exports = integration('BugHerd').assumesPageview().global('BugHerdConfig').global('_bugHerd').option('apiKey', '').option('showFeedbackTab', true).tag('<script src="//www.bugherd.com/sidebarv2.js?apikey={{ apiKey }}">'); BugHerd.prototype.initialize = function (page) { window.BugHerdConfig = { feedback: { hide: !this.options.showFeedbackTab } }; const ready = this.ready; this.load(function () { tick(ready) }) }; BugHerd.prototype.loaded = function () { return !!window._bugHerd } }, { 'analytics.js-integration': 88, 'next-tick': 103 }],
  20: [function (require, module, exports) { const integration = require('analytics.js-integration'); const is = require('is'); const extend = require('extend'); const onError = require('on-error'); const umd = typeof define === 'function' && define.amd; const src = '//d2wy8f7a9ursnm.cloudfront.net/bugsnag-2.min.js'; const Bugsnag = module.exports = integration('Bugsnag').global('Bugsnag').option('apiKey', '').tag('<script src="' + src + '">'); Bugsnag.prototype.initialize = function (page) { const self = this; if (umd) { window.require([src], function (bugsnag) { bugsnag.apiKey = self.options.apiKey; window.Bugsnag = bugsnag; self.ready() }); return } this.load(function () { window.Bugsnag.apiKey = self.options.apiKey; self.ready() }) }; Bugsnag.prototype.loaded = function () { return is.object(window.Bugsnag) }; Bugsnag.prototype.identify = function (identify) { window.Bugsnag.metaData = window.Bugsnag.metaData || {}; extend(window.Bugsnag.metaData, identify.traits()) } }, { 'analytics.js-integration': 88, is: 91, extend: 145, 'on-error': 171 }],
  171: [function (require, module, exports) { module.exports = onError; const callbacks = []; if (typeof window.onerror === 'function')callbacks.push(window.onerror); window.onerror = handler; function handler () { for (var i = 0, fn; fn = callbacks[i]; i++)fn.apply(this, arguments) } function onError (fn) { callbacks.push(fn); if (window.onerror != handler) { callbacks.push(window.onerror); window.onerror = handler } } }, {}],
  21: [function (require, module, exports) { const integration = require('analytics.js-integration'); const defaults = require('defaults'); const onBody = require('on-body'); const Chartbeat = module.exports = integration('Chartbeat').assumesPageview().global('_sf_async_config').global('_sf_endpt').global('pSUPERFLY').option('domain', '').option('uid', null).tag('<script src="//static.chartbeat.com/js/chartbeat.js">'); Chartbeat.prototype.initialize = function (page) { const self = this; window._sf_async_config = window._sf_async_config || {}; window._sf_async_config.useCanonical = true; defaults(window._sf_async_config, this.options); onBody(function () { window._sf_endpt = (new Date()).getTime(); self.load(self.ready) }) }; Chartbeat.prototype.loaded = function () { return !!window.pSUPERFLY }; Chartbeat.prototype.page = function (page) { const category = page.category(); if (category)window._sf_async_config.sections = category; const author = page.proxy('properties.author'); if (author)window._sf_async_config.authors = author; const props = page.properties(); const name = page.fullName(); window.pSUPERFLY.virtualPage(props.path, name || props.title) } }, { 'analytics.js-integration': 88, defaults: 172, 'on-body': 144 }],
  172: [function (require, module, exports) { module.exports = defaults; function defaults (dest, defaults) { for (const prop in defaults) { if (!(prop in dest)) { dest[prop] = defaults[prop] } } return dest } }, {}],
  22: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_cbq'); const each = require('each'); const has = Object.prototype.hasOwnProperty; const supported = { activation: true, changePlan: true, register: true, refund: true, charge: true, cancel: true, login: true }; const ChurnBee = module.exports = integration('ChurnBee').global('_cbq').global('ChurnBee').option('apiKey', '').tag('<script src="//api.churnbee.com/cb.js">').mapping('events'); ChurnBee.prototype.initialize = function (page) { push('_setApiKey', this.options.apiKey); this.load(this.ready) }; ChurnBee.prototype.loaded = function () { return !!window.ChurnBee }; ChurnBee.prototype.track = function (track) { const event = track.event(); const events = this.events(event); events.push(event); each(events, function (event) { if (supported[event] != true) return; push(event, track.properties({ revenue: 'amount' })) }) } }, { 'analytics.js-integration': 88, 'global-queue': 173, each: 4 }],
  173: [function (require, module, exports) { module.exports = generate; function generate (name, options) { options = options || {}; return function (args) { args = [].slice.call(arguments); window[name] || (window[name] = []); options.wrap === false ? window[name].push.apply(window[name], args) : window[name].push(args) } } }, {}],
  23: [function (require, module, exports) { const date = require('load-date'); const domify = require('domify'); const each = require('each'); const integration = require('analytics.js-integration'); const is = require('is'); const useHttps = require('use-https'); const onBody = require('on-body'); const ClickTale = module.exports = integration('ClickTale').assumesPageview().global('WRInitTime').global('ClickTale').global('ClickTaleSetUID').global('ClickTaleField').global('ClickTaleEvent').option('httpCdnUrl', 'http://s.clicktale.net/WRe0.js').option('httpsCdnUrl', '').option('projectId', '').option('recordingRatio', 0.01).option('partitionId', '').tag('<script src="{{src}}">'); ClickTale.prototype.initialize = function (page) { const self = this; window.WRInitTime = date.getTime(); onBody(function (body) { body.appendChild(domify('<div id="ClickTaleDiv" style="display: none;">')) }); const http = this.options.httpCdnUrl; const https = this.options.httpsCdnUrl; if (useHttps() && !https) return this.debug('https option required'); const src = useHttps() ? https : http; this.load({ src }, function () { window.ClickTale(self.options.projectId, self.options.recordingRatio, self.options.partitionId); self.ready() }) }; ClickTale.prototype.loaded = function () { return is.fn(window.ClickTale) }; ClickTale.prototype.identify = function (identify) { const id = identify.userId(); window.ClickTaleSetUID(id); each(identify.traits(), function (key, value) { window.ClickTaleField(key, value) }) }; ClickTale.prototype.track = function (track) { window.ClickTaleEvent(track.event()) } }, { 'load-date': 174, domify: 119, each: 4, 'analytics.js-integration': 88, is: 91, 'use-https': 90, 'on-body': 144 }],
  174: [function (require, module, exports) { let time = new Date(); const perf = window.performance; if (perf && perf.timing && perf.timing.responseEnd) { time = new Date(perf.timing.responseEnd) }module.exports = time }, {}],
  24: [function (require, module, exports) { const Identify = require('facade').Identify; const extend = require('extend'); const integration = require('analytics.js-integration'); const is = require('is'); const Clicky = module.exports = integration('Clicky').assumesPageview().global('clicky').global('clicky_site_ids').global('clicky_custom').option('siteId', null).tag('<script src="//static.getclicky.com/js"></script>'); Clicky.prototype.initialize = function (page) { const user = this.analytics.user(); window.clicky_site_ids = window.clicky_site_ids || [this.options.siteId]; this.identify(new Identify({ userId: user.id(), traits: user.traits() })); this.load(this.ready) }; Clicky.prototype.loaded = function () { return is.object(window.clicky) }; Clicky.prototype.page = function (page) { const properties = page.properties(); const category = page.category(); const name = page.fullName(); window.clicky.log(properties.path, name || properties.title) }; Clicky.prototype.identify = function (identify) { window.clicky_custom = window.clicky_custom || {}; window.clicky_custom.session = window.clicky_custom.session || {}; const traits = identify.traits(); const username = identify.username(); const email = identify.email(); const name = identify.name(); if (username || email || name)traits.username = username || email || name; extend(window.clicky_custom.session, traits) }; Clicky.prototype.track = function (track) { window.clicky.goal(track.event(), track.revenue()) } }, { facade: 147, extend: 145, 'analytics.js-integration': 88, is: 91 }],
  25: [function (require, module, exports) { const integration = require('analytics.js-integration'); const useHttps = require('use-https'); const Comscore = module.exports = integration('comScore').assumesPageview().global('_comscore').global('COMSCORE').option('c1', '2').option('c2', '').tag('http', '<script src="http://b.scorecardresearch.com/beacon.js">').tag('https', '<script src="https://sb.scorecardresearch.com/beacon.js">'); Comscore.prototype.initialize = function (page) { window._comscore = window._comscore || [this.options]; const name = useHttps() ? 'https' : 'http'; this.load(name, this.ready) }; Comscore.prototype.loaded = function () { return !!window.COMSCORE }; Comscore.prototype.page = function (page) { window.COMSCORE.beacon(this.options) } }, { 'analytics.js-integration': 88, 'use-https': 90 }],
  26: [function (require, module, exports) { const integration = require('analytics.js-integration'); const CrazyEgg = module.exports = integration('Crazy Egg').assumesPageview().global('CE2').option('accountNumber', '').tag('<script src="//dnn506yrbagrg.cloudfront.net/pages/scripts/{{ path }}.js?{{ cache }}">'); CrazyEgg.prototype.initialize = function (page) { const number = this.options.accountNumber; const path = number.slice(0, 4) + '/' + number.slice(4); const cache = Math.floor((new Date()).getTime() / 36e5); this.load({ path, cache }, this.ready) }; CrazyEgg.prototype.loaded = function () { return !!window.CE2 } }, { 'analytics.js-integration': 88 }],
  27: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_curebitq'); const Identify = require('facade').Identify; const throttle = require('throttle'); const Track = require('facade').Track; const iso = require('to-iso-string'); const clone = require('clone'); const each = require('each'); const bind = require('bind'); const Curebit = module.exports = integration('Curebit').global('_curebitq').global('curebit').option('siteId', '').option('iframeWidth', '100%').option('iframeHeight', '480').option('iframeBorder', 0).option('iframeId', 'curebit_integration').option('responsive', true).option('device', '').option('insertIntoId', '').option('campaigns', {}).option('server', 'https://www.curebit.com').tag('<script src="//d2jjzw81hqbuqv.cloudfront.net/integration/curebit-1.0.min.js">'); Curebit.prototype.initialize = function (page) { push('init', { site_id: this.options.siteId, server: this.options.server }); this.load(this.ready); this.page = throttle(bind(this, this.page), 250) }; Curebit.prototype.loaded = function () { return !!window.curebit }; Curebit.prototype.injectIntoId = function (url, id, fn) { const server = this.options.server; when(function () { return document.getElementById(id) }, function () { const script = document.createElement('script'); script.src = url; const parent = document.getElementById(id); parent.appendChild(script); onload(script, fn) }) }; Curebit.prototype.page = function (page) { const user = this.analytics.user(); const campaigns = this.options.campaigns; const path = window.location.pathname; if (!campaigns[path]) return; const tags = (campaigns[path] || '').split(','); if (!tags.length) return; const settings = { responsive: this.options.responsive, device: this.options.device, campaign_tags: tags, iframe: { width: this.options.iframeWidth, height: this.options.iframeHeight, id: this.options.iframeId, frameborder: this.options.iframeBorder, container: this.options.insertIntoId } }; const identify = new Identify({ userId: user.id(), traits: user.traits() }); if (identify.email()) { settings.affiliate_member = { email: identify.email(), first_name: identify.firstName(), last_name: identify.lastName(), customer_id: identify.userId() } }push('register_affiliate', settings) }; Curebit.prototype.completedOrder = function (track) { const user = this.analytics.user(); const orderId = track.orderId(); const products = track.products(); const props = track.properties(); const items = []; const identify = new Identify({ traits: user.traits(), userId: user.id() }); each(products, function (product) { const track = new Track({ properties: product }); items.push({ product_id: track.id() || track.sku(), quantity: track.quantity(), image_url: product.image, price: track.price(), title: track.name(), url: product.url }) }); push('register_purchase', { order_date: iso(props.date || new Date()), order_number: orderId, coupon_code: track.coupon(), subtotal: track.total(), customer_id: identify.userId(), first_name: identify.firstName(), last_name: identify.lastName(), email: identify.email(), items }) } }, { 'analytics.js-integration': 88, 'global-queue': 173, facade: 147, throttle: 175, 'to-iso-string': 176, clone: 95, each: 4, bind: 101 }],
  175: [function (require, module, exports) { module.exports = throttle; function throttle (func, wait) { let rtn; let last = 0; return function throttled () { const now = (new Date()).getTime(); const delta = now - last; if (delta >= wait) { rtn = func.apply(this, arguments); last = now } return rtn } } }, {}],
  176: [function (require, module, exports) { module.exports = toIsoString; function toIsoString (date) { return date.getUTCFullYear() + '-' + pad(date.getUTCMonth() + 1) + '-' + pad(date.getUTCDate()) + 'T' + pad(date.getUTCHours()) + ':' + pad(date.getUTCMinutes()) + ':' + pad(date.getUTCSeconds()) + '.' + String((date.getUTCMilliseconds() / 1e3).toFixed(3)).slice(2, 5) + 'Z' } function pad (number) { const n = number.toString(); return n.length === 1 ? '0' + n : n } }, {}],
  28: [function (require, module, exports) { const alias = require('alias'); const convertDates = require('convert-dates'); const Identify = require('facade').Identify; const integration = require('analytics.js-integration'); const Customerio = module.exports = integration('Customer.io').global('_cio').option('siteId', '').tag('<script id="cio-tracker" src="https://assets.customer.io/assets/track.js" data-site-id="{{ siteId }}">'); Customerio.prototype.initialize = function (page) { window._cio = window._cio || []; (function () { let a, b, c; a = function (f) { return function () { window._cio.push([f].concat(Array.prototype.slice.call(arguments, 0))) } }; b = ['identify', 'track']; for (c = 0; c < b.length; c++) { window._cio[b[c]] = a(b[c]) } })(); this.load(this.ready) }; Customerio.prototype.loaded = function () { return !!window._cio && window._cio.push !== Array.prototype.push }; Customerio.prototype.identify = function (identify) { if (!identify.userId()) return this.debug('user id required'); let traits = identify.traits({ createdAt: 'created' }); traits = alias(traits, { created: 'created_at' }); traits = convertDates(traits, convertDate); window._cio.identify(traits) }; Customerio.prototype.group = function (group) { let traits = group.traits(); const user = this.analytics.user(); traits = alias(traits, function (trait) { return 'Group ' + trait }); this.identify(new Identify({ userId: user.id(), traits })) }; Customerio.prototype.track = function (track) { let properties = track.properties(); properties = convertDates(properties, convertDate); window._cio.track(track.event(), properties) }; function convertDate (date) { return Math.floor(date.getTime() / 1e3) } }, { alias: 177, 'convert-dates': 178, facade: 147, 'analytics.js-integration': 88 }],
  177: [function (require, module, exports) { const type = require('type'); try { var clone = require('clone') } catch (e) { var clone = require('clone-component') }module.exports = alias; function alias (obj, method) { switch (type(method)) { case 'object':return aliasByDictionary(clone(obj), method); case 'function':return aliasByFunction(clone(obj), method) } } function aliasByDictionary (obj, aliases) { for (const key in aliases) { if (undefined === obj[key]) continue; obj[aliases[key]] = obj[key]; delete obj[key] } return obj } function aliasByFunction (obj, convert) { const output = {}; for (const key in obj)output[convert(key)] = obj[key]; return output } }, { type: 7, clone: 165 }],
  178: [function (require, module, exports) { const is = require('is'); try { var clone = require('clone') } catch (e) { var clone = require('clone-component') }module.exports = convertDates; function convertDates (obj, convert) { obj = clone(obj); for (const key in obj) { const val = obj[key]; if (is.date(val))obj[key] = convert(val); if (is.object(val))obj[key] = convertDates(val, convert) } return obj } }, { is: 91, clone: 95 }],
  29: [function (require, module, exports) { const alias = require('alias'); const integration = require('analytics.js-integration'); const is = require('is'); const load = require('load-script'); const push = require('global-queue')('_dcq'); const Drip = module.exports = integration('Drip').assumesPageview().global('_dc').global('_dcqi').global('_dcq').global('_dcs').option('account', '').tag('<script src="//tag.getdrip.com/{{ account }}.js">'); Drip.prototype.initialize = function (page) { window._dcq = window._dcq || []; window._dcs = window._dcs || {}; window._dcs.account = this.options.account; this.load(this.ready) }; Drip.prototype.loaded = function () { return is.object(window._dc) }; Drip.prototype.track = function (track) { const props = track.properties(); const cents = track.cents(); if (cents)props.value = cents; delete props.revenue; push('track', track.event(), props) }; Drip.prototype.identify = function (identify) { push('identify', identify.traits()) } }, { alias: 177, 'analytics.js-integration': 88, is: 91, 'load-script': 143, 'global-queue': 173 }],
  30: [function (require, module, exports) {
    const extend = require('extend')
    const integration = require('analytics.js-integration'); const onError = require('on-error'); const push = require('global-queue')('_errs'); const Errorception = module.exports = integration('Errorception').assumesPageview().global('_errs').option('projectId', '').option('meta', true).tag('<script src="//beacon.errorception.com/{{ projectId }}.js">'); Errorception.prototype.initialize = function (page) { window._errs = window._errs || [this.options.projectId]; onError(push); this.load(this.ready) }; Errorception.prototype.loaded = function () { return !!(window._errs && window._errs.push !== Array.prototype.push) }; Errorception.prototype.identify = function (identify) { if (!this.options.meta) return; const traits = identify.traits(); window._errs = window._errs || []; window._errs.meta = window._errs.meta || {}; extend(window._errs.meta, traits) }
  }, { extend: 145, 'analytics.js-integration': 88, 'on-error': 171, 'global-queue': 173 }],
  31: [function (require, module, exports) { const each = require('each'); const integration = require('analytics.js-integration'); const push = require('global-queue')('_aaq'); const Evergage = module.exports = integration('Evergage').assumesPageview().global('_aaq').option('account', '').option('dataset', '').tag('<script src="//cdn.evergage.com/beacon/{{ account }}/{{ dataset }}/scripts/evergage.min.js">'); Evergage.prototype.initialize = function (page) { const account = this.options.account; const dataset = this.options.dataset; window._aaq = window._aaq || []; push('setEvergageAccount', account); push('setDataset', dataset); push('setUseSiteConfig', true); this.load(this.ready) }; Evergage.prototype.loaded = function () { return !!(window._aaq && window._aaq.push !== Array.prototype.push) }; Evergage.prototype.page = function (page) { const props = page.properties(); const name = page.name(); if (name)push('namePage', name); each(props, function (key, value) { push('setCustomField', key, value, 'page') }); window.Evergage.init(true) }; Evergage.prototype.identify = function (identify) { const id = identify.userId(); if (!id) return; push('setUser', id); const traits = identify.traits({ email: 'userEmail', name: 'userName' }); each(traits, function (key, value) { push('setUserField', key, value, 'page') }) }; Evergage.prototype.group = function (group) { const props = group.traits(); const id = group.groupId(); if (!id) return; push('setCompany', id); each(props, function (key, value) { push('setAccountField', key, value, 'page') }) }; Evergage.prototype.track = function (track) { push('trackAction', track.event(), track.properties()) } }, { each: 4, 'analytics.js-integration': 88, 'global-queue': 173 }],
  32: [function (require, module, exports) { 'use strict'; const bind = require('bind'); const domify = require('domify'); const each = require('each'); const extend = require('extend'); const integration = require('analytics.js-integration'); const json = require('json'); const Extole = module.exports = integration('Extole').global('extole').option('clientId', '').mapping('events').tag('main', '<script src="//tags.extole.com/{{ clientId }}/core.js">'); Extole.prototype.initialize = function () { if (this.loaded()) return this.ready(); this.load('main', bind(this, this.ready)) }; Extole.prototype.loaded = function () { return !!window.extole }; Extole.prototype.track = function (track) { const user = this.analytics.user(); const traits = user.traits(); const userId = user.id(); const email = traits.email; if (!userId && !email) { return this.debug('User must be identified before `#track` calls') } const event = track.event(); const extoleEvents = this.events(event); if (!extoleEvents.length) { return this.debug('No events found for %s', event) }each(extoleEvents, bind(this, function (extoleEvent) { this._registerConversion(this._createConversionTag({ type: extoleEvent, params: this._formatConversionParams(event, email, userId, track.properties()) })) })) }; Extole.prototype._registerConversion = function (conversionTag) { if (window.extole.main && window.extole.main.fireConversion) { return window.extole.main.fireConversion(conversionTag) } if (window.extole.initializeGo) { window.extole.initializeGo().andWhenItsReady(function () { window.extole.main.fireConversion(conversionTag) }) } }; Extole.prototype._formatConversionParams = function (event, email, userId, properties) { let total; if (properties.total) { total = properties.total; delete properties.total; properties['tag:cart_value'] = total } return extend({ 'tag:segment_event': event, e: email, partner_conversion_id: userId }, properties) }; Extole.prototype._createConversionTag = function (conversion) { return domify('<script type="extole/conversion">' + json.stringify(conversion) + '</script>') } }, { bind: 101, domify: 119, each: 4, extend: 145, 'analytics.js-integration': 88, json: 179 }],
  179: [function (require, module, exports) { const json = window.JSON || {}; const stringify = json.stringify; const parse = json.parse; module.exports = parse && stringify ? JSON : require('json-fallback') }, { 'json-fallback': 180 }],
  180: [function (require, module, exports) { (function () { 'use strict'; const JSON = module.exports = {}; function f (n) { return n < 10 ? '0' + n : n } if (typeof Date.prototype.toJSON !== 'function') { Date.prototype.toJSON = function () { return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null }; String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () { return this.valueOf() } } let cx, escapable, gap, indent, meta, rep; function quote (string) { escapable.lastIndex = 0; return escapable.test(string) ? '"' + string.replace(escapable, function (a) { const c = meta[a]; return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4) }) + '"' : '"' + string + '"' } function str (key, holder) { let i; let k; let v; let length; const mind = gap; let partial; let value = holder[key]; if (value && typeof value === 'object' && typeof value.toJSON === 'function') { value = value.toJSON(key) } if (typeof rep === 'function') { value = rep.call(holder, key, value) } switch (typeof value) { case 'string':return quote(value); case 'number':return isFinite(value) ? String(value) : 'null'; case 'boolean':case 'null':return String(value); case 'object':if (!value) { return 'null' }gap += indent; partial = []; if (Object.prototype.toString.apply(value) === '[object Array]') { length = value.length; for (i = 0; i < length; i += 1) { partial[i] = str(i, value) || 'null' }v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']'; gap = mind; return v } if (rep && typeof rep === 'object') { length = rep.length; for (i = 0; i < length; i += 1) { if (typeof rep[i] === 'string') { k = rep[i]; v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v) } } } } else { for (k in value) { if (Object.prototype.hasOwnProperty.call(value, k)) { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v) } } } }v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}'; gap = mind; return v } } if (typeof JSON.stringify !== 'function') { escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g; meta = { '\b': '\\b', '	': '\\t', '\n': '\\n', '\f': '\\f', '\r': '\\r', '"': '\\"', '\\': '\\\\' }; JSON.stringify = function (value, replacer, space) { let i; gap = ''; indent = ''; if (typeof space === 'number') { for (i = 0; i < space; i += 1) { indent += ' ' } } else if (typeof space === 'string') { indent = space }rep = replacer; if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) { throw new Error('JSON.stringify') } return str('', { '': value }) } } if (typeof JSON.parse !== 'function') { cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g; JSON.parse = function (text, reviver) { let j; function walk (holder, key) { let k; let v; const value = holder[key]; if (value && typeof value === 'object') { for (k in value) { if (Object.prototype.hasOwnProperty.call(value, k)) { v = walk(value, k); if (v !== undefined) { value[k] = v } else { delete value[k] } } } } return reviver.call(holder, key, value) }text = String(text); cx.lastIndex = 0; if (cx.test(text)) { text = text.replace(cx, function (a) { return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4) }) } if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) { j = eval('(' + text + ')'); return typeof reviver === 'function' ? walk({ '': j }, '') : j } throw new SyntaxError('JSON.parse') } } })() }, {}],
  33: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_fbq'); const each = require('each'); const has = Object.prototype.hasOwnProperty; const Facebook = module.exports = integration('Facebook Conversion Tracking').global('_fbq').option('currency', 'USD').tag('<script src="//connect.facebook.net/en_US/fbds.js">').mapping('events'); Facebook.prototype.initialize = function (page) { window._fbq = window._fbq || []; this.load(this.ready); window._fbq.loaded = true }; Facebook.prototype.loaded = function () { return !!(window._fbq && window._fbq.loaded) }; Facebook.prototype.track = function (track) { const event = track.event(); const events = this.events(event); const revenue = track.revenue() || 0; const self = this; each(events, function (event) { push('track', event, { value: String(revenue.toFixed(2)), currency: self.options.currency }) }); if (!events.length) { const data = track.properties(); push('track', event, data) } } }, { 'analytics.js-integration': 88, 'global-queue': 173, each: 4 }],
  34: [function (require, module, exports) { const push = require('global-queue')('_fxm'); const integration = require('analytics.js-integration'); const Track = require('facade').Track; const each = require('each'); const FoxMetrics = module.exports = integration('FoxMetrics').assumesPageview().global('_fxm').option('appId', '').tag('<script src="//d35tca7vmefkrc.cloudfront.net/scripts/{{ appId }}.js">'); FoxMetrics.prototype.initialize = function (page) { window._fxm = window._fxm || []; this.load(this.ready) }; FoxMetrics.prototype.loaded = function () { return !!(window._fxm && window._fxm.appId) }; FoxMetrics.prototype.page = function (page) { const properties = page.proxy('properties'); const category = page.category(); const name = page.name(); this._category = category; push('_fxm.pages.view', properties.title, name, category, properties.url, properties.referrer) }; FoxMetrics.prototype.identify = function (identify) { const id = identify.userId(); if (!id) return; push('_fxm.visitor.profile', id, identify.firstName(), identify.lastName(), identify.email(), identify.address(), undefined, undefined, identify.traits()) }; FoxMetrics.prototype.track = function (track) { const props = track.properties(); const category = this._category || props.category; push(track.event(), category, props) }; FoxMetrics.prototype.viewedProduct = function (track) { ecommerce('productview', track) }; FoxMetrics.prototype.removedProduct = function (track) { ecommerce('removecartitem', track) }; FoxMetrics.prototype.addedProduct = function (track) { ecommerce('cartitem', track) }; FoxMetrics.prototype.completedOrder = function (track) { const orderId = track.orderId(); push('_fxm.ecommerce.order', orderId, track.subtotal(), track.shipping(), track.tax(), track.city(), track.state(), track.zip(), track.quantity()); each(track.products(), function (product) { const track = new Track({ properties: product }); ecommerce('purchaseitem', track, [track.quantity(), track.price(), orderId]) }) }; function ecommerce (event, track, arr) { push.apply(null, ['_fxm.ecommerce.' + event, track.id() || track.sku(), track.name(), track.category()].concat(arr || [])) } }, { 'global-queue': 173, 'analytics.js-integration': 88, facade: 147, each: 4 }],
  35: [function (require, module, exports) { const integration = require('analytics.js-integration'); const bind = require('bind'); const when = require('when'); const is = require('is'); const Frontleaf = module.exports = integration('Frontleaf').global('_fl').global('_flBaseUrl').option('baseUrl', 'https://api.frontleaf.com').option('token', '').option('stream', '').option('trackNamedPages', false).option('trackCategorizedPages', false).tag('<script id="_fl" src="{{ baseUrl }}/lib/tracker.js">'); Frontleaf.prototype.initialize = function (page) { window._fl = window._fl || []; window._flBaseUrl = window._flBaseUrl || this.options.baseUrl; this._push('setApiToken', this.options.token); this._push('setStream', this.options.stream); const loaded = bind(this, this.loaded); const ready = this.ready; this.load({ baseUrl: window._flBaseUrl }, this.ready) }; Frontleaf.prototype.loaded = function () { return is.array(window._fl) && window._fl.ready === true }; Frontleaf.prototype.identify = function (identify) { const userId = identify.userId(); if (userId) { this._push('setUser', { id: userId, name: identify.name() || identify.username(), data: clean(identify.traits()) }) } }; Frontleaf.prototype.group = function (group) { const groupId = group.groupId(); if (groupId) { this._push('setAccount', { id: groupId, name: group.proxy('traits.name'), data: clean(group.traits()) }) } }; Frontleaf.prototype.page = function (page) { const category = page.category(); const name = page.fullName(); const opts = this.options; if (category && opts.trackCategorizedPages) { this.track(page.track(category)) } if (name && opts.trackNamedPages) { this.track(page.track(name)) } }; Frontleaf.prototype.track = function (track) { const event = track.event(); this._push('event', event, clean(track.properties())) }; Frontleaf.prototype._push = function (command) { const args = [].slice.call(arguments, 1); window._fl.push(function (t) { t[command].apply(command, args) }) }; function clean (obj) { const ret = {}; const excludeKeys = ['id', 'name', 'firstName', 'lastName']; const len = excludeKeys.length; for (let i = 0; i < len; i++) { clear(obj, excludeKeys[i]) }obj = flatten(obj); for (const key in obj) { const val = obj[key]; if (val == null) { continue } if (is.array(val)) { ret[key] = val.toString(); continue }ret[key] = val } return ret } function clear (obj, key) { if (obj.hasOwnProperty(key)) { delete obj[key] } } function flatten (source) { const output = {}; function step (object, prev) { for (const key in object) { const value = object[key]; const newKey = prev ? prev + ' ' + key : key; if (!is.array(value) && is.object(value)) { return step(value, newKey) }output[newKey] = value } }step(source); return output } }, { 'analytics.js-integration': 88, bind: 101, when: 146, is: 91 }],
  36: [function (require, module, exports) { const each = require('each'); const is = require('is'); const del = require('obj-case').del; const integration = require('analytics.js-integration'); const FullStory = module.exports = integration('FullStory').option('org', '').option('debug', false).tag('<script src="https://www.fullstory.com/s/fs.js"></script>'); FullStory.prototype.initialize = function () { const self = this; window._fs_debug = this.options.debug; window._fs_host = 'www.fullstory.com'; window._fs_org = this.options.org; (function (m, n, e, t, l, o, g, y) { g = m[e] = function (a, b) { g.q ? g.q.push([a, b]) : g._api(a, b) }; g.q = []; g.identify = function (i, v) { g(l, { uid: i }); if (v)g(l, v) }; g.setUserVars = function (v) { FS(l, v) }; g.setSessionVars = function (v) { FS('session', v) }; g.setPageVars = function (v) { FS('page', v) }; self.ready(); self.load() })(window, document, 'FS', 'script', 'user') }; FullStory.prototype.loaded = function () { return !!window.FS }; FullStory.prototype.identify = function (identify) { let id = identify.userId() || identify.anonymousId(); const traits = identify.traits(); del(traits, 'id'); if (identify.name()) { traits.displayName = identify.name(); del(traits, 'name') }each(traits, function (trait, value) { if (trait !== 'displayName' && trait !== 'email') { const newTrait = convert(trait, value); traits[newTrait] = value; del(traits, trait) } }); if (typeof id !== 'string')id = '' + id; window.FS.identify(id, traits) }; function convert (trait, value) { if (is.string(value)) return trait += '_str'; if (isInt(value)) return trait += '_int'; if (isFloat(value)) return trait += '_real'; if (is.date(value)) return trait += '_date'; if (is.boolean(value)) return trait += '_bool' } function isFloat (n) { return n === +n && n !== (n | 0) } function isInt (n) { return n === +n && n === (n | 0) } }, { each: 4, is: 91, 'obj-case': 92, 'analytics.js-integration': 88 }],
  37: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_gauges'); const Gauges = module.exports = integration('Gauges').assumesPageview().global('_gauges').option('siteId', '').tag('<script id="gauges-tracker" src="//secure.gaug.es/track.js" data-site-id="{{ siteId }}">'); Gauges.prototype.initialize = function (page) { window._gauges = window._gauges || []; this.load(this.ready) }; Gauges.prototype.loaded = function () { return !!(window._gauges && window._gauges.push !== Array.prototype.push) }; Gauges.prototype.page = function (page) { push('track') } }, { 'analytics.js-integration': 88, 'global-queue': 173 }],
  38: [function (require, module, exports) { const integration = require('analytics.js-integration'); const onBody = require('on-body'); const GetSatisfaction = module.exports = integration('Get Satisfaction').assumesPageview().global('GSFN').option('widgetId', '').tag('<script src="https://loader.engage.gsfn.us/loader.js">'); GetSatisfaction.prototype.initialize = function (page) { const self = this; const widget = this.options.widgetId; const div = document.createElement('div'); const id = div.id = 'getsat-widget-' + widget; onBody(function (body) { body.appendChild(div) }); this.load(function () { window.GSFN.loadWidget(widget, { containerId: id }); self.ready() }) }; GetSatisfaction.prototype.loaded = function () { return !!window.GSFN } }, { 'analytics.js-integration': 88, 'on-body': 144 }],
  39: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_gaq'); const length = require('object').length; const canonical = require('canonical'); const useHttps = require('use-https'); const Track = require('facade').Track; const callback = require('callback'); const defaults = require('defaults'); const load = require('load-script'); const keys = require('object').keys; const select = require('select'); const dot = require('obj-case'); const each = require('each'); const type = require('type'); const url = require('url'); const is = require('is'); let group; let user; module.exports = exports = function (analytics) { analytics.addIntegration(GA); group = analytics.group(); user = analytics.user() }; var GA = exports.Integration = integration('Google Analytics').readyOnLoad().global('ga').global('gaplugins').global('_gaq').global('GoogleAnalyticsObject').option('anonymizeIp', false).option('classic', false).option('domain', 'auto').option('doubleClick', false).option('enhancedEcommerce', false).option('enhancedLinkAttribution', false).option('nonInteraction', false).option('ignoredReferrers', null).option('includeSearch', false).option('siteSpeedSampleRate', 1).option('trackingId', '').option('trackNamedPages', true).option('trackCategorizedPages', true).option('sendUserId', false).option('metrics', {}).option('dimensions', {}).tag('library', '<script src="//www.google-analytics.com/analytics.js">').tag('double click', '<script src="//stats.g.doubleclick.net/dc.js">').tag('http', '<script src="http://www.google-analytics.com/ga.js">').tag('https', '<script src="https://ssl.google-analytics.com/ga.js">'); GA.on('construct', function (integration) { if (integration.options.classic) { integration.initialize = integration.initializeClassic; integration.loaded = integration.loadedClassic; integration.page = integration.pageClassic; integration.track = integration.trackClassic; integration.completedOrder = integration.completedOrderClassic } else if (integration.options.enhancedEcommerce) { integration.viewedProduct = integration.viewedProductEnhanced; integration.clickedProduct = integration.clickedProductEnhanced; integration.addedProduct = integration.addedProductEnhanced; integration.removedProduct = integration.removedProductEnhanced; integration.startedOrder = integration.startedOrderEnhanced; integration.viewedCheckoutStep = integration.viewedCheckoutStepEnhanced; integration.completedCheckoutStep = integration.completedCheckoutStepEnhanced; integration.updatedOrder = integration.updatedOrderEnhanced; integration.completedOrder = integration.completedOrderEnhanced; integration.refundedOrder = integration.refundedOrderEnhanced; integration.viewedPromotion = integration.viewedPromotionEnhanced; integration.clickedPromotion = integration.clickedPromotionEnhanced } }); GA.prototype.initialize = function () { const opts = this.options; window.GoogleAnalyticsObject = 'ga'; window.ga = window.ga || function () { window.ga.q = window.ga.q || []; window.ga.q.push(arguments) }; window.ga.l = (new Date()).getTime(); if (window.location.hostname === 'localhost')opts.domain = 'none'; window.ga('create', opts.trackingId, { cookieDomain: opts.domain || GA.prototype.defaults.domain, siteSpeedSampleRate: opts.siteSpeedSampleRate, allowLinker: true }); if (opts.doubleClick) { window.ga('require', 'displayfeatures') } if (opts.sendUserId && user.id()) { window.ga('set', 'userId', user.id()) } if (opts.anonymizeIp)window.ga('set', 'anonymizeIp', true); const custom = metrics(user.traits(), opts); if (length(custom))window.ga('set', custom); this.load('library', this.ready) }; GA.prototype.loaded = function () { return !!window.gaplugins }; GA.prototype.page = function (page) { const category = page.category(); const props = page.properties(); const name = page.fullName(); const campaign = page.proxy('context.campaign') || {}; const pageview = {}; let track; this._category = category; pageview.page = path(props, this.options); pageview.title = name || props.title; pageview.location = props.url; if (campaign.name)pageview.campaignName = campaign.name; if (campaign.source)pageview.campaignSource = campaign.source; if (campaign.medium)pageview.campaignMedium = campaign.medium; if (campaign.content)pageview.campaignContent = campaign.content; if (campaign.term)pageview.campaignKeyword = campaign.term; window.ga('send', 'pageview', pageview); if (category && this.options.trackCategorizedPages) { track = page.track(category); this.track(track, { nonInteraction: 1 }) } if (name && this.options.trackNamedPages) { track = page.track(name); this.track(track, { nonInteraction: 1 }) } }; GA.prototype.identify = function (identify) { const opts = this.options; if (opts.sendUserId && identify.userId()) { window.ga('set', 'userId', identify.userId()) } const custom = metrics(user.traits(), opts); if (length(custom))window.ga('set', custom) }; GA.prototype.track = function (track, options) { const contextOpts = track.options(this.name); const interfaceOpts = this.options; let opts = defaults(options || {}, contextOpts); opts = defaults(opts, interfaceOpts); const props = track.properties(); const campaign = track.proxy('context.campaign') || {}; const custom = metrics(props, interfaceOpts); if (length(custom))window.ga('set', custom); const payload = { eventAction: track.event(), eventCategory: props.category || this._category || 'All', eventLabel: props.label, eventValue: formatValue(props.value || track.revenue()), nonInteraction: !!(props.nonInteraction || opts.nonInteraction) }; if (campaign.name)payload.campaignName = campaign.name; if (campaign.source)payload.campaignSource = campaign.source; if (campaign.medium)payload.campaignMedium = campaign.medium; if (campaign.content)payload.campaignContent = campaign.content; if (campaign.term)payload.campaignKeyword = campaign.term; window.ga('send', 'event', payload) }; GA.prototype.completedOrder = function (track) { const total = track.total() || track.revenue() || 0; const orderId = track.orderId(); const products = track.products(); const props = track.properties(); if (!orderId) return; if (!this.ecommerce) { window.ga('require', 'ecommerce'); this.ecommerce = true }window.ga('ecommerce:addTransaction', { affiliation: props.affiliation, shipping: track.shipping(), revenue: total, tax: track.tax(), id: orderId, currency: track.currency() }); each(products, function (product) { const track = new Track({ properties: product }); window.ga('ecommerce:addItem', { category: track.category(), quantity: track.quantity(), price: track.price(), name: track.name(), sku: track.sku(), id: orderId, currency: track.currency() }) }); window.ga('ecommerce:send') }; GA.prototype.initializeClassic = function () { const opts = this.options; const anonymize = opts.anonymizeIp; const db = opts.doubleClick; const domain = opts.domain; const enhanced = opts.enhancedLinkAttribution; let ignore = opts.ignoredReferrers; const sample = opts.siteSpeedSampleRate; window._gaq = window._gaq || []; push('_setAccount', opts.trackingId); push('_setAllowLinker', true); if (anonymize)push('_gat._anonymizeIp'); if (domain)push('_setDomainName', domain); if (sample)push('_setSiteSpeedSampleRate', sample); if (enhanced) { const protocol = document.location.protocol === 'https:' ? 'https:' : 'http:'; const pluginUrl = protocol + '//www.google-analytics.com/plugins/ga/inpage_linkid.js'; push('_require', 'inpage_linkid', pluginUrl) } if (ignore) { if (!is.array(ignore))ignore = [ignore]; each(ignore, function (domain) { push('_addIgnoredRef', domain) }) } if (this.options.doubleClick) { this.load('double click', this.ready) } else { const name = useHttps() ? 'https' : 'http'; this.load(name, this.ready) } }; GA.prototype.loadedClassic = function () { return !!(window._gaq && window._gaq.push !== Array.prototype.push) }; GA.prototype.pageClassic = function (page) { const opts = page.options(this.name); const category = page.category(); const props = page.properties(); const name = page.fullName(); let track; push('_trackPageview', path(props, this.options)); if (category && this.options.trackCategorizedPages) { track = page.track(category); this.track(track, { nonInteraction: 1 }) } if (name && this.options.trackNamedPages) { track = page.track(name); this.track(track, { nonInteraction: 1 }) } }; GA.prototype.trackClassic = function (track, options) { const opts = options || track.options(this.name); const props = track.properties(); const revenue = track.revenue(); const event = track.event(); const category = this._category || props.category || 'All'; const label = props.label; const value = formatValue(revenue || props.value); const nonInteraction = !!(props.nonInteraction || opts.nonInteraction); push('_trackEvent', category, event, label, value, nonInteraction) }; GA.prototype.completedOrderClassic = function (track) { const total = track.total() || track.revenue() || 0; const orderId = track.orderId(); const products = track.products() || []; const props = track.properties(); const currency = track.currency(); if (!orderId) return; push('_addTrans', orderId, props.affiliation, total, track.tax(), track.shipping(), track.city(), track.state(), track.country()); each(products, function (product) { const track = new Track({ properties: product }); push('_addItem', orderId, track.sku(), track.name(), track.category(), track.price(), track.quantity()) }); push('_set', 'currencyCode', currency); push('_trackTrans') }; function path (properties, options) { if (!properties) return; let str = properties.path; if (options.includeSearch && properties.search)str += properties.search; return str } function formatValue (value) { if (!value || value < 0) return 0; return Math.round(value) } function metrics (obj, data) { const dimensions = data.dimensions; const metrics = data.metrics; const names = keys(metrics).concat(keys(dimensions)); const ret = {}; for (let i = 0; i < names.length; ++i) { const name = names[i]; const key = metrics[name] || dimensions[name]; const value = dot(obj, name) || obj[name]; if (value == null) continue; ret[key] = value } return ret }GA.prototype.loadEnhancedEcommerce = function (track) { if (!this.enhancedEcommerceLoaded) { window.ga('require', 'ec'); this.enhancedEcommerceLoaded = true }window.ga('set', '&cu', track.currency()) }; GA.prototype.pushEnhancedEcommerce = function (track) { ga('send', 'event', track.category() || 'EnhancedEcommerce', track.event(), { nonInteraction: 1 }) }; GA.prototype.startedOrderEnhanced = function (track) { this.viewedCheckoutStep(track) }; GA.prototype.updatedOrderEnhanced = function (track) { this.startedOrderEnhanced(track) }; GA.prototype.viewedCheckoutStepEnhanced = function (track) { const products = track.products(); const props = track.properties(); const options = extractCheckoutOptions(props); this.loadEnhancedEcommerce(track); each(products, function (product) { const trackTemp = new Track({ properties: product }); enhancedEcommerceTrackProduct(trackTemp) }); window.ga('ec:setAction', 'checkout', { step: props.step || 1, option: options || undefined }); this.pushEnhancedEcommerce(track) }; GA.prototype.completedCheckoutStepEnhanced = function (track) { const props = track.properties(); const options = extractCheckoutOptions(props); if (!props.step || !options) return; this.loadEnhancedEcommerce(track); window.ga('ec:setAction', 'checkout_option', { step: props.step || 1, option: options }); window.ga('send', 'event', 'Checkout', 'Option') }; GA.prototype.completedOrderEnhanced = function (track) { const total = track.total() || track.revenue() || 0; const orderId = track.orderId(); const products = track.products(); const props = track.properties(); if (!orderId) return; this.loadEnhancedEcommerce(track); each(products, function (product) { const track = new Track({ properties: product }); enhancedEcommerceTrackProduct(track) }); window.ga('ec:setAction', 'purchase', { id: orderId, affiliation: props.affiliation, revenue: total, tax: track.tax(), shipping: track.shipping(), coupon: track.coupon() }); this.pushEnhancedEcommerce(track) }; GA.prototype.refundedOrderEnhanced = function (track) { const orderId = track.orderId(); const products = track.products(); if (!orderId) return; this.loadEnhancedEcommerce(track); each(products, function (product) { const track = new Track({ properties: product }); window.ga('ec:addProduct', { id: track.id() || track.sku(), quantity: track.quantity() }) }); window.ga('ec:setAction', 'refund', { id: orderId }); this.pushEnhancedEcommerce(track) }; GA.prototype.addedProductEnhanced = function (track) { this.loadEnhancedEcommerce(track); enhancedEcommerceProductAction(track, 'add'); this.pushEnhancedEcommerce(track) }; GA.prototype.removedProductEnhanced = function (track) { this.loadEnhancedEcommerce(track); enhancedEcommerceProductAction(track, 'remove'); this.pushEnhancedEcommerce(track) }; GA.prototype.viewedProductEnhanced = function (track) { this.loadEnhancedEcommerce(track); enhancedEcommerceProductAction(track, 'detail'); this.pushEnhancedEcommerce(track) }; GA.prototype.clickedProductEnhanced = function (track) { const props = track.properties(); this.loadEnhancedEcommerce(track); enhancedEcommerceProductAction(track, 'click', { list: props.list }); this.pushEnhancedEcommerce(track) }; GA.prototype.viewedPromotionEnhanced = function (track) { const props = track.properties(); this.loadEnhancedEcommerce(track); window.ga('ec:addPromo', { id: track.id(), name: track.name(), creative: props.creative, position: props.position }); this.pushEnhancedEcommerce(track) }; GA.prototype.clickedPromotionEnhanced = function (track) { const props = track.properties(); this.loadEnhancedEcommerce(track); window.ga('ec:addPromo', { id: track.id(), name: track.name(), creative: props.creative, position: props.position }); ga('ec:setAction', 'promo_click', {}); this.pushEnhancedEcommerce(track) }; function enhancedEcommerceTrackProduct (track) { const props = track.properties(); window.ga('ec:addProduct', { id: track.id() || track.sku(), name: track.name(), category: track.category(), quantity: track.quantity(), price: track.price(), brand: props.brand, variant: props.variant }) } function enhancedEcommerceProductAction (track, action, data) { enhancedEcommerceTrackProduct(track); window.ga('ec:setAction', action, data || {}) } function extractCheckoutOptions (props) { const options = [props.paymentMethod, props.shippingMethod]; const valid = select(options, function (e) { return e }); return valid.length > 0 ? valid.join(', ') : null } }, { 'analytics.js-integration': 88, 'global-queue': 173, object: 181, canonical: 182, 'use-https': 90, facade: 147, callback: 94, defaults: 172, 'load-script': 143, select: 183, 'obj-case': 92, each: 4, type: 113, url: 184, is: 91 }],
  181: [function (require, module, exports) { const has = Object.prototype.hasOwnProperty; exports.keys = Object.keys || function (obj) { const keys = []; for (const key in obj) { if (has.call(obj, key)) { keys.push(key) } } return keys }; exports.values = function (obj) { const vals = []; for (const key in obj) { if (has.call(obj, key)) { vals.push(obj[key]) } } return vals }; exports.merge = function (a, b) { for (const key in b) { if (has.call(b, key)) { a[key] = b[key] } } return a }; exports.length = function (obj) { return exports.keys(obj).length }; exports.isEmpty = function (obj) { return exports.length(obj) == 0 } }, {}],
  182: [function (require, module, exports) { module.exports = function canonical () { const tags = document.getElementsByTagName('link'); for (var i = 0, tag; tag = tags[i]; i++) { if (tag.getAttribute('rel') == 'canonical') return tag.getAttribute('href') } } }, {}],
  183: [function (require, module, exports) { const toFunction = require('to-function'); module.exports = function (arr, fn) { const ret = []; fn = toFunction(fn); for (let i = 0; i < arr.length; ++i) { if (fn(arr[i], i)) { ret.push(arr[i]) } } return ret } }, { 'to-function': 185 }],
  185: [function (require, module, exports) {
    let expr; try { expr = require('props') } catch (e) { expr = require('component-props') }module.exports = toFunction; function toFunction (obj) { switch ({}.toString.call(obj)) { case '[object Object]':return objectToFunction(obj); case '[object Function]':return obj; case '[object String]':return stringToFunction(obj); case '[object RegExp]':return regexpToFunction(obj); default:return defaultToFunction(obj) } } function defaultToFunction (val) { return function (obj) { return val === obj } } function regexpToFunction (re) { return function (obj) { return re.test(obj) } } function stringToFunction (str) { if (/^ *\W+/.test(str)) return new Function('_', 'return _ ' + str); return new Function('_', 'return ' + get(str)) } function objectToFunction (obj) {
      const match = {}; for (const key in obj) { match[key] = typeof obj[key] === 'string' ? defaultToFunction(obj[key]) : toFunction(obj[key]) } return function (val) {
        if (typeof val !== 'object') return false; for (const key in match) {
          if (!(key in val)) return false; if (!match[key](val[key])) return false
        } return true
      }
    } function get (str) { const props = expr(str); if (!props.length) return '_.' + str; let val, i, prop; for (i = 0; i < props.length; i++) { prop = props[i]; val = '_.' + prop; val = "('function' == typeof " + val + ' ? ' + val + '() : ' + val + ')'; str = stripNested(prop, str, val) } return str } function stripNested (prop, str, val) { return str.replace(new RegExp('(\\.)?' + prop, 'g'), function ($0, $1) { return $1 ? $0 : val }) }
  }, { props: 118, 'component-props': 118 }],
  184: [function (require, module, exports) { exports.parse = function (url) { const a = document.createElement('a'); a.href = url; return { href: a.href, host: a.host, port: a.port, hash: a.hash, hostname: a.hostname, pathname: a.pathname, protocol: a.protocol, search: a.search, query: a.search.slice(1) } }; exports.isAbsolute = function (url) { if (url.indexOf('//') == 0) return true; if (~url.indexOf('://')) return true; return false }; exports.isRelative = function (url) { return !exports.isAbsolute(url) }; exports.isCrossDomain = function (url) { url = exports.parse(url); return url.hostname != location.hostname || url.port != location.port || url.protocol != location.protocol } }, {}],
  40: [function (require, module, exports) { const push = require('global-queue')('dataLayer', { wrap: false }); const integration = require('analytics.js-integration'); const GTM = module.exports = integration('Google Tag Manager').assumesPageview().global('dataLayer').global('google_tag_manager').option('containerId', '').option('trackNamedPages', true).option('trackCategorizedPages', true).tag('<script src="//www.googletagmanager.com/gtm.js?id={{ containerId }}&l=dataLayer">'); GTM.prototype.initialize = function () { push({ 'gtm.start': +new Date(), event: 'gtm.js' }); this.load(this.ready) }; GTM.prototype.loaded = function () { return !!(window.dataLayer && [].push != window.dataLayer.push) }; GTM.prototype.page = function (page) { const category = page.category(); const props = page.properties(); const name = page.fullName(); const opts = this.options; let track; if (opts.trackAllPages) { this.track(page.track()) } if (category && opts.trackCategorizedPages) { this.track(page.track(category)) } if (name && opts.trackNamedPages) { this.track(page.track(name)) } }; GTM.prototype.track = function (track) { const props = track.properties(); props.event = track.event(); push(props) } }, { 'global-queue': 173, 'analytics.js-integration': 88 }],
  41: [function (require, module, exports) { const integration = require('analytics.js-integration'); const Identify = require('facade').Identify; const Track = require('facade').Track; const callback = require('callback'); const load = require('load-script'); const onBody = require('on-body'); const each = require('each'); const is = require('is'); const pick = require('pick'); const omit = require('omit'); const GoSquared = module.exports = integration('GoSquared').assumesPageview().global('_gs').option('siteToken', '').option('anonymizeIP', false).option('cookieDomain', null).option('useCookies', true).option('trackHash', false).option('trackLocal', false).option('trackParams', true).tag('<script src="//d1l6p2sc9645hc.cloudfront.net/tracker.js">'); GoSquared.prototype.initialize = function (page) { const self = this; const options = this.options; const user = this.analytics.user(); push(options.siteToken); each(options, function (name, value) { if (name == 'siteToken') return; if (value == null) return; push('set', name, value) }); self.identify(new Identify({ traits: user.traits(), userId: user.id() })); self.load(this.ready) }; GoSquared.prototype.loaded = function () { return !!(window._gs && window._gs.v) }; GoSquared.prototype.page = function (page) { const props = page.properties(); const name = page.fullName(); push('track', props.path, name || props.title) }; GoSquared.prototype.identify = function (identify) { const traits = identify.traits({ createdAt: 'created_at', firstName: 'first_name', lastName: 'last_name', title: 'company_position', industry: 'company_industry' }); const specialKeys = ['id', 'email', 'name', 'first_name', 'last_name', 'username', 'description', 'avatar', 'phone', 'created_at', 'company_name', 'company_size', 'company_position', 'company_industry']; const props = pick.apply(null, [traits].concat(specialKeys)); props.custom = omit(specialKeys, traits); const id = identify.userId(); if (id) { push('identify', id, props) } else { push('properties', props) } const email = identify.email(); const username = identify.username(); const name = email || username || id; if (name)push('set', 'visitorName', name) }; GoSquared.prototype.track = function (track) { push('event', track.event(), track.properties()) }; GoSquared.prototype.completedOrder = function (track) { const products = track.products(); const items = []; each(products, function (product) { const track = new Track({ properties: product }); items.push({ category: track.category(), quantity: track.quantity(), price: track.price(), name: track.name() }) }); push('transaction', track.orderId(), { revenue: track.total(), track: true }, items) }; function push () { var _gs = window._gs = window._gs || function () { (_gs.q = _gs.q || []).push(arguments) }; _gs.apply(null, arguments) } }, { 'analytics.js-integration': 88, facade: 147, callback: 94, 'load-script': 143, 'on-body': 144, each: 4, is: 91, pick: 186, omit: 187 }],
  186: [function (require, module, exports) { module.exports = pick; function pick (obj) { const keys = [].slice.call(arguments, 1); const ret = {}; for (var i = 0, key; key = keys[i]; i++) { if (key in obj)ret[key] = obj[key] } return ret } }, {}],
  187: [function (require, module, exports) { module.exports = omit; function omit (keys, object) { const ret = {}; for (const item in object) { ret[item] = object[item] } for (let i = 0; i < keys.length; i++) { delete ret[keys[i]] } return ret } }, {}],
  42: [function (require, module, exports) { const integration = require('analytics.js-integration'); const alias = require('alias'); const Heap = module.exports = integration('Heap').global('heap').option('appId', '').tag('<script src="//cdn.heapanalytics.com/js/heap-{{ appId }}.js">'); Heap.prototype.initialize = function (page) { window.heap = window.heap || []; window.heap.load = function (appid, config) { window.heap.appid = appid; window.heap.config = config; const methodFactory = function (type) { return function () { heap.push([type].concat(Array.prototype.slice.call(arguments, 0))) } }; const methods = ['clearEventProperties', 'identify', 'setEventProperties', 'track', 'unsetEventProperty']; for (let i = 0; i < methods.length; i++) { heap[methods[i]] = methodFactory(methods[i]) } }; window.heap.load(this.options.appId); this.load(this.ready) }; Heap.prototype.loaded = function () { return window.heap && window.heap.appid }; Heap.prototype.identify = function (identify) { const traits = identify.traits({ email: '_email' }); const id = identify.userId(); if (id)traits.handle = id; window.heap.identify(traits) }; Heap.prototype.track = function (track) { window.heap.track(track.event(), track.properties()) } }, { 'analytics.js-integration': 88, alias: 177 }],
  43: [function (require, module, exports) { const integration = require('analytics.js-integration'); const Hellobar = module.exports = integration('Hello Bar').assumesPageview().global('_hbq').option('apiKey', '').tag('<script src="//s3.amazonaws.com/scripts.hellobar.com/{{ apiKey }}.js">'); Hellobar.prototype.initialize = function (page) { window._hbq = window._hbq || []; this.load(this.ready) }; Hellobar.prototype.loaded = function () { return !!(window._hbq && window._hbq.push !== Array.prototype.push) } }, { 'analytics.js-integration': 88 }],
  44: [function (require, module, exports) { const integration = require('analytics.js-integration'); const is = require('is'); const HitTail = module.exports = integration('HitTail').assumesPageview().global('htk').option('siteId', '').tag('<script src="//{{ siteId }}.hittail.com/mlt.js">'); HitTail.prototype.initialize = function (page) { this.load(this.ready) }; HitTail.prototype.loaded = function () { return is.fn(window.htk) } }, { 'analytics.js-integration': 88, is: 91 }],
  45: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_hsq'); const convert = require('convert-dates'); const HubSpot = module.exports = integration('HubSpot').assumesPageview().global('_hsq').option('portalId', null).tag('<script id="hs-analytics" src="https://js.hs-analytics.net/analytics/{{ cache }}/{{ portalId }}.js">'); HubSpot.prototype.initialize = function (page) { window._hsq = []; const cache = Math.ceil(new Date() / 3e5) * 3e5; this.load({ cache }, this.ready) }; HubSpot.prototype.loaded = function () { return !!(window._hsq && window._hsq.push !== Array.prototype.push) }; HubSpot.prototype.page = function (page) { push('_trackPageview') }; HubSpot.prototype.identify = function (identify) { if (!identify.email()) return; let traits = identify.traits(); traits = convertDates(traits); push('identify', traits) }; HubSpot.prototype.track = function (track) { let props = track.properties(); props = convertDates(props); push('trackEvent', track.event(), props) }; function convertDates (properties) { return convert(properties, function (date) { return date.getTime() }) } }, { 'analytics.js-integration': 88, 'global-queue': 173, 'convert-dates': 178 }],
  46: [function (require, module, exports) { const integration = require('analytics.js-integration'); const alias = require('alias'); const Improvely = module.exports = integration('Improvely').assumesPageview().global('_improvely').global('improvely').option('domain', '').option('projectId', null).tag('<script src="//{{ domain }}.iljmp.com/improvely.js">'); Improvely.prototype.initialize = function (page) { window._improvely = []; window.improvely = { init: function (e, t) { window._improvely.push(['init', e, t]) }, goal: function (e) { window._improvely.push(['goal', e]) }, label: function (e) { window._improvely.push(['label', e]) } }; const domain = this.options.domain; const id = this.options.projectId; window.improvely.init(domain, id); this.load(this.ready) }; Improvely.prototype.loaded = function () { return !!(window.improvely && window.improvely.identify) }; Improvely.prototype.identify = function (identify) { const id = identify.userId(); if (id)window.improvely.label(id) }; Improvely.prototype.track = function (track) { const props = track.properties({ revenue: 'amount' }); props.type = track.event(); window.improvely.goal(props) } }, { 'analytics.js-integration': 88, alias: 177 }],
  47: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_iva'); const Track = require('facade').Track; const each = require('each'); const is = require('is'); const has = Object.prototype.hasOwnProperty; const InsideVault = module.exports = integration('InsideVault').global('_iva').option('clientId', '').option('domain', '').tag('<script src="//analytics.staticiv.com/iva.js">').mapping('events'); InsideVault.prototype.initialize = function (page) { const domain = this.options.domain; window._iva = window._iva || []; push('setClientId', this.options.clientId); const userId = this.analytics.user().id(); if (userId)push('setUserId', userId); if (domain)push('setDomain', domain); this.load(this.ready) }; InsideVault.prototype.loaded = function () { return !!(window._iva && window._iva.push !== Array.prototype.push) }; InsideVault.prototype.identify = function (identify) { push('setUserId', identify.userId()) }; InsideVault.prototype.page = function (page) { push('trackEvent', 'click') }; InsideVault.prototype.track = function (track) { const user = this.analytics.user(); const events = this.events(track.event()); const value = track.revenue() || track.value() || 0; const eventId = track.orderId() || user.id() || ''; each(events, function (event) { if (event != 'sale') { push('trackEvent', event, value, eventId) } }) } }, { 'analytics.js-integration': 88, 'global-queue': 173, facade: 147, each: 4, is: 91 }],
  48: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('__insp'); const alias = require('alias'); const clone = require('clone'); const Inspectlet = module.exports = integration('Inspectlet').assumesPageview().global('__insp').global('__insp_').option('wid', '').tag('<script src="//cdn.inspectlet.com/inspectlet.js">'); Inspectlet.prototype.initialize = function (page) { push('wid', this.options.wid); this.load(this.ready) }; Inspectlet.prototype.loaded = function () { return !!(window.__insp_ && window.__insp) }; Inspectlet.prototype.identify = function (identify) { const traits = identify.traits({ id: 'userid' }); push('tagSession', traits) }; Inspectlet.prototype.track = function (track) { push('tagSession', track.event()) }; Inspectlet.prototype.page = function () { push('virtualPage') } }, { 'analytics.js-integration': 88, 'global-queue': 173, alias: 177, clone: 95 }],
  49: [function (require, module, exports) { const integration = require('analytics.js-integration'); const convertDates = require('convert-dates'); const defaults = require('defaults'); const del = require('obj-case').del; const isEmail = require('is-email'); const load = require('load-script'); const empty = require('is-empty'); const alias = require('alias'); const each = require('each'); const when = require('when'); const is = require('is'); const Intercom = module.exports = integration('Intercom').assumesPageview().global('Intercom').option('activator', '#IntercomDefaultWidget').option('appId', '').option('inbox', false).tag('<script src="https://static.intercomcdn.com/intercom.v1.js">'); Intercom.prototype.initialize = function (page) { const self = this; this.load(function () { when(function () { return self.loaded() }, self.ready) }) }; Intercom.prototype.loaded = function () { return is.fn(window.Intercom) }; Intercom.prototype.page = function (page) { window.Intercom('update') }; Intercom.prototype.identify = function (identify) { let traits = identify.traits({ userId: 'user_id' }); const activator = this.options.activator; const opts = identify.options(this.name); const companyCreated = identify.companyCreated(); const created = identify.created(); const email = identify.email(); const name = identify.name(); const id = identify.userId(); const group = this.analytics.group(); if (!id && !traits.email) return; traits.app_id = this.options.appId; if (traits.company != null && !is.object(traits.company)) delete traits.company; if (traits.company)defaults(traits.company, group.traits()); if (name)traits.name = name; if (created) { del(traits, 'created'); del(traits, 'createdAt'); traits.created_at = created } if (companyCreated) { del(traits.company, 'created'); del(traits.company, 'createdAt'); traits.company.created_at = companyCreated }traits = convertDates(traits, formatDate); if (opts.increments)traits.increments = opts.increments; if (opts.userHash)traits.user_hash = opts.userHash; if (opts.user_hash)traits.user_hash = opts.user_hash; if (activator != '#IntercomDefaultWidget') { traits.widget = { activator } } const method = this._id !== id ? 'boot' : 'update'; this._id = id; window.Intercom(method, traits) }; Intercom.prototype.group = function (group) { let props = group.properties(); props = alias(props, { createdAt: 'created' }); props = alias(props, { created: 'created_at' }); const id = group.groupId(); if (id)props.id = id; window.Intercom('update', { company: props }) }; Intercom.prototype.track = function (track) { window.Intercom('trackEvent', track.event(), track.properties()) }; function formatDate (date) { return Math.floor(date / 1e3) } }, { 'analytics.js-integration': 88, 'convert-dates': 178, defaults: 172, 'obj-case': 92, 'is-email': 169, 'load-script': 143, 'is-empty': 122, alias: 177, each: 4, when: 146, is: 91 }],
  50: [function (require, module, exports) { const integration = require('analytics.js-integration'); const clone = require('clone'); const Keen = module.exports = integration('Keen IO').global('Keen').option('projectId', '').option('readKey', '').option('writeKey', '').option('ipAddon', false).option('uaAddon', false).option('urlAddon', false).option('referrerAddon', false).option('trackNamedPages', true).option('trackAllPages', false).option('trackCategorizedPages', true).tag('<script src="//d26b395fwzu5fz.cloudfront.net/3.0.7/{{ lib }}.min.js">'); Keen.prototype.initialize = function () { const options = this.options; !(function (a, b) { if (void 0 === b[a]) { b['_' + a] = {}, b[a] = function (c) { b['_' + a].clients = b['_' + a].clients || {}, b['_' + a].clients[c.projectId] = this, this._config = c }, b[a].ready = function (c) { b['_' + a].ready = b['_' + a].ready || [], b['_' + a].ready.push(c) }; for (let c = ['addEvent', 'setGlobalProperties', 'trackExternalLink', 'on'], d = 0; d < c.length; d++) { const e = c[d]; const f = function (a) { return function () { return this['_' + a] = this['_' + a] || [], this['_' + a].push(arguments), this } }; b[a].prototype[e] = f(e) } } }('Keen', window)); this.client = new window.Keen({ projectId: options.projectId, writeKey: options.writeKey, readKey: options.readKey }); const lib = this.options.readKey ? 'keen' : 'keen-tracker'; this.load({ lib }, this.ready) }; Keen.prototype.loaded = function () { return !!(window.Keen && window.Keen.prototype.configure) }; Keen.prototype.page = function (page) { const category = page.category(); const props = page.properties(); const name = page.fullName(); const opts = this.options; if (opts.trackAllPages) { this.track(page.track()) } if (name && opts.trackNamedPages) { this.track(page.track(name)) } if (category && opts.trackCategorizedPages) { this.track(page.track(category)) } }; Keen.prototype.identify = function (identify) { const traits = identify.traits(); const id = identify.userId(); const user = {}; if (id)user.userId = id; if (traits)user.traits = traits; const props = { user }; this.addons(props, identify); this.client.setGlobalProperties(function () { return clone(props) }) }; Keen.prototype.track = function (track) { const props = track.properties(); this.addons(props, track); this.client.addEvent(track.event(), props) }; Keen.prototype.addons = function (obj, msg) { const options = this.options; const addons = []; if (options.ipAddon) { addons.push({ name: 'keen:ip_to_geo', input: { ip: 'ip_address' }, output: 'ip_geo_info' }); obj.ip_address = '${keen.ip}' } if (options.uaAddon) { addons.push({ name: 'keen:ua_parser', input: { ua_string: 'user_agent' }, output: 'parsed_user_agent' }); obj.user_agent = '${keen.user_agent}' } if (options.urlAddon) { addons.push({ name: 'keen:url_parser', input: { url: 'page_url' }, output: 'parsed_page_url' }); obj.page_url = document.location.href } if (options.referrerAddon) { addons.push({ name: 'keen:referrer_parser', input: { referrer_url: 'referrer_url', page_url: 'page_url' }, output: 'referrer_info' }); obj.referrer_url = document.referrer; obj.page_url = document.location.href }obj.keen = { timestamp: msg.timestamp(), addons } } }, { 'analytics.js-integration': 88, clone: 95 }],
  51: [function (require, module, exports) { const integration = require('analytics.js-integration'); const indexof = require('indexof'); const is = require('is'); const Kenshoo = module.exports = integration('Kenshoo').global('k_trackevent').option('cid', '').option('subdomain', '').option('events', []).tag('<script src="//{{ subdomain }}.xg4ken.com/media/getpx.php?cid={{ cid }}">'); Kenshoo.prototype.initialize = function (page) { this.load(this.ready) }; Kenshoo.prototype.loaded = function () { return is.fn(window.k_trackevent) }; Kenshoo.prototype.track = function (track) { const events = this.options.events; const traits = track.traits(); const event = track.event(); const revenue = track.revenue() || 0; if (!~indexof(events, event)) return; const params = ['id=' + this.options.cid, 'type=conv', 'val=' + revenue, 'orderId=' + track.orderId(), 'promoCode=' + track.coupon(), 'valueCurrency=' + track.currency(), 'GCID=', 'kw=', 'product=']; window.k_trackevent(params, this.options.subdomain) } }, { 'analytics.js-integration': 88, indexof: 116, is: 91 }],
  52: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_kmq'); const Track = require('facade').Track; const alias = require('alias'); const each = require('each'); const is = require('is'); const KISSmetrics = module.exports = integration('KISSmetrics').assumesPageview().global('_kmq').global('KM').global('_kmil').option('apiKey', '').option('trackNamedPages', true).option('trackCategorizedPages', true).option('prefixProperties', true).tag('library', '<script src="//scripts.kissmetrics.com/{{ apiKey }}.2.js">'); exports.isMobile = navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/iPhone|iPod/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/Opera Mini/i) || navigator.userAgent.match(/IEMobile/i); KISSmetrics.prototype.initialize = function (page) { const self = this; window._kmq = []; if (exports.isMobile)push('set', { 'Mobile Session': 'Yes' }); this.load('library', function () { self.trackPage(page); self.ready() }) }; KISSmetrics.prototype.loaded = function () { return is.object(window.KM) }; KISSmetrics.prototype.page = function (page) { if (!window.KM_SKIP_PAGE_VIEW)window.KM.pageView(); this.trackPage(page) }; KISSmetrics.prototype.trackPage = function (page) { const category = page.category(); const name = page.fullName(); const opts = this.options; if (name && opts.trackNamedPages) { this.track(page.track(name)) } if (category && opts.trackCategorizedPages) { this.track(page.track(category)) } }; KISSmetrics.prototype.identify = function (identify) { const traits = identify.traits(); const id = identify.userId(); if (id)push('identify', id); if (traits)push('set', traits) }; KISSmetrics.prototype.track = function (track) { const mapping = { revenue: 'Billing Amount' }; const event = track.event(); let properties = track.properties(mapping); if (this.options.prefixProperties)properties = prefix(event, properties); push('record', event, properties) }; KISSmetrics.prototype.alias = function (alias) { push('alias', alias.to(), alias.from()) }; KISSmetrics.prototype.completedOrder = function (track) { const products = track.products(); const event = track.event(); push('record', event, prefix(event, track.properties())); window._kmq.push(function () { const km = window.KM; each(products, function (product, i) { const item = prefix(event, product); item._t = km.ts() + i; item._d = 1; km.set(item) }) }) }; function prefix (event, properties) { const prefixed = {}; each(properties, function (key, val) { if (key === 'Billing Amount') { prefixed[key] = val } else { prefixed[event + ' - ' + key] = val } }); return prefixed } }, { 'analytics.js-integration': 88, 'global-queue': 173, facade: 147, alias: 177, each: 4, is: 91 }],
  53: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_learnq'); const tick = require('next-tick'); const alias = require('alias'); const aliases = { id: '$id', email: '$email', firstName: '$first_name', lastName: '$last_name', phone: '$phone_number', title: '$title' }; const Klaviyo = module.exports = integration('Klaviyo').assumesPageview().global('_learnq').option('apiKey', '').tag('<script src="//a.klaviyo.com/media/js/learnmarklet.js">'); Klaviyo.prototype.initialize = function (page) { const self = this; push('account', this.options.apiKey); this.load(function () { tick(self.ready) }) }; Klaviyo.prototype.loaded = function () { return !!(window._learnq && window._learnq.push !== Array.prototype.push) }; Klaviyo.prototype.identify = function (identify) { const traits = identify.traits(aliases); if (!traits.$id && !traits.$email) return; push('identify', traits) }; Klaviyo.prototype.group = function (group) { const props = group.properties(); if (!props.name) return; push('identify', { $organization: props.name }) }; Klaviyo.prototype.track = function (track) { push('track', track.event(), track.properties({ revenue: '$value' })) } }, { 'analytics.js-integration': 88, 'global-queue': 173, 'next-tick': 103, alias: 177 }],
  54: [function (require, module, exports) { const integration = require('analytics.js-integration'); const clone = require('clone'); const each = require('each'); const Identify = require('facade').Identify; const when = require('when'); const LiveChat = module.exports = integration('LiveChat').assumesPageview().global('__lc').global('__lc_inited').global('LC_API').global('LC_Invite').option('group', 0).option('license', '').tag('<script src="//cdn.livechatinc.com/tracking.js">'); LiveChat.prototype.initialize = function (page) { const self = this; const user = this.analytics.user(); const identify = new Identify({ userId: user.id(), traits: user.traits() }); window.__lc = clone(this.options); window.__lc.visitor = { name: identify.name(), email: identify.email() }; this.load(function () { when(function () { return self.loaded() }, self.ready) }) }; LiveChat.prototype.loaded = function () { return !!(window.LC_API && window.LC_Invite) }; LiveChat.prototype.identify = function (identify) { const traits = identify.traits({ userId: 'User ID' }); window.LC_API.set_custom_variables(convert(traits)) }; function convert (traits) { const arr = []; each(traits, function (key, value) { arr.push({ name: key, value }) }); return arr } }, { 'analytics.js-integration': 88, clone: 95, each: 4, facade: 147, when: 146 }],
  55: [function (require, module, exports) { const integration = require('analytics.js-integration'); const Identify = require('facade').Identify; const useHttps = require('use-https'); const LuckyOrange = module.exports = integration('Lucky Orange').assumesPageview().global('_loq').global('__wtw_watcher_added').global('__wtw_lucky_site_id').global('__wtw_lucky_is_segment_io').global('__wtw_custom_user_data').option('siteId', null).tag('http', '<script src="http://www.luckyorange.com/w.js?{{ cache }}">').tag('https', '<script src="https://ssl.luckyorange.com/w.js?{{ cache }}">'); LuckyOrange.prototype.initialize = function (page) { const user = this.analytics.user(); window._loq || (window._loq = []); window.__wtw_lucky_site_id = this.options.siteId; this.identify(new Identify({ traits: user.traits(), userId: user.id() })); const cache = Math.floor((new Date()).getTime() / 6e4); const name = useHttps() ? 'https' : 'http'; this.load(name, { cache }, this.ready) }; LuckyOrange.prototype.loaded = function () { return !!window.__wtw_watcher_added }; LuckyOrange.prototype.identify = function (identify) { const traits = identify.traits(); const email = identify.email(); const name = identify.name(); if (name)traits.name = name; if (email)traits.email = email; window.__wtw_custom_user_data = traits } }, { 'analytics.js-integration': 88, facade: 147, 'use-https': 90 }],
  56: [function (require, module, exports) { const integration = require('analytics.js-integration'); const alias = require('alias'); const Lytics = module.exports = integration('Lytics').global('jstag').option('cid', '').option('cookie', 'seerid').option('delay', 2e3).option('sessionTimeout', 1800).option('url', '//c.lytics.io').tag('<script src="//c.lytics.io/static/io.min.js">'); const aliases = { sessionTimeout: 'sessecs' }; Lytics.prototype.initialize = function (page) { const options = alias(this.options, aliases); window.jstag = (function () { const t = { _q: [], _c: options, ts: (new Date()).getTime() }; t.send = function () { this._q.push(['ready', 'send', Array.prototype.slice.call(arguments)]); return this }; return t }()); this.load(this.ready) }; Lytics.prototype.loaded = function () { return !!(window.jstag && window.jstag.bind) }; Lytics.prototype.page = function (page) { window.jstag.send(page.properties()) }; Lytics.prototype.identify = function (identify) { const traits = identify.traits({ userId: '_uid' }); window.jstag.send(traits) }; Lytics.prototype.track = function (track) { const props = track.properties(); props._e = track.event(); window.jstag.send(props) } }, { 'analytics.js-integration': 88, alias: 177 }],
  57: [function (require, module, exports) { const alias = require('alias'); const clone = require('clone'); const dates = require('convert-dates'); const integration = require('analytics.js-integration'); const is = require('is'); const iso = require('to-iso-string'); const indexof = require('indexof'); const del = require('obj-case').del; const some = require('some'); const Mixpanel = module.exports = integration('Mixpanel').global('mixpanel').option('increments', []).option('cookieName', '').option('nameTag', true).option('pageview', false).option('people', false).option('token', '').option('trackAllPages', false).option('trackNamedPages', true).option('trackCategorizedPages', true).tag('<script src="//cdn.mxpnl.com/libs/mixpanel-2.2.min.js">'); const optionsAliases = { cookieName: 'cookie_name' }; Mixpanel.prototype.initialize = function () { (function (c, a) { window.mixpanel = a; let b, d, h, e; a._i = []; a.init = function (b, c, f) { function d (a, b) { const c = b.split('.'); c.length == 2 && (a = a[c[0]], b = c[1]); a[b] = function () { a.push([b].concat(Array.prototype.slice.call(arguments, 0))) } } let g = a; typeof f !== 'undefined' ? g = a[f] = [] : f = 'mixpanel'; g.people = g.people || []; h = ['disable', 'track', 'track_pageview', 'track_links', 'track_forms', 'register', 'register_once', 'unregister', 'identify', 'alias', 'name_tag', 'set_config', 'people.set', 'people.increment', 'people.track_charge', 'people.append']; for (e = 0; e < h.length; e++)d(g, h[e]); a._i.push([b, c, f]) }; a.__SV = 1.2 })(document, window.mixpanel || []); this.options.increments = lowercase(this.options.increments); const options = alias(this.options, optionsAliases); window.mixpanel.init(options.token, options); this.load(this.ready) }; Mixpanel.prototype.loaded = function () { return !!(window.mixpanel && window.mixpanel.config) }; Mixpanel.prototype.page = function (page) { const category = page.category(); const name = page.fullName(); const opts = this.options; if (opts.trackAllPages) { this.track(page.track()) } if (category && opts.trackCategorizedPages) { this.track(page.track(category)) } if (name && opts.trackNamedPages) { this.track(page.track(name)) } }; const traitAliases = { created: '$created', email: '$email', firstName: '$first_name', lastName: '$last_name', lastSeen: '$last_seen', name: '$name', username: '$username', phone: '$phone' }; Mixpanel.prototype.identify = function (identify) { const username = identify.username(); const email = identify.email(); const id = identify.userId(); if (id)window.mixpanel.identify(id); const nametag = email || username || id; if (nametag)window.mixpanel.name_tag(nametag); const traits = identify.traits(traitAliases); if (traits.$created)del(traits, 'createdAt'); window.mixpanel.register(dates(traits, iso)); if (this.options.people)window.mixpanel.people.set(traits) }; Mixpanel.prototype.track = function (track) { const increments = this.options.increments; const increment = track.event().toLowerCase(); const people = this.options.people; let props = track.properties(); const revenue = track.revenue(); delete props.distinct_id; delete props.ip; delete props.mp_name_tag; delete props.mp_note; delete props.token; for (const key in props) { const val = props[key]; if (is.array(val) && some(val, is.object))props[key] = val.length } if (people && ~indexof(increments, increment)) { window.mixpanel.people.increment(track.event()); window.mixpanel.people.set('Last ' + track.event(), new Date()) }props = dates(props, iso); window.mixpanel.track(track.event(), props); if (revenue && people) { window.mixpanel.people.track_charge(revenue) } }; Mixpanel.prototype.alias = function (alias) { const mp = window.mixpanel; const to = alias.to(); if (mp.get_distinct_id && mp.get_distinct_id() === to) return; if (mp.get_property && mp.get_property('$people_distinct_id') === to) return; mp.alias(to, alias.from()) }; function lowercase (arr) { const ret = new Array(arr.length); for (let i = 0; i < arr.length; ++i) { ret[i] = String(arr[i]).toLowerCase() } return ret } }, { alias: 177, clone: 95, 'convert-dates': 178, 'analytics.js-integration': 88, is: 91, 'to-iso-string': 176, indexof: 116, 'obj-case': 92, some: 188 }],
  188: [function (require, module, exports) { const some = [].some; module.exports = function (arr, fn) { if (some) return some.call(arr, fn); for (let i = 0, l = arr.length; i < l; ++i) { if (fn(arr[i], i)) return true } return false } }, {}],
  58: [function (require, module, exports) { const integration = require('analytics.js-integration'); const bind = require('bind'); const when = require('when'); const is = require('is'); const Mojn = module.exports = integration('Mojn').option('customerCode', '').global('_mojnTrack').tag('<script src="https://track.idtargeting.com/{{ customerCode }}/track.js">'); Mojn.prototype.initialize = function () { window._mojnTrack = window._mojnTrack || []; window._mojnTrack.push({ cid: this.options.customerCode }); const loaded = bind(this, this.loaded); const ready = this.ready; this.load(function () { when(loaded, ready) }) }; Mojn.prototype.loaded = function () { return is.object(window._mojnTrack) }; Mojn.prototype.identify = function (identify) { const email = identify.email(); if (!email) return; const img = new Image(); img.src = '//matcher.idtargeting.com/identify.gif?cid=' + this.options.customerCode + '&_mjnctid=' + email; img.width = 1; img.height = 1; return img }; Mojn.prototype.track = function (track) { const properties = track.properties(); const revenue = properties.revenue; const currency = properties.currency || ''; const conv = currency + revenue; if (!revenue) return; window._mojnTrack.push({ conv }); return conv } }, { 'analytics.js-integration': 88, bind: 101, when: 146, is: 91 }],
  59: [function (require, module, exports) { const push = require('global-queue')('_mfq'); const integration = require('analytics.js-integration'); const each = require('each'); const Mouseflow = module.exports = integration('Mouseflow').assumesPageview().global('mouseflow').global('_mfq').option('apiKey', '').option('mouseflowHtmlDelay', 0).tag('<script src="//cdn.mouseflow.com/projects/{{ apiKey }}.js">'); Mouseflow.prototype.initialize = function (page) { window.mouseflowHtmlDelay = this.options.mouseflowHtmlDelay; this.load(this.ready) }; Mouseflow.prototype.loaded = function () { return !!window.mouseflow }; Mouseflow.prototype.page = function (page) { if (!window.mouseflow) return; if (typeof mouseflow.newPageView !== 'function') return; mouseflow.newPageView() }; Mouseflow.prototype.identify = function (identify) { set(identify.traits()) }; Mouseflow.prototype.track = function (track) { const props = track.properties(); props.event = track.event(); set(props) }; function set (obj) { each(obj, function (key, value) { push('setVariable', key, value) }) } }, { 'global-queue': 173, 'analytics.js-integration': 88, each: 4 }],
  60: [function (require, module, exports) {
    const integration = require('analytics.js-integration'); const useHttps = require('use-https'); const each = require('each'); const is = require('is'); const MouseStats = module.exports = integration('MouseStats').assumesPageview().global('msaa').global('MouseStatsVisitorPlaybacks').option('accountNumber', '').tag('http', '<script src="http://www2.mousestats.com/js/{{ path }}.js?{{ cache }}">').tag('https', '<script src="https://ssl.mousestats.com/js/{{ path }}.js?{{ cache }}">')
    MouseStats.prototype.initialize = function (page) { const number = this.options.accountNumber; const path = number.slice(0, 1) + '/' + number.slice(1, 2) + '/' + number; const cache = Math.floor((new Date()).getTime() / 6e4); const name = useHttps() ? 'https' : 'http'; this.load(name, { path, cache }, this.ready) }; MouseStats.prototype.loaded = function () { return is.array(window.MouseStatsVisitorPlaybacks) }; MouseStats.prototype.identify = function (identify) { each(identify.traits(), function (key, value) { window.MouseStatsVisitorPlaybacks.customVariable(key, value) }) }
  }, { 'analytics.js-integration': 88, 'use-https': 90, each: 4, is: 91 }],
  61: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('__nls'); const Navilytics = module.exports = integration('Navilytics').assumesPageview().global('__nls').option('memberId', '').option('projectId', '').tag('<script src="//www.navilytics.com/nls.js?mid={{ memberId }}&pid={{ projectId }}">'); Navilytics.prototype.initialize = function (page) { window.__nls = window.__nls || []; this.load(this.ready) }; Navilytics.prototype.loaded = function () { return !!(window.__nls && [].push != window.__nls.push) }; Navilytics.prototype.track = function (track) { push('tagRecording', track.event()) } }, { 'analytics.js-integration': 88, 'global-queue': 173 }],
  62: [function (require, module, exports) { const integration = require('analytics.js-integration'); const alias = require('alias'); const Identify = require('facade').Identify; const Nudgespot = module.exports = integration('Nudgespot').assumesPageview().option('apiKey', '').global('nudgespot').tag('<script id="nudgespot" src="//cdn.nudgespot.com/nudgespot.js">'); Nudgespot.prototype.initialize = function (page) { window.nudgespot = window.nudgespot || []; window.nudgespot.init = function (n, t) { function f (n, m) { const a = m.split('.'); a.length == 2 && (n = n[a[0]], m = a[1]); n[m] = function () { n.push([m].concat(Array.prototype.slice.call(arguments, 0))) } }n._version = 0.1; n._globals = [t]; n.people = n.people || []; n.params = n.params || []; m = 'track register unregister identify set_config people.delete people.create people.update people.create_property people.tag people.remove_Tag'.split(' '); for (let i = 0; i < m.length; i++)f(n, m[i]) }; window.nudgespot.init(window.nudgespot, this.options.apiKey); this.load(this.ready) }; Nudgespot.prototype.loaded = function () { return !!window.nudgespot && window.nudgespot.push !== Array.prototype.push }; Nudgespot.prototype.identify = function (identify) { if (!identify.userId()) return this.debug('user id required'); let traits = identify.traits({ createdAt: 'created' }); traits = alias(traits, { created: 'created_at' }); window.nudgespot.identify(identify.userId(), traits) }; Nudgespot.prototype.track = function (track) { const properties = track.properties(); window.nudgespot.track(track.event(), properties) } }, { 'analytics.js-integration': 88, alias: 177, facade: 147 }],
  63: [function (require, module, exports) { const integration = require('analytics.js-integration'); const https = require('use-https'); const tick = require('next-tick'); const Olark = module.exports = integration('Olark').assumesPageview().global('olark').option('identify', true).option('page', true).option('siteId', '').option('groupId', '').option('track', false); Olark.prototype.initialize = function (page) { const self = this; this.load(function () { tick(self.ready) }); const groupId = this.options.groupId; if (groupId)api('chat.setOperatorGroup', { group: groupId }); api('box.onExpand', function () { self._open = true }); api('box.onShrink', function () { self._open = false }) }; Olark.prototype.loaded = function () { return !!window.olark }; Olark.prototype.load = function (callback) { const el = document.getElementById('olark'); window.olark || (function (c) { const f = window; const d = document; const l = https() ? 'https:' : 'http:'; const z = c.name; const r = 'load'; const nt = function () { f[z] = function () { (a.s = a.s || []).push(arguments) }; var a = f[z]._ = {}; let q = c.methods.length; while (q--) { (function (n) { f[z][n] = function () { f[z]('call', n, arguments) } })(c.methods[q]) }a.l = c.loader; a.i = nt; a.p = { 0: +new Date() }; a.P = function (u) { a.p[u] = new Date() - a.p[0] }; function s () { a.P(r); f[z](r) }f.addEventListener ? f.addEventListener(r, s, false) : f.attachEvent('on' + r, s); const ld = function () { function p (hd) { hd = 'head'; return ['<', hd, '></', hd, '><', i, ' onl' + 'oad="var d=', g, ";d.getElementsByTagName('head')[0].", j, '(d.', h, "('script')).", k, "='", l, '//', a.l, "'", '"', '></', i, '>'].join('') } var i = 'body'; const m = d[i]; if (!m) { return setTimeout(ld, 100) }a.P(1); var j = 'appendChild'; var h = 'createElement'; var k = 'src'; const n = d[h]('div'); const v = n[j](d[h](z)); const b = d[h]('iframe'); var g = 'document'; const e = 'domain'; let o; n.style.display = 'none'; m.insertBefore(n, m.firstChild).id = z; b.frameBorder = '0'; b.id = z + '-loader'; if (/MSIE[ ]+6/.test(navigator.userAgent)) { b.src = 'javascript:false' }b.allowTransparency = 'true'; v[j](b); try { b.contentWindow[g].open() } catch (w) { c[e] = d[e]; o = 'javascript:var d=' + g + ".open();d.domain='" + d.domain + "';"; b[k] = o + 'void(0);' } try { const t = b.contentWindow[g]; t.write(p()); t.close() } catch (x) { b[k] = o + 'd.write("' + p().replace(/"/g, String.fromCharCode(92) + '"') + '");d.close();' }a.P(2) }; ld() }; nt() }({ loader: 'static.olark.com/jsclient/loader0.js', name: 'olark', methods: ['configure', 'extend', 'declare', 'identify'] })); window.olark.identify(this.options.siteId); callback() }; Olark.prototype.page = function (page) { if (!this.options.page) return; const props = page.properties(); let name = page.fullName(); if (!name && !props.url) return; name = name ? name + ' page' : props.url; this.notify('looking at ' + name) }; Olark.prototype.identify = function (identify) { if (!this.options.identify) return; const username = identify.username(); const traits = identify.traits(); const id = identify.userId(); const email = identify.email(); const phone = identify.phone(); const name = identify.name() || identify.firstName(); if (traits)api('visitor.updateCustomFields', traits); if (email)api('visitor.updateEmailAddress', { emailAddress: email }); if (phone)api('visitor.updatePhoneNumber', { phoneNumber: phone }); if (name)api('visitor.updateFullName', { fullName: name }); let nickname = name || email || username || id; if (name && email)nickname += ' (' + email + ')'; if (nickname)api('chat.updateVisitorNickname', { snippet: nickname }) }; Olark.prototype.track = function (track) { if (!this.options.track) return; this.notify('visitor triggered "' + track.event() + '"') }; Olark.prototype.notify = function (message) { if (!this._open) return; message = message.toLowerCase(); api('visitor.getDetails', function (data) { if (!data || !data.isConversing) return; api('chat.sendNotificationToOperator', { body: message }) }) }; function api (action, value) { window.olark('api.' + action, value) } }, { 'analytics.js-integration': 88, 'use-https': 90, 'next-tick': 103 }],
  64: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('optimizely'); const callback = require('callback'); const tick = require('next-tick'); const bind = require('bind'); const each = require('each'); const Optimizely = module.exports = integration('Optimizely').option('variations', true).option('trackNamedPages', true).option('trackCategorizedPages', true); Optimizely.prototype.initialize = function () { if (this.options.variations) { const self = this; tick(function () { self.replay() }) } this.ready() }; Optimizely.prototype.track = function (track) { const props = track.properties(); if (props.revenue)props.revenue *= 100; push('trackEvent', track.event(), props) }; Optimizely.prototype.page = function (page) { const category = page.category(); const name = page.fullName(); const opts = this.options; if (category && opts.trackCategorizedPages) { this.track(page.track(category)) } if (name && opts.trackNamedPages) { this.track(page.track(name)) } }; Optimizely.prototype.replay = function () { if (!window.optimizely) return; const data = window.optimizely.data; if (!data) return; const experiments = data.experiments; const map = data.state.variationNamesMap; const traits = {}; each(map, function (experimentId, variation) { const experiment = experiments[experimentId].name; traits['Experiment: ' + experiment] = variation }); this.analytics.identify(traits) } }, { 'analytics.js-integration': 88, 'global-queue': 173, callback: 94, 'next-tick': 103, bind: 101, each: 4 }],
  65: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_pq'); const PerfectAudience = module.exports = integration('Perfect Audience').assumesPageview().global('_pq').option('siteId', '').tag('<script src="//tag.perfectaudience.com/serve/{{ siteId }}.js">'); PerfectAudience.prototype.initialize = function (page) { window._pq = window._pq || []; this.load(this.ready) }; PerfectAudience.prototype.loaded = function () { return !!(window._pq && window._pq.push) }; PerfectAudience.prototype.track = function (track) { const total = track.total() || track.revenue(); const orderId = track.orderId(); const props = {}; let sendProps = false; if (total) { props.revenue = total; sendProps = true } if (orderId) { props.orderId = orderId; sendProps = true } if (!sendProps) return push('track', track.event()); return push('track', track.event(), props) }; PerfectAudience.prototype.viewedProduct = function (track) { const product = track.sku(); push('track', track.event()); push('trackProduct', product) }; PerfectAudience.prototype.completedOrder = function (track) { const total = track.total() || track.revenue(); const orderId = track.orderId(); const props = {}; if (total)props.revenue = total; if (orderId)props.orderId = orderId; push('track', track.event(), props) } }, { 'analytics.js-integration': 88, 'global-queue': 173 }],
  66: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_prum'); const date = require('load-date'); const Pingdom = module.exports = integration('Pingdom').assumesPageview().global('_prum').global('PRUM_EPISODES').option('id', '').tag('<script src="//rum-static.pingdom.net/prum.min.js">'); Pingdom.prototype.initialize = function (page) { window._prum = window._prum || []; push('id', this.options.id); push('mark', 'firstbyte', date.getTime()); const self = this; this.load(this.ready) }; Pingdom.prototype.loaded = function () { return !!(window._prum && window._prum.push !== Array.prototype.push) } }, { 'analytics.js-integration': 88, 'global-queue': 173, 'load-date': 174 }],
  67: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_paq'); const each = require('each'); const is = require('is'); const Piwik = module.exports = integration('Piwik').global('_paq').option('url', null).option('siteId', '').option('customVariableLimit', 5).mapping('goals').tag('<script src="{{ url }}/piwik.js">'); Piwik.prototype.initialize = function () { window._paq = window._paq || []; push('setSiteId', this.options.siteId); push('setTrackerUrl', this.options.url + '/piwik.php'); push('enableLinkTracking'); this.load(this.ready) }; Piwik.prototype.loaded = function () { return !!(window._paq && window._paq.push != [].push) }; Piwik.prototype.page = function (page) { push('trackPageView') }; Piwik.prototype.track = function (track) { const goals = this.goals(track.event()); const revenue = track.revenue(); const category = track.category() || 'All'; const action = track.event(); const name = track.proxy('properties.name') || track.proxy('properties.label'); const value = track.value() || track.revenue(); const options = track.options('Piwik'); let customVariables = options.customVars || options.cvar; if (!is.object(customVariables)) { customVariables = {} } for (let i = 1; i <= this.options.customVariableLimit; i += 1) { if (customVariables[i]) { push('setCustomVariable', i.toString(), customVariables[i][0], customVariables[i][1], 'page') } }each(goals, function (goal) { push('trackGoal', goal, revenue) }); push('trackEvent', category, action, name, value) } }, { 'analytics.js-integration': 88, 'global-queue': 173, each: 4, is: 91 }],
  68: [function (require, module, exports) { const integration = require('analytics.js-integration'); const convertDates = require('convert-dates'); const push = require('global-queue')('_preactq'); const alias = require('alias'); const Preact = module.exports = integration('Preact').assumesPageview().global('_preactq').global('_lnq').option('projectCode', '').tag('<script src="//d2bbvl6dq48fa6.cloudfront.net/js/preact-4.1.min.js">'); Preact.prototype.initialize = function (page) { window._preactq = window._preactq || []; window._lnq = window._lnq || []; push('_setCode', this.options.projectCode); this.load(this.ready) }; Preact.prototype.loaded = function () { return !!(window._preactq && window._preactq.push !== Array.prototype.push) }; Preact.prototype.identify = function (identify) { if (!identify.userId()) return; let traits = identify.traits({ created: 'created_at' }); traits = convertDates(traits, convertDate); push('_setPersonData', { name: identify.name(), email: identify.email(), uid: identify.userId(), properties: traits }) }; Preact.prototype.group = function (group) { if (!group.groupId()) return; push('_setAccount', group.traits()) }; Preact.prototype.track = function (track) { const props = track.properties(); const revenue = track.revenue(); const event = track.event(); const special = { name: event }; if (revenue) { special.revenue = revenue * 100; delete props.revenue } if (props.note) { special.note = props.note; delete props.note }push('_logEvent', special, props) }; function convertDate (date) { return Math.floor(date / 1e3) } }, { 'analytics.js-integration': 88, 'convert-dates': 178, 'global-queue': 173, alias: 177 }],
  69: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_kiq'); const Facade = require('facade'); const Identify = Facade.Identify; const bind = require('bind'); const when = require('when'); const Qualaroo = module.exports = integration('Qualaroo').assumesPageview().global('_kiq').option('customerId', '').option('siteToken', '').option('track', false).tag('<script src="//s3.amazonaws.com/ki.js/{{ customerId }}/{{ siteToken }}.js">'); Qualaroo.prototype.initialize = function (page) { window._kiq = window._kiq || []; const loaded = bind(this, this.loaded); const ready = this.ready; this.load(function () { when(loaded, ready) }) }; Qualaroo.prototype.loaded = function () { return !!(window._kiq && window._kiq.push !== Array.prototype.push) }; Qualaroo.prototype.identify = function (identify) { const traits = identify.traits(); let id = identify.userId(); const email = identify.email(); if (email)id = email; if (id)push('identify', id); if (traits)push('set', traits) }; Qualaroo.prototype.track = function (track) { if (!this.options.track) return; const event = track.event(); const traits = {}; traits['Triggered: ' + event] = true; this.identify(new Identify({ traits })) } }, { 'analytics.js-integration': 88, 'global-queue': 173, facade: 147, bind: 101, when: 146 }],
  70: [function (require, module, exports) { const push = require('global-queue')('_qevents', { wrap: false }); const integration = require('analytics.js-integration'); const useHttps = require('use-https'); const is = require('is'); const reduce = require('reduce'); const Quantcast = module.exports = integration('Quantcast').assumesPageview().global('_qevents').global('__qc').option('pCode', null).option('advertise', false).tag('http', '<script src="http://edge.quantserve.com/quant.js">').tag('https', '<script src="https://secure.quantserve.com/quant.js">'); Quantcast.prototype.initialize = function (page) { window._qevents = window._qevents || []; const opts = this.options; const settings = { qacct: opts.pCode }; const user = this.analytics.user(); if (user.id())settings.uid = user.id(); if (page) { settings.labels = this._labels('page', page.category(), page.name()) }push(settings); const name = useHttps() ? 'https' : 'http'; this.load(name, this.ready) }; Quantcast.prototype.loaded = function () { return !!window.__qc }; Quantcast.prototype.page = function (page) { const category = page.category(); const name = page.name(); const customLabels = page.proxy('properties.label'); const labels = this._labels('page', category, name, customLabels); const settings = { event: 'refresh', labels, qacct: this.options.pCode }; const user = this.analytics.user(); if (user.id())settings.uid = user.id(); push(settings) }; Quantcast.prototype.identify = function (identify) { const id = identify.userId(); if (id) { window._qevents[0] = window._qevents[0] || {}; window._qevents[0].uid = id } }; Quantcast.prototype.track = function (track) { const name = track.event(); const revenue = track.revenue(); const orderId = track.orderId(); const customLabels = track.proxy('properties.label'); const labels = this._labels('event', name, customLabels); const settings = { event: 'click', labels, qacct: this.options.pCode }; const user = this.analytics.user(); if (revenue != null)settings.revenue = revenue + ''; if (orderId)settings.orderid = orderId; if (user.id())settings.uid = user.id(); push(settings) }; Quantcast.prototype.completedOrder = function (track) { const name = track.event(); const revenue = track.total(); const customLabels = track.proxy('properties.label'); let labels = this._labels('event', name, customLabels); const category = track.category(); if (this.options.advertise && category) { labels += ',' + this._labels('pcat', category) } const settings = { event: 'refresh', labels, revenue: revenue + '', orderid: track.orderId(), qacct: this.options.pCode }; push(settings) }; Quantcast.prototype._labels = function (type) { const args = Array.prototype.slice.call(arguments, 1); const advertise = this.options.advertise; if (advertise && type == 'page')type = 'event'; if (advertise)type = '_fp.' + type; const separator = advertise ? ' ' : '.'; const ret = reduce(args, function (ret, arg) { if (arg != null) { ret.push(String(arg).replace(/, /g, ',')) } return ret }, []).join(separator); return [type, ret].join('.') } }, { 'global-queue': 173, 'analytics.js-integration': 88, 'use-https': 90, is: 91, reduce: 189 }],
  189: [function (require, module, exports) { module.exports = function (arr, fn, initial) { let idx = 0; const len = arr.length; let curr = arguments.length == 3 ? initial : arr[idx++]; while (idx < len) { curr = fn.call(null, curr, arr[idx], ++idx, arr) } return curr } }, {}],
  71: [function (require, module, exports) { const integration = require('analytics.js-integration'); const extend = require('extend'); const is = require('is'); const RollbarIntegration = module.exports = integration('Rollbar').global('Rollbar').option('identify', true).option('accessToken', '').option('environment', 'unknown').option('captureUncaught', true); RollbarIntegration.prototype.initialize = function (page) { const _rollbarConfig = this.config = { accessToken: this.options.accessToken, captureUncaught: this.options.captureUncaught, payload: { environment: this.options.environment } }; (function (a, b) { function c (b) { this.shimId = ++h, this.notifier = null, this.parentShim = b, this.logger = function () {}, a.console && void 0 === a.console.shimId && (this.logger = a.console.log) } function d (b, c, d) { a._rollbarWrappedError && (d[4] || (d[4] = a._rollbarWrappedError), d[5] || (d[5] = a._rollbarWrappedError._rollbarContext), a._rollbarWrappedError = null), b.uncaughtError.apply(b, d), c && c.apply(a, d) } function e (b) { const d = c; return g(function () { if (this.notifier) return this.notifier[b].apply(this.notifier, arguments); let c = this; const e = b === 'scope'; e && (c = new d(this)); const f = Array.prototype.slice.call(arguments, 0); const g = { shim: c, method: b, args: f, ts: new Date() }; return a._rollbarShimQueue.push(g), e ? c : void 0 }) } function f (a, b) { if (b.hasOwnProperty && b.hasOwnProperty('addEventListener')) { const c = b.addEventListener; b.addEventListener = function (b, d, e) { c.call(this, b, a.wrap(d), e) }; const d = b.removeEventListener; b.removeEventListener = function (a, b, c) { d.call(this, a, b && b._wrapped ? b._wrapped : b, c) } } } function g (a, b) { return b = b || this.logger, function () { try { return a.apply(this, arguments) } catch (c) { b('Rollbar internal error:', c) } } } var h = 0; c.init = function (a, b) { const e = b.globalAlias || 'Rollbar'; if (typeof a[e] === 'object') return a[e]; a._rollbarShimQueue = [], a._rollbarWrappedError = null, b = b || {}; const h = new c(); return g(function () { if (h.configure(b), b.captureUncaught) { const c = a.onerror; a.onerror = function () { const a = Array.prototype.slice.call(arguments, 0); d(h, c, a) }; let g; let i; const j = 'EventTarget,Window,Node,ApplicationCache,AudioTrackList,ChannelMergerNode,CryptoOperation,EventSource,FileReader,HTMLUnknownElement,IDBDatabase,IDBRequest,IDBTransaction,KeyOperation,MediaController,MessagePort,ModalWindow,Notification,SVGElementInstance,Screen,TextTrack,TextTrackCue,TextTrackList,WebSocket,WebSocketWorker,Worker,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload'.split(','); for (g = 0; g < j.length; ++g)i = j[g], a[i] && a[i].prototype && f(h, a[i].prototype) } return a[e] = h, h }, h.logger)() }, c.prototype.loadFull = function (a, b, c, d, e) { const f = g(function () { const a = b.createElement('script'); const e = b.getElementsByTagName('script')[0]; a.src = d.rollbarJsUrl, a.async = !c, a.onload = h, e.parentNode.insertBefore(a, e) }, this.logger); var h = g(function () { let b; if (void 0 === a._rollbarPayloadQueue) { let c, d, f, g; for (b = new Error('rollbar.js did not load'); c = a._rollbarShimQueue.shift();) for (f = c.args, g = 0; g < f.length; ++g) if (d = f[g], typeof d === 'function') { d(b); break } } typeof e === 'function' && e(b) }, this.logger); g(function () { c ? f() : a.addEventListener ? a.addEventListener('load', f, !1) : a.attachEvent('onload', f) }, this.logger)() }, c.prototype.wrap = function (b, c) { try { let d; if (d = typeof c === 'function' ? c : function () { return c || {} }, typeof b !== 'function') return b; if (b._isWrap) return b; if (!b._wrapped) { b._wrapped = function () { try { return b.apply(this, arguments) } catch (c) { throw c._rollbarContext = d(), c._rollbarContext._wrappedSource = b.toString(), a._rollbarWrappedError = c, c } }, b._wrapped._isWrap = !0; for (const e in b)b.hasOwnProperty(e) && (b._wrapped[e] = b[e]) } return b._wrapped } catch (f) { return b } }; for (let i = 'log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError'.split(','), j = 0; j < i.length; ++j)c.prototype[i[j]] = e(i[j]); const k = '//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js'; _rollbarConfig.rollbarJsUrl = _rollbarConfig.rollbarJsUrl || k; const l = c.init(a, _rollbarConfig) })(window, document); this.load(this.ready) }; RollbarIntegration.prototype.loaded = function () { return is.object(window.Rollbar) && window.Rollbar.shimId == null }; RollbarIntegration.prototype.load = function (callback) { window.Rollbar.loadFull(window, document, true, this.config, callback) }; RollbarIntegration.prototype.identify = function (identify) { if (!this.options.identify) return; const uid = identify.userId(); if (uid === null || uid === undefined) return; const rollbar = window.Rollbar; const person = { id: uid }; extend(person, identify.traits()); rollbar.configure({ payload: { person } }) } }, { 'analytics.js-integration': 88, extend: 145, is: 91 }],
  72: [function (require, module, exports) { const integration = require('analytics.js-integration'); const SaaSquatch = module.exports = integration('SaaSquatch').option('tenantAlias', '').option('referralImage', '').global('_sqh').tag('<script src="//d2rcp9ak152ke1.cloudfront.net/assets/javascripts/squatch.min.js">'); SaaSquatch.prototype.initialize = function (page) { window._sqh = window._sqh || []; this.load(this.ready) }; SaaSquatch.prototype.loaded = function () { return window._sqh && window._sqh.push != [].push }; SaaSquatch.prototype.identify = function (identify) { const sqh = window._sqh; const accountId = identify.proxy('traits.accountId'); const image = identify.proxy('traits.referralImage') || this.options.referralImage; const opts = identify.options(this.name); const id = identify.userId(); const email = identify.email(); if (!(id || email)) return; if (this.called) return; const init = { tenant_alias: this.options.tenantAlias, first_name: identify.firstName(), last_name: identify.lastName(), user_image: identify.avatar(), email, user_id: id }; if (accountId)init.account_id = accountId; if (opts.checksum)init.checksum = opts.checksum; if (image)init.fb_share_image = image; sqh.push(['init', init]); this.called = true; this.load() }; SaaSquatch.prototype.group = function (group) { const sqh = window._sqh; const props = group.properties(); const id = group.groupId(); const image = group.proxy('traits.referralImage') || this.options.referralImage; const opts = group.options(this.name); if (this.called) return; const init = { tenant_alias: this.options.tenantAlias, account_id: id }; if (opts.checksum)init.checksum = opts.checksum; if (image)init.fb_share_image = image; sqh.push(['init', init]); this.called = true; this.load() } }, { 'analytics.js-integration': 88 }],
  73: [function (require, module, exports) { const integration = require('analytics.js-integration'); const when = require('when'); const SatisMeter = module.exports = integration('SatisMeter').global('satismeter').option('token', '').tag('<script src="https://app.satismeter.com/satismeter.js">'); SatisMeter.prototype.initialize = function (page) { const self = this; this.load(function () { when(function () { return self.loaded() }, self.ready) }) }; SatisMeter.prototype.loaded = function () { return !!window.satismeter }; SatisMeter.prototype.identify = function (identify) { const traits = identify.traits(); traits.token = this.options.token; traits.user = { id: identify.userId() }; if (identify.name()) { traits.user.name = identify.name() } if (identify.email()) { traits.user.email = identify.email() } if (identify.created()) { traits.user.signUpDate = identify.created().toISOString() } delete traits.id; delete traits.email; delete traits.name; delete traits.created; window.satismeter(traits) } }, { 'analytics.js-integration': 88, when: 146 }],
  74: [function (require, module, exports) { const integration = require('analytics.js-integration'); const localstorage = require('store'); const protocol = require('protocol'); const utm = require('utm-params'); const ads = require('ad-params'); const send = require('send-json'); const cookie = require('cookie'); const clone = require('clone'); const uuid = require('uuid'); const top = require('top-domain'); const extend = require('extend'); const json = require('segmentio/json@1.0.0'); const options = { maxage: 31536e6, secure: false, path: '/' }; const Segment = exports = module.exports = integration('Segment.io').option('apiKey', ''); exports.storage = function () { return protocol() == 'file:' || protocol() == 'chrome-extension:' ? localstorage : cookie }; exports.global = window; Segment.prototype.initialize = function (page) { const self = this; this.ready(); this.analytics.on('invoke', function (msg) { const action = msg.action(); const listener = 'on' + msg.action(); self.debug('%s %o', action, msg); if (self[listener])self[listener](msg); self.ready() }) }; Segment.prototype.loaded = function () { return true }; Segment.prototype.onpage = function (page) { this.send('/p', page.json()) }; Segment.prototype.onidentify = function (identify) { this.send('/i', identify.json()) }; Segment.prototype.ongroup = function (group) { this.send('/g', group.json()) }; Segment.prototype.ontrack = function (track) { const json = track.json(); delete json.traits; this.send('/t', json) }; Segment.prototype.onalias = function (alias) { const json = alias.json(); const user = this.analytics.user(); json.previousId = json.previousId || json.from || user.id() || user.anonymousId(); json.userId = json.userId || json.to; delete json.from; delete json.to; this.send('/a', json) }; Segment.prototype.normalize = function (msg) { this.debug('normalize %o', msg); const user = this.analytics.user(); const global = exports.global; const query = global.location.search; const ctx = msg.context = msg.context || msg.options || {}; delete msg.options; msg.writeKey = this.options.apiKey; ctx.userAgent = navigator.userAgent; if (!ctx.library)ctx.library = { name: 'analytics.js', version: this.analytics.VERSION }; if (query)ctx.campaign = utm(query); this.referrerId(query, ctx); msg.userId = msg.userId || user.id(); msg.anonymousId = user.anonymousId(); msg.messageId = uuid(); msg.sentAt = new Date(); this.debug('normalized %o', msg); return msg }; Segment.prototype.send = function (path, msg, fn) { const url = scheme() + '//api.segment.io/v1' + path; const headers = { 'Content-Type': 'text/plain' }; var fn = fn || noop; const self = this; msg = this.normalize(msg); send(url, msg, headers, function (err, res) { self.debug('sent %O, received %O', msg, arguments); if (err) return fn(err); res.url = url; fn(null, res) }) }; Segment.prototype.cookie = function (name, val) { const store = Segment.storage(); if (arguments.length === 1) return store(name); const global = exports.global; const href = global.location.href; let domain = '.' + top(href); if (domain == '.')domain = ''; this.debug('store domain %s -> %s', href, domain); const opts = clone(options); opts.domain = domain; this.debug('store %s, %s, %o', name, val, opts); store(name, val, opts); if (store(name)) return; delete opts.domain; this.debug('fallback store %s, %s, %o', name, val, opts); store(name, val, opts) }; Segment.prototype.referrerId = function (query, ctx) { let stored = this.cookie('s:context.referrer'); let ad; if (stored)stored = json.parse(stored); if (query)ad = ads(query); ad = ad || stored; if (!ad) return; ctx.referrer = extend(ctx.referrer || {}, ad); this.cookie('s:context.referrer', json.stringify(ad)) }; function scheme () { return protocol() == 'http:' ? 'http:' : 'https:' } function noop () {} }, { 'analytics.js-integration': 88, store: 190, protocol: 191, 'utm-params': 138, 'ad-params': 192, 'send-json': 193, cookie: 194, clone: 95, uuid: 195, 'top-domain': 139, extend: 145, 'segmentio/json@1.0.0': 179 }],
  190: [function (require, module, exports) { const unserialize = require('unserialize'); const each = require('each'); let storage; try { storage = window.localStorage } catch (e) { storage = null }module.exports = store; function store (key, value) { const length = arguments.length; if (length == 0) return all(); if (length >= 2) return set(key, value); if (length != 1) return; if (key == null) return storage.clear(); if (typeof key === 'string') return get(key); if (typeof key === 'object') return each(key, set) }store.supported = !!storage; function set (key, val) { return val == null ? storage.removeItem(key) : storage.setItem(key, JSON.stringify(val)) } function get (key) { return unserialize(storage.getItem(key)) } function all () { let len = storage.length; const ret = {}; let key; while (--len >= 0) { key = storage.key(len); ret[key] = get(key) } return ret } }, { unserialize: 196, each: 112 }],
  196: [function (require, module, exports) { module.exports = function (val) { try { return JSON.parse(val) } catch (e) { return val || undefined } } }, {}],
  191: [function (require, module, exports) { const define = Object.defineProperty; const initialProtocol = window.location.protocol; let mockedProtocol; module.exports = function (protocol) { if (arguments.length === 0) return get(); else return set(protocol) }; module.exports.http = function () { set('http:') }; module.exports.https = function () { set('https:') }; module.exports.reset = function () { set(initialProtocol) }; function get () { return mockedProtocol || window.location.protocol } function set (protocol) { try { define(window.location, 'protocol', { get: function () { return protocol } }) } catch (err) { mockedProtocol = protocol } } }, {}],
  192: [function (require, module, exports) { const parse = require('querystring').parse; module.exports = ads; const QUERYIDS = { btid: 'dataxu', urid: 'millennial-media' }; function ads (query) { const params = parse(query); for (const key in params) { for (const id in QUERYIDS) { if (key === id) { return { id: params[key], type: QUERYIDS[id] } } } } } }, { querystring: 140 }],
  193: [function (require, module, exports) { const encode = require('base64-encode'); const cors = require('has-cors'); const jsonp = require('jsonp'); const JSON = require('json'); exports = module.exports = cors ? json : base64; exports.callback = 'callback'; exports.prefix = 'data'; exports.json = json; exports.base64 = base64; exports.type = cors ? 'xhr' : 'jsonp'; function json (url, obj, headers, fn) { if (arguments.length == 3)fn = headers, headers = {}; const req = new XMLHttpRequest(); req.onerror = fn; req.onreadystatechange = done; req.open('POST', url, true); for (const k in headers)req.setRequestHeader(k, headers[k]); req.send(JSON.stringify(obj)); function done () { if (req.readyState == 4) return fn(null, req) } } function base64 (url, obj, _, fn) { if (arguments.length == 3)fn = _; const prefix = exports.prefix; obj = encode(JSON.stringify(obj)); obj = encodeURIComponent(obj); url += '?' + prefix + '=' + obj; jsonp(url, { param: exports.callback }, function (err, obj) { if (err) return fn(err); fn(null, { url, body: obj }) }) } }, { 'base64-encode': 197, 'has-cors': 198, jsonp: 199, json: 179 }],
  197: [function (require, module, exports) { const utf8Encode = require('utf8-encode'); const keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='; module.exports = encode; function encode (input) { let output = ''; let chr1, chr2, chr3, enc1, enc2, enc3, enc4; let i = 0; input = utf8Encode(input); while (i < input.length) { chr1 = input.charCodeAt(i++); chr2 = input.charCodeAt(i++); chr3 = input.charCodeAt(i++); enc1 = chr1 >> 2; enc2 = (chr1 & 3) << 4 | chr2 >> 4; enc3 = (chr2 & 15) << 2 | chr3 >> 6; enc4 = chr3 & 63; if (isNaN(chr2)) { enc3 = enc4 = 64 } else if (isNaN(chr3)) { enc4 = 64 }output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4) } return output } }, { 'utf8-encode': 200 }],
  200: [function (require, module, exports) { module.exports = encode; function encode (string) { string = string.replace(/\r\n/g, '\n'); let utftext = ''; for (let n = 0; n < string.length; n++) { const c = string.charCodeAt(n); if (c < 128) { utftext += String.fromCharCode(c) } else if (c > 127 && c < 2048) { utftext += String.fromCharCode(c >> 6 | 192); utftext += String.fromCharCode(c & 63 | 128) } else { utftext += String.fromCharCode(c >> 12 | 224); utftext += String.fromCharCode(c >> 6 & 63 | 128); utftext += String.fromCharCode(c & 63 | 128) } } return utftext } }, {}],
  198: [function (require, module, exports) { try { module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest() } catch (err) { module.exports = false } }, {}],
  199: [function (require, module, exports) {
    const debug = require('debug')('jsonp'); module.exports = jsonp; let count = 0; function noop () {} function jsonp (url, opts, fn) {
      if (typeof opts === 'function') { fn = opts; opts = {} } if (!opts)opts = {}; const prefix = opts.prefix || '__jp'; const param = opts.param || 'callback'; const timeout = opts.timeout != null ? opts.timeout : 6e4; const enc = encodeURIComponent; const target = document.getElementsByTagName('script')[0] || document.head; let script; let timer; const id = prefix + count++; if (timeout) {
        timer = setTimeout(function () {
          cleanup()
          if (fn)fn(new Error('Timeout'))
        }, timeout)
      } function cleanup () { script.parentNode.removeChild(script); window[id] = noop }window[id] = function (data) { debug('jsonp got', data); if (timer)clearTimeout(timer); cleanup(); if (fn)fn(null, data) }; url += (~url.indexOf('?') ? '&' : '?') + param + '=' + enc(id); url = url.replace('?&', '?'); debug('jsonp req "%s"', url); script = document.createElement('script'); script.src = url; target.parentNode.insertBefore(script, target)
    }
  }, { debug: 201 }],
  201: [function (require, module, exports) { if (typeof window === 'undefined') { module.exports = require('./lib/debug') } else { module.exports = require('./debug') } }, { './lib/debug': 202, './debug': 203 }],
  202: [function (require, module, exports) { const tty = require('tty'); module.exports = debug; const names = []; const skips = []; (process.env.DEBUG || '').split(/[\s,]+/).forEach(function (name) { name = name.replace('*', '.*?'); if (name[0] === '-') { skips.push(new RegExp('^' + name.substr(1) + '$')) } else { names.push(new RegExp('^' + name + '$')) } }); const colors = [6, 2, 3, 4, 5, 1]; const prev = {}; let prevColor = 0; const isatty = tty.isatty(2); function color () { return colors[prevColor++ % colors.length] } function humanize (ms) { const sec = 1e3; const min = 60 * 1e3; const hour = 60 * min; if (ms >= hour) return (ms / hour).toFixed(1) + 'h'; if (ms >= min) return (ms / min).toFixed(1) + 'm'; if (ms >= sec) return (ms / sec | 0) + 's'; return ms + 'ms' } function debug (name) { function disabled () {}disabled.enabled = false; let match = skips.some(function (re) { return re.test(name) }); if (match) return disabled; match = names.some(function (re) { return re.test(name) }); if (!match) return disabled; const c = color(); function colored (fmt) { fmt = coerce(fmt); const curr = new Date(); const ms = curr - (prev[name] || curr); prev[name] = curr; fmt = '  [9' + c + 'm' + name + ' ' + '[3' + c + 'm[90m' + fmt + '[3' + c + 'm' + ' +' + humanize(ms) + '[0m'; console.error.apply(this, arguments) } function plain (fmt) { fmt = coerce(fmt); fmt = (new Date()).toUTCString() + ' ' + name + ' ' + fmt; console.error.apply(this, arguments) }colored.enabled = plain.enabled = true; return isatty || process.env.DEBUG_COLORS ? colored : plain } function coerce (val) { if (val instanceof Error) return val.stack || val.message; return val } }, {}],
  203: [function (require, module, exports) { module.exports = debug; function debug (name) { if (!debug.enabled(name)) return function () {}; return function (fmt) { fmt = coerce(fmt); const curr = new Date(); const ms = curr - (debug[name] || curr); debug[name] = curr; fmt = name + ' ' + fmt + ' +' + debug.humanize(ms); window.console && console.log && Function.prototype.apply.call(console.log, console, arguments) } }debug.names = []; debug.skips = []; debug.enable = function (name) { try { localStorage.debug = name } catch (e) {} const split = (name || '').split(/[\s,]+/); const len = split.length; for (let i = 0; i < len; i++) { name = split[i].replace('*', '.*?'); if (name[0] === '-') { debug.skips.push(new RegExp('^' + name.substr(1) + '$')) } else { debug.names.push(new RegExp('^' + name + '$')) } } }; debug.disable = function () { debug.enable('') }; debug.humanize = function (ms) { const sec = 1e3; const min = 60 * 1e3; const hour = 60 * min; if (ms >= hour) return (ms / hour).toFixed(1) + 'h'; if (ms >= min) return (ms / min).toFixed(1) + 'm'; if (ms >= sec) return (ms / sec | 0) + 's'; return ms + 'ms' }; debug.enabled = function (name) { for (var i = 0, len = debug.skips.length; i < len; i++) { if (debug.skips[i].test(name)) { return false } } for (var i = 0, len = debug.names.length; i < len; i++) { if (debug.names[i].test(name)) { return true } } return false }; function coerce (val) { if (val instanceof Error) return val.stack || val.message; return val } try { if (window.localStorage)debug.enable(localStorage.debug) } catch (e) {} }, {}],
  194: [function (require, module, exports) { const debug = require('debug')('cookie'); module.exports = function (name, value, options) { switch (arguments.length) { case 3:case 2:return set(name, value, options); case 1:return get(name); default:return all() } }; function set (name, value, options) { options = options || {}; let str = encode(name) + '=' + encode(value); if (value == null)options.maxage = -1; if (options.maxage) { options.expires = new Date(+new Date() + options.maxage) } if (options.path)str += '; path=' + options.path; if (options.domain)str += '; domain=' + options.domain; if (options.expires)str += '; expires=' + options.expires.toUTCString(); if (options.secure)str += '; secure'; document.cookie = str } function all () { return parse(document.cookie) } function get (name) { return all()[name] } function parse (str) { const obj = {}; const pairs = str.split(/ *; */); let pair; if (pairs[0] == '') return obj; for (let i = 0; i < pairs.length; ++i) { pair = pairs[i].split('='); obj[decode(pair[0])] = decode(pair[1]) } return obj } function encode (value) { try { return encodeURIComponent(value) } catch (e) { debug('error `encode(%o)` - %o', value, e) } } function decode (value) { try { return decodeURIComponent(value) } catch (e) { debug('error `decode(%o)` - %o', value, e) } } }, { debug: 201 }],
  195: [function (require, module, exports) { module.exports = function uuid (a) { return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid) } }, {}],
  75: [function (require, module, exports) { const integration = require('analytics.js-integration'); const is = require('is'); const Sentry = module.exports = integration('Sentry').global('Raven').option('config', '').tag('<script src="//cdn.ravenjs.com/1.1.16/native/raven.min.js">'); Sentry.prototype.initialize = function () { const dsn = this.options.config; window.RavenConfig = { dsn }; this.load(this.ready) }; Sentry.prototype.loaded = function () { return is.object(window.Raven) }; Sentry.prototype.identify = function (identify) { window.Raven.setUser(identify.traits()) } }, { 'analytics.js-integration': 88, is: 91 }],
  76: [function (require, module, exports) { const integration = require('analytics.js-integration'); const is = require('is'); const SnapEngage = module.exports = integration('SnapEngage').assumesPageview().global('SnapABug').option('apiKey', '').tag('<script src="//commondatastorage.googleapis.com/code.snapengage.com/js/{{ apiKey }}.js">'); SnapEngage.prototype.initialize = function (page) { this.load(this.ready) }; SnapEngage.prototype.loaded = function () { return is.object(window.SnapABug) }; SnapEngage.prototype.identify = function (identify) { const email = identify.email(); if (!email) return; window.SnapABug.setUserEmail(email) } }, { 'analytics.js-integration': 88, is: 91 }],
  77: [function (require, module, exports) { const integration = require('analytics.js-integration'); const bind = require('bind'); const when = require('when'); const Spinnakr = module.exports = integration('Spinnakr').assumesPageview().global('_spinnakr_site_id').global('_spinnakr').option('siteId', '').tag('<script src="//d3ojzyhbolvoi5.cloudfront.net/js/so.js">'); Spinnakr.prototype.initialize = function (page) { window._spinnakr_site_id = this.options.siteId; const loaded = bind(this, this.loaded); const ready = this.ready; this.load(function () { when(loaded, ready) }) }; Spinnakr.prototype.loaded = function () { return !!window._spinnakr } }, { 'analytics.js-integration': 88, bind: 101, when: 146 }],
  78: [function (require, module, exports) { const integration = require('analytics.js-integration'); const slug = require('slug'); const push = require('global-queue')('_tsq'); const Tapstream = module.exports = integration('Tapstream').assumesPageview().global('_tsq').option('accountName', '').option('trackAllPages', true).option('trackNamedPages', true).option('trackCategorizedPages', true).tag('<script src="//cdn.tapstream.com/static/js/tapstream.js">'); Tapstream.prototype.initialize = function (page) { window._tsq = window._tsq || []; push('setAccountName', this.options.accountName); this.load(this.ready) }; Tapstream.prototype.loaded = function () { return !!(window._tsq && window._tsq.push !== Array.prototype.push) }; Tapstream.prototype.page = function (page) { const category = page.category(); const opts = this.options; const name = page.fullName(); if (opts.trackAllPages) { this.track(page.track()) } if (name && opts.trackNamedPages) { this.track(page.track(name)) } if (category && opts.trackCategorizedPages) { this.track(page.track(category)) } }; Tapstream.prototype.track = function (track) { const props = track.properties(); push('fireHit', slug(track.event()), [props.url]) } }, { 'analytics.js-integration': 88, slug: 99, 'global-queue': 173 }],
  79: [function (require, module, exports) { const integration = require('analytics.js-integration'); const alias = require('alias'); const clone = require('clone'); const Trakio = module.exports = integration('trak.io').assumesPageview().global('trak').option('token', '').option('trackNamedPages', true).option('trackCategorizedPages', true).tag('<script src="//d29p64779x43zo.cloudfront.net/v1/trak.io.min.js">'); const optionsAliases = { initialPageview: 'auto_track_page_view' }; Trakio.prototype.initialize = function (page) { const options = this.options; window.trak = window.trak || []; window.trak.io = window.trak.io || {}; window.trak.push = window.trak.push || function () {}; window.trak.io.load = window.trak.io.load || function (e) { const r = function (e) { return function () { window.trak.push([e].concat(Array.prototype.slice.call(arguments, 0))) } }; const i = ['initialize', 'identify', 'track', 'alias', 'channel', 'source', 'host', 'protocol', 'page_view']; for (let s = 0; s < i.length; s++)window.trak.io[i[s]] = r(i[s]); window.trak.io.initialize.apply(window.trak.io, arguments) }; window.trak.io.load(options.token, alias(options, optionsAliases)); this.load(this.ready) }; Trakio.prototype.loaded = function () { return !!(window.trak && window.trak.loaded) }; Trakio.prototype.page = function (page) { const category = page.category(); const props = page.properties(); const name = page.fullName(); window.trak.io.page_view(props.path, name || props.title); if (name && this.options.trackNamedPages) { this.track(page.track(name)) } if (category && this.options.trackCategorizedPages) { this.track(page.track(category)) } }; const traitAliases = { avatar: 'avatar_url', firstName: 'first_name', lastName: 'last_name' }; Trakio.prototype.identify = function (identify) { const traits = identify.traits(traitAliases); const id = identify.userId(); if (id) { window.trak.io.identify(id, traits) } else { window.trak.io.identify(traits) } }; Trakio.prototype.track = function (track) { window.trak.io.track(track.event(), track.properties()) }; Trakio.prototype.alias = function (alias) { if (!window.trak.io.distinct_id) return; const from = alias.from(); const to = alias.to(); if (to === window.trak.io.distinct_id()) return; if (from) { window.trak.io.alias(from, to) } else { window.trak.io.alias(to) } } }, { 'analytics.js-integration': 88, alias: 177, clone: 95 }],
  80: [function (require, module, exports) { const integration = require('analytics.js-integration'); const each = require('each'); const has = Object.prototype.hasOwnProperty; const TwitterAds = module.exports = integration('Twitter Ads').option('page', '').tag('<img src="//analytics.twitter.com/i/adsct?txn_id={{ pixelId }}&p_id=Twitter"/>').mapping('events'); TwitterAds.prototype.initialize = function () { this.ready() }; TwitterAds.prototype.page = function (page) { if (this.options.page) { this.load({ pixelId: this.options.page }) } }; TwitterAds.prototype.track = function (track) { const events = this.events(track.event()); const self = this; each(events, function (pixelId) { self.load({ pixelId }) }) } }, { 'analytics.js-integration': 88, each: 4 }],
  81: [function (require, module, exports) { const integration = require('analytics.js-integration'); const Identify = require('facade').Identify; const clone = require('clone'); const Userlike = module.exports = integration('Userlike').assumesPageview().global('userlikeConfig').global('userlikeData').option('secretKey', '').tag('<script src="//userlike-cdn-widgets.s3-eu-west-1.amazonaws.com/{{ secretKey }}.js">'); Userlike.prototype.initialize = function (page) { const self = this; const user = this.analytics.user(); const identify = new Identify({ userId: user.id(), traits: user.traits() }); segment_base_info = clone(this.options); segment_base_info.visitor = { name: identify.name(), email: identify.email() }; if (!window.userlikeData)window.userlikeData = { custom: {} }; window.userlikeData.custom.segmentio = segment_base_info; this.load(function () { self.ready() }) }; Userlike.prototype.loaded = function () { return !!(window.userlikeConfig && window.userlikeData) } }, { 'analytics.js-integration': 88, facade: 147, clone: 95 }],
  82: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('UserVoice'); const convertDates = require('convert-dates'); const unix = require('to-unix-timestamp'); const alias = require('alias'); const clone = require('clone'); const UserVoice = module.exports = integration('UserVoice').assumesPageview().global('UserVoice').global('showClassicWidget').option('apiKey', '').option('classic', false).option('forumId', null).option('showWidget', true).option('mode', 'contact').option('accentColor', '#448dd6').option('screenshotEnabled', true).option('smartvote', true).option('trigger', null).option('triggerPosition', 'bottom-right').option('triggerColor', '#ffffff').option('triggerBackgroundColor', 'rgba(46, 49, 51, 0.6)').option('classicMode', 'full').option('primaryColor', '#cc6d00').option('linkColor', '#007dbf').option('defaultMode', 'support').option('tabLabel', 'Feedback & Support').option('tabColor', '#cc6d00').option('tabPosition', 'middle-right').option('tabInverted', false).option('customTicketFields', {}).tag('<script src="//widget.uservoice.com/{{ apiKey }}.js">'); UserVoice.on('construct', function (integration) { if (!integration.options.classic) return; integration.group = undefined; integration.identify = integration.identifyClassic; integration.initialize = integration.initializeClassic }); UserVoice.prototype.initialize = function (page) { const options = this.options; const opts = formatOptions(options); push('set', opts); push('autoprompt', {}); if (options.showWidget) { options.trigger ? push('addTrigger', options.trigger, opts) : push('addTrigger', opts) } this.load(this.ready) }; UserVoice.prototype.loaded = function () { return !!(window.UserVoice && window.UserVoice.push !== Array.prototype.push) }; UserVoice.prototype.identify = function (identify) { let traits = identify.traits({ created: 'created_at' }); traits = convertDates(traits, unix); push('identify', traits) }; UserVoice.prototype.group = function (group) { let traits = group.traits({ created: 'created_at' }); traits = convertDates(traits, unix); push('identify', { account: traits }) }; UserVoice.prototype.initializeClassic = function () { const options = this.options; window.showClassicWidget = showClassicWidget; if (options.showWidget)showClassicWidget('showTab', formatClassicOptions(options)); this.load(this.ready) }; UserVoice.prototype.identifyClassic = function (identify) { push('setCustomFields', identify.traits()) }; function formatOptions (options) { return alias(options, { forumId: 'forum_id', accentColor: 'accent_color', smartvote: 'smartvote_enabled', triggerColor: 'trigger_color', triggerBackgroundColor: 'trigger_background_color', triggerPosition: 'trigger_position', screenshotEnabled: 'screenshot_enabled', customTicketFields: 'ticket_custom_fields' }) } function formatClassicOptions (options) { return alias(options, { forumId: 'forum_id', classicMode: 'mode', primaryColor: 'primary_color', tabPosition: 'tab_position', tabColor: 'tab_color', linkColor: 'link_color', defaultMode: 'default_mode', tabLabel: 'tab_label', tabInverted: 'tab_inverted' }) } function showClassicWidget (type, options) { type = type || 'showLightbox'; push(type, 'classic_widget', options) } }, { 'analytics.js-integration': 88, 'global-queue': 173, 'convert-dates': 178, 'to-unix-timestamp': 204, alias: 177, clone: 95 }],
  204: [function (require, module, exports) { module.exports = toUnixTimestamp; function toUnixTimestamp (date) { return Math.floor(date.getTime() / 1e3) } }, {}],
  83: [function (require, module, exports) { const integration = require('analytics.js-integration'); const push = require('global-queue')('_veroq'); const cookie = require('component/cookie'); const objCase = require('obj-case'); const Vero = module.exports = integration('Vero').global('_veroq').option('apiKey', '').tag('<script src="//d3qxef4rp70elm.cloudfront.net/m.js">'); Vero.prototype.initialize = function (page) { if (!cookie('__veroc4'))cookie('__veroc4', '[]'); push('init', { api_key: this.options.apiKey }); this.load(this.ready) }; Vero.prototype.loaded = function () { return !!(window._veroq && window._veroq.push !== Array.prototype.push) }; Vero.prototype.page = function (page) { push('trackPageview') }; Vero.prototype.identify = function (identify) { const traits = identify.traits(); const email = identify.email(); const id = identify.userId(); if (!id || !email) return; push('user', traits) }; Vero.prototype.track = function (track) { const regex = /[uU]nsubscribe/; if (track.event().match(regex)) { push('unsubscribe', { id: track.properties().id }) } else { push('track', track.event(), track.properties()) } }; Vero.prototype.alias = function (alias) { const to = alias.to(); if (alias.from()) { push('reidentify', to, alias.from()) } else { push('reidentify', to) } } }, { 'analytics.js-integration': 88, 'global-queue': 173, 'component/cookie': 194, 'obj-case': 92 }],
  84: [function (require, module, exports) { const integration = require('analytics.js-integration'); const tick = require('next-tick'); const each = require('each'); const VWO = module.exports = integration('Visual Website Optimizer').option('replay', true); VWO.prototype.initialize = function () { if (this.options.replay) this.replay(); this.ready() }; VWO.prototype.replay = function () { const analytics = this.analytics; tick(function () { experiments(function (err, traits) { if (traits)analytics.identify(traits) }) }) }; function experiments (fn) { enqueue(function () { const data = {}; const ids = window._vwo_exp_ids; if (!ids) return fn(); each(ids, function (id) { const name = variation(id); if (name)data['Experiment: ' + id] = name }); fn(null, data) }) } function enqueue (fn) { window._vis_opt_queue = window._vis_opt_queue || []; window._vis_opt_queue.push(fn) } function variation (id) { const experiments = window._vwo_exp; if (!experiments) return null; const experiment = experiments[id]; const variationId = experiment.combination_chosen; return variationId ? experiment.comb_n[variationId] : null } }, { 'analytics.js-integration': 88, 'next-tick': 103, each: 4 }],
  85: [function (require, module, exports) { const integration = require('analytics.js-integration'); const useHttps = require('use-https'); const WebEngage = module.exports = integration('WebEngage').assumesPageview().global('_weq').global('webengage').option('widgetVersion', '4.0').option('licenseCode', '').tag('http', '<script src="http://cdn.widgets.webengage.com/js/widget/webengage-min-v-4.0.js">').tag('https', '<script src="https://ssl.widgets.webengage.com/js/widget/webengage-min-v-4.0.js">'); WebEngage.prototype.initialize = function (page) { const _weq = window._weq = window._weq || {}; _weq['webengage.licenseCode'] = this.options.licenseCode; _weq['webengage.widgetVersion'] = this.options.widgetVersion; const name = useHttps() ? 'https' : 'http'; this.load(name, this.ready) }; WebEngage.prototype.loaded = function () { return !!window.webengage } }, { 'analytics.js-integration': 88, 'use-https': 90 }],
  86: [function (require, module, exports) { const integration = require('analytics.js-integration'); const snake = require('to-snake-case'); const isEmail = require('is-email'); const extend = require('extend'); const each = require('each'); const type = require('type'); const Woopra = module.exports = integration('Woopra').global('woopra').option('domain', '').option('cookieName', 'wooTracker').option('cookieDomain', null).option('cookiePath', '/').option('ping', true).option('pingInterval', 12e3).option('idleTimeout', 3e5).option('downloadTracking', true).option('outgoingTracking', true).option('outgoingIgnoreSubdomain', true).option('downloadPause', 200).option('outgoingPause', 400).option('ignoreQueryUrl', true).option('hideCampaign', false).tag('<script src="//static.woopra.com/js/w.js">'); Woopra.prototype.initialize = function (page) { (function () { let i; let s; let z; const w = window; const d = document; const a = arguments; const q = 'script'; const f = ['config', 'track', 'identify', 'visit', 'push', 'call']; const c = function () { let i; const self = this; self._e = []; for (i = 0; i < f.length; i++) { (function (f) { self[f] = function () { self._e.push([f].concat(Array.prototype.slice.call(arguments, 0))); return self } })(f[i]) } }; w._w = w._w || {}; for (i = 0; i < a.length; i++) { w._w[a[i]] = w[a[i]] = w[a[i]] || new c() } })('woopra'); this.load(this.ready); each(this.options, function (key, value) { key = snake(key); if (value == null) return; if (value === '') return; window.woopra.config(key, value) }) }; Woopra.prototype.loaded = function () { return !!(window.woopra && window.woopra.loaded) }; Woopra.prototype.page = function (page) { const props = page.properties(); const name = page.fullName(); if (name)props.title = name; window.woopra.track('pv', props) }; Woopra.prototype.identify = function (identify) { const traits = identify.traits(); if (identify.name())traits.name = identify.name(); window.woopra.identify(traits).push() }; Woopra.prototype.track = function (track) { window.woopra.track(track.event(), track.properties()) } }, { 'analytics.js-integration': 88, 'to-snake-case': 89, 'is-email': 169, extend: 145, each: 4, type: 113 }],
  87: [function (require, module, exports) { const integration = require('analytics.js-integration'); const tick = require('next-tick'); const bind = require('bind'); const when = require('when'); const Yandex = module.exports = integration('Yandex Metrica').assumesPageview().global('yandex_metrika_callbacks').global('Ya').option('counterId', null).option('clickmap', false).option('webvisor', false).tag('<script src="//mc.yandex.ru/metrika/watch.js">'); Yandex.prototype.initialize = function (page) { const id = this.options.counterId; const clickmap = this.options.clickmap; const webvisor = this.options.webvisor; push(function () { window['yaCounter' + id] = new window.Ya.Metrika({ id, clickmap, webvisor }) }); const loaded = bind(this, this.loaded); const ready = this.ready; this.load(function () { when(loaded, function () { tick(ready) }) }) }; Yandex.prototype.loaded = function () { return !!(window.Ya && window.Ya.Metrika) }; function push (callback) { window.yandex_metrika_callbacks = window.yandex_metrika_callbacks || []; window.yandex_metrika_callbacks.push(callback) } }, { 'analytics.js-integration': 88, 'next-tick': 103, bind: 101, when: 146 }],
  3: [function (require, module, exports) { const _analytics = window.analytics; const after = require('after'); const bind = require('bind'); const callback = require('callback'); const clone = require('clone'); const cookie = require('./cookie'); const debug = require('debug'); const defaults = require('defaults'); const each = require('each'); const Emitter = require('emitter'); const group = require('./group'); const is = require('is'); const isEmail = require('is-email'); const isMeta = require('is-meta'); const newDate = require('new-date'); const on = require('event').bind; const pageDefaults = require('./pageDefaults'); const pick = require('pick'); const prevent = require('prevent'); const querystring = require('querystring'); const normalize = require('./normalize'); const size = require('object').length; const keys = require('object').keys; const memory = require('./memory'); const store = require('./store'); const user = require('./user'); const Facade = require('facade'); const Identify = Facade.Identify; const Group = Facade.Group; const Alias = Facade.Alias; const Track = Facade.Track; const Page = Facade.Page; exports = module.exports = Analytics; exports.cookie = cookie; exports.store = store; exports.memory = memory; function Analytics () { this._options({}); this.Integrations = {}; this._integrations = {}; this._readied = false; this._timeout = 300; this._user = user; this.log = debug('analytics.js'); bind.all(this); const self = this; this.on('initialize', function (settings, options) { if (options.initialPageview)self.page(); self._parseQuery() }) }Emitter(Analytics.prototype); Analytics.prototype.use = function (plugin) { plugin(this); return this }; Analytics.prototype.addIntegration = function (Integration) { const name = Integration.prototype.name; if (!name) throw new TypeError('attempted to add an invalid integration'); this.Integrations[name] = Integration; return this }; Analytics.prototype.init = Analytics.prototype.initialize = function (settings, options) { settings = settings || {}; options = options || {}; this._options(options); this._readied = false; const self = this; each(settings, function (name) { const Integration = self.Integrations[name]; if (!Integration) delete settings[name] }); each(settings, function (name, opts) { const Integration = self.Integrations[name]; const integration = new Integration(clone(opts)); self.log('initialize %o - %o', name, opts); self.add(integration) }); const integrations = this._integrations; user.load(); group.load(); const ready = after(size(integrations), function () { self._readied = true; self.emit('ready') }); each(integrations, function (name, integration) { if (options.initialPageview && integration.options.initialPageview === false) { integration.page = after(2, integration.page) }integration.analytics = self; integration.once('ready', ready); integration.initialize() }); this.initialized = true; this.emit('initialize', settings, options); return this }; Analytics.prototype.setAnonymousId = function (id) { this.user().anonymousId(id); return this }; Analytics.prototype.add = function (integration) { this._integrations[integration.name] = integration; return this }; Analytics.prototype.identify = function (id, traits, options, fn) { if (is.fn(options))fn = options, options = null; if (is.fn(traits))fn = traits, options = null, traits = null; if (is.object(id))options = traits, traits = id, id = user.id(); user.identify(id, traits); const msg = this.normalize({ options, traits: user.traits(), userId: user.id() }); this._invoke('identify', new Identify(msg)); this.emit('identify', id, traits, options); this._callback(fn); return this }; Analytics.prototype.user = function () { return user }; Analytics.prototype.group = function (id, traits, options, fn) { if (arguments.length === 0) return group; if (is.fn(options))fn = options, options = null; if (is.fn(traits))fn = traits, options = null, traits = null; if (is.object(id))options = traits, traits = id, id = group.id(); group.identify(id, traits); const msg = this.normalize({ options, traits: group.traits(), groupId: group.id() }); this._invoke('group', new Group(msg)); this.emit('group', id, traits, options); this._callback(fn); return this }; Analytics.prototype.track = function (event, properties, options, fn) { if (is.fn(options))fn = options, options = null; if (is.fn(properties))fn = properties, options = null, properties = null; let plan = this.options.plan || {}; const events = plan.track || {}; const msg = this.normalize({ properties, options, event }); if (plan = events[event]) { this.log('plan %o - %o', event, plan); if (plan.enabled == false) return this._callback(fn); defaults(msg.integrations, plan.integrations || {}) } this._invoke('track', new Track(msg)); this.emit('track', event, properties, options); this._callback(fn); return this }; Analytics.prototype.trackClick = Analytics.prototype.trackLink = function (links, event, properties) { if (!links) return this; if (is.element(links))links = [links]; const self = this; each(links, function (el) { if (!is.element(el)) throw new TypeError('Must pass HTMLElement to `analytics.trackLink`.'); on(el, 'click', function (e) { const ev = is.fn(event) ? event(el) : event; const props = is.fn(properties) ? properties(el) : properties; const href = el.getAttribute('href') || el.getAttributeNS('http://www.w3.org/1999/xlink', 'href') || el.getAttribute('xlink:href'); self.track(ev, props); if (href && el.target !== '_blank' && !isMeta(e)) { prevent(e); self._callback(function () { window.location.href = href }) } }) }); return this }; Analytics.prototype.trackSubmit = Analytics.prototype.trackForm = function (forms, event, properties) { if (!forms) return this; if (is.element(forms))forms = [forms]; const self = this; each(forms, function (el) { if (!is.element(el)) throw new TypeError('Must pass HTMLElement to `analytics.trackForm`.'); function handler (e) { prevent(e); const ev = is.fn(event) ? event(el) : event; const props = is.fn(properties) ? properties(el) : properties; self.track(ev, props); self._callback(function () { el.submit() }) } const $ = window.jQuery || window.Zepto; if ($) { $(el).submit(handler) } else { on(el, 'submit', handler) } }); return this }; Analytics.prototype.page = function (category, name, properties, options, fn) { if (is.fn(options))fn = options, options = null; if (is.fn(properties))fn = properties, options = properties = null; if (is.fn(name))fn = name, options = properties = name = null; if (is.object(category))options = name, properties = category, name = category = null; if (is.object(name))options = properties, properties = name, name = null; if (is.string(category) && !is.string(name))name = category, category = null; properties = clone(properties) || {}; if (name)properties.name = name; if (category)properties.category = category; const defs = pageDefaults(); defaults(properties, defs); const overrides = pick(keys(defs), properties); if (!is.empty(overrides)) { options = options || {}; options.context = options.context || {}; options.context.page = overrides } const msg = this.normalize({ properties, category, options, name }); this._invoke('page', new Page(msg)); this.emit('page', category, name, properties, options); this._callback(fn); return this }; Analytics.prototype.pageview = function (url, options) { const properties = {}; if (url)properties.path = url; this.page(properties); return this }; Analytics.prototype.alias = function (to, from, options, fn) { if (is.fn(options))fn = options, options = null; if (is.fn(from))fn = from, options = null, from = null; if (is.object(from))options = from, from = null; const msg = this.normalize({ options, previousId: from, userId: to }); this._invoke('alias', new Alias(msg)); this.emit('alias', to, from, options); this._callback(fn); return this }; Analytics.prototype.ready = function (fn) { if (!is.fn(fn)) return this; this._readied ? callback.async(fn) : this.once('ready', fn); return this }; Analytics.prototype.timeout = function (timeout) { this._timeout = timeout }; Analytics.prototype.debug = function (str) { if (arguments.length == 0 || str) { debug.enable('analytics:' + (str || '*')) } else { debug.disable() } }; Analytics.prototype._options = function (options) { options = options || {}; this.options = options; cookie.options(options.cookie); store.options(options.localStorage); user.options(options.user); group.options(options.group); return this }; Analytics.prototype._callback = function (fn) { callback.async(fn, this._timeout); return this }; Analytics.prototype._invoke = function (method, facade) { const options = facade.options(); this.emit('invoke', facade); each(this._integrations, function (name, integration) { if (!facade.enabled(name)) return; integration.invoke.call(integration, method, facade) }); return this }; Analytics.prototype.push = function (args) { const method = args.shift(); if (!this[method]) return; this[method].apply(this, args) }; Analytics.prototype.reset = function () { this.user().logout(); this.group().logout() }; Analytics.prototype._parseQuery = function () { const q = querystring.parse(window.location.search); if (q.ajs_uid) this.identify(q.ajs_uid); if (q.ajs_event) this.track(q.ajs_event); if (q.ajs_aid)user.anonymousId(q.ajs_aid); return this }; Analytics.prototype.normalize = function (msg) { msg = normalize(msg, keys(this._integrations)); if (msg.anonymousId)user.anonymousId(msg.anonymousId); msg.anonymousId = user.anonymousId(); msg.context.page = defaults(msg.context.page || {}, pageDefaults()); return msg }; Analytics.prototype.noConflict = function () { window.analytics = _analytics; return this } }, { after: 111, bind: 205, callback: 94, clone: 95, './cookie': 206, debug: 201, defaults: 97, each: 4, emitter: 110, './group': 207, is: 91, 'is-email': 169, 'is-meta': 208, 'new-date': 161, event: 209, './pageDefaults': 210, pick: 211, prevent: 212, querystring: 213, './normalize': 214, object: 181, './memory': 215, './store': 216, './user': 217, facade: 147 }],
  205: [function (require, module, exports) { try { var bind = require('bind') } catch (e) { var bind = require('bind-component') } const bindAll = require('bind-all'); module.exports = exports = bind; exports.all = bindAll; exports.methods = bindMethods; function bindMethods (obj, methods) { methods = [].slice.call(arguments, 1); for (var i = 0, method; method = methods[i]; i++) { obj[method] = bind(obj, obj[method]) } return obj } }, { bind: 101, 'bind-all': 102 }],
  206: [function (require, module, exports) { const debug = require('debug')('analytics.js:cookie'); const bind = require('bind'); const cookie = require('cookie'); const clone = require('clone'); const defaults = require('defaults'); const json = require('json'); const topDomain = require('top-domain'); function Cookie (options) { this.options(options) }Cookie.prototype.options = function (options) { if (arguments.length === 0) return this._options; options = options || {}; const domain = '.' + topDomain(window.location.href); this._options = defaults(options, { maxage: 31536e6, path: '/', domain }); this.set('ajs:test', true); if (!this.get('ajs:test')) { debug('fallback to domain=null'); this._options.domain = null } this.remove('ajs:test') }; Cookie.prototype.set = function (key, value) { try { value = json.stringify(value); cookie(key, value, clone(this._options)); return true } catch (e) { return false } }; Cookie.prototype.get = function (key) { try { let value = cookie(key); value = value ? json.parse(value) : null; return value } catch (e) { return null } }; Cookie.prototype.remove = function (key) { try { cookie(key, null, clone(this._options)); return true } catch (e) { return false } }; module.exports = bind.all(new Cookie()); module.exports.Cookie = Cookie }, { debug: 201, bind: 205, cookie: 194, clone: 95, defaults: 97, json: 179, 'top-domain': 139 }],
  207: [function (require, module, exports) { const debug = require('debug')('analytics:group'); const Entity = require('./entity'); const inherit = require('inherit'); const bind = require('bind'); Group.defaults = { persist: true, cookie: { key: 'ajs_group_id' }, localStorage: { key: 'ajs_group_properties' } }; function Group (options) { this.defaults = Group.defaults; this.debug = debug; Entity.call(this, options) }inherit(Group, Entity); module.exports = bind.all(new Group()); module.exports.Group = Group }, { debug: 201, './entity': 218, inherit: 219, bind: 205 }],
  218: [function (require, module, exports) {
    const debug = require('debug')('analytics:entity')
    const traverse = require('isodate-traverse'); const defaults = require('defaults'); const memory = require('./memory'); const cookie = require('./cookie'); const store = require('./store'); const extend = require('extend'); const clone = require('clone'); module.exports = Entity; function Entity (options) { this.options(options); this.initialize() }Entity.prototype.initialize = function () { cookie.set('ajs:cookies', true); if (cookie.get('ajs:cookies')) { cookie.remove('ajs:cookies'); this._storage = cookie; return } if (store.enabled) { this._storage = store; return }debug('warning using memory store both cookies and localStorage are disabled'); this._storage = memory }; Entity.prototype.storage = function () { return this._storage }; Entity.prototype.options = function (options) { if (arguments.length === 0) return this._options; options || (options = {}); defaults(options, this.defaults || {}); this._options = options }; Entity.prototype.id = function (id) { switch (arguments.length) { case 0:return this._getId(); case 1:return this._setId(id) } }; Entity.prototype._getId = function () { const ret = this._options.persist ? this.storage().get(this._options.cookie.key) : this._id; return ret === undefined ? null : ret }; Entity.prototype._setId = function (id) { if (this._options.persist) { this.storage().set(this._options.cookie.key, id) } else { this._id = id } }; Entity.prototype.properties = Entity.prototype.traits = function (traits) { switch (arguments.length) { case 0:return this._getTraits(); case 1:return this._setTraits(traits) } }; Entity.prototype._getTraits = function () { const ret = this._options.persist ? store.get(this._options.localStorage.key) : this._traits; return ret ? traverse(clone(ret)) : {} }; Entity.prototype._setTraits = function (traits) { traits || (traits = {}); if (this._options.persist) { store.set(this._options.localStorage.key, traits) } else { this._traits = traits } }; Entity.prototype.identify = function (id, traits) { traits || (traits = {}); const current = this.id(); if (current === null || current === id)traits = extend(this.traits(), traits); if (id) this.id(id); this.debug('identify %o, %o', id, traits); this.traits(traits); this.save() }; Entity.prototype.save = function () { if (!this._options.persist) return false; cookie.set(this._options.cookie.key, this.id()); store.set(this._options.localStorage.key, this.traits()); return true }; Entity.prototype.logout = function () { this.id(null); this.traits({}); cookie.remove(this._options.cookie.key); store.remove(this._options.localStorage.key) }; Entity.prototype.reset = function () { this.logout(); this.options({}) }; Entity.prototype.load = function () { this.id(cookie.get(this._options.cookie.key)); this.traits(store.get(this._options.localStorage.key)) }
  }, { debug: 201, 'isodate-traverse': 156, defaults: 97, './memory': 215, './cookie': 206, './store': 216, extend: 145, clone: 95 }],
  215: [function (require, module, exports) { const clone = require('clone'); const bind = require('bind'); const has = Object.prototype.hasOwnProperty; module.exports = bind.all(new Memory()); function Memory () { this.store = {} }Memory.prototype.set = function (key, value) { this.store[key] = clone(value); return true }; Memory.prototype.get = function (key) { if (!has.call(this.store, key)) return; return clone(this.store[key]) }; Memory.prototype.remove = function (key) { delete this.store[key]; return true } }, { clone: 95, bind: 205 }],
  216: [function (require, module, exports) { const bind = require('bind'); const defaults = require('defaults'); const store = require('store.js'); function Store (options) { this.options(options) }Store.prototype.options = function (options) { if (arguments.length === 0) return this._options; options = options || {}; defaults(options, { enabled: true }); this.enabled = options.enabled && store.enabled; this._options = options }; Store.prototype.set = function (key, value) { if (!this.enabled) return false; return store.set(key, value) }; Store.prototype.get = function (key) { if (!this.enabled) return null; return store.get(key) }; Store.prototype.remove = function (key) { if (!this.enabled) return false; return store.remove(key) }; module.exports = bind.all(new Store()); module.exports.Store = Store }, { bind: 205, defaults: 97, 'store.js': 220 }],
  220: [function (require, module, exports) { const json = require('json'); const store = {}; const win = window; const doc = win.document; const localStorageName = 'localStorage'; const namespace = '__storejs__'; let storage; store.disabled = false; store.set = function (key, value) {}; store.get = function (key) {}; store.remove = function (key) {}; store.clear = function () {}; store.transact = function (key, defaultVal, transactionFn) { let val = store.get(key); if (transactionFn == null) { transactionFn = defaultVal; defaultVal = null } if (typeof val === 'undefined') { val = defaultVal || {} }transactionFn(val); store.set(key, val) }; store.getAll = function () {}; store.serialize = function (value) { return json.stringify(value) }; store.deserialize = function (value) { if (typeof value !== 'string') { return undefined } try { return json.parse(value) } catch (e) { return value || undefined } }; function isLocalStorageNameSupported () { try { return localStorageName in win && win[localStorageName] } catch (err) { return false } } if (isLocalStorageNameSupported()) { storage = win[localStorageName]; store.set = function (key, val) { if (val === undefined) { return store.remove(key) }storage.setItem(key, store.serialize(val)); return val }; store.get = function (key) { return store.deserialize(storage.getItem(key)) }; store.remove = function (key) { storage.removeItem(key) }; store.clear = function () { storage.clear() }; store.getAll = function () { const ret = {}; for (let i = 0; i < storage.length; ++i) { const key = storage.key(i); ret[key] = store.get(key) } return ret } } else if (doc.documentElement.addBehavior) { let storageOwner, storageContainer; try { storageContainer = new ActiveXObject('htmlfile'); storageContainer.open(); storageContainer.write('<s' + 'cript>document.w=window</s' + 'cript><iframe src="/favicon.ico"></iframe>'); storageContainer.close(); storageOwner = storageContainer.w.frames[0].document; storage = storageOwner.createElement('div') } catch (e) { storage = doc.createElement('div'); storageOwner = doc.body } function withIEStorage (storeFunction) { return function () { const args = Array.prototype.slice.call(arguments, 0); args.unshift(storage); storageOwner.appendChild(storage); storage.addBehavior('#default#userData'); storage.load(localStorageName); const result = storeFunction.apply(store, args); storageOwner.removeChild(storage); return result } } const forbiddenCharsRegex = new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]", 'g'); function ieKeyFix (key) { return key.replace(forbiddenCharsRegex, '___') }store.set = withIEStorage(function (storage, key, val) { key = ieKeyFix(key); if (val === undefined) { return store.remove(key) }storage.setAttribute(key, store.serialize(val)); storage.save(localStorageName); return val }); store.get = withIEStorage(function (storage, key) { key = ieKeyFix(key); return store.deserialize(storage.getAttribute(key)) }); store.remove = withIEStorage(function (storage, key) { key = ieKeyFix(key); storage.removeAttribute(key); storage.save(localStorageName) }); store.clear = withIEStorage(function (storage) { const attributes = storage.XMLDocument.documentElement.attributes; storage.load(localStorageName); for (var i = 0, attr; attr = attributes[i]; i++) { storage.removeAttribute(attr.name) }storage.save(localStorageName) }); store.getAll = withIEStorage(function (storage) { const attributes = storage.XMLDocument.documentElement.attributes; const ret = {}; for (var i = 0, attr; attr = attributes[i]; ++i) { const key = ieKeyFix(attr.name); ret[attr.name] = store.deserialize(storage.getAttribute(key)) } return ret }) } try { store.set(namespace, namespace); if (store.get(namespace) != namespace) { store.disabled = true }store.remove(namespace) } catch (e) { store.disabled = true }store.enabled = !store.disabled; module.exports = store }, { json: 179 }],
  219: [function (require, module, exports) { module.exports = function (a, b) { const fn = function () {}; fn.prototype = b.prototype; a.prototype = new fn(); a.prototype.constructor = a } }, {}],
  208: [function (require, module, exports) { module.exports = function isMeta (e) { if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) return true; const which = e.which; const button = e.button; if (!which && button !== undefined) { return !button & 1 && !button & 2 && button & 4 } else if (which === 2) { return true } return false } }, {}],
  209: [function (require, module, exports) { exports.bind = function (el, type, fn, capture) { if (el.addEventListener) { el.addEventListener(type, fn, capture || false) } else { el.attachEvent('on' + type, fn) } return fn }; exports.unbind = function (el, type, fn, capture) { if (el.removeEventListener) { el.removeEventListener(type, fn, capture || false) } else { el.detachEvent('on' + type, fn) } return fn } }, {}],
  210: [function (require, module, exports) { const canonical = require('canonical'); const url = require('url'); function pageDefaults () { return { path: canonicalPath(), referrer: document.referrer, search: location.search, title: document.title, url: canonicalUrl(location.search) } } function canonicalPath () { const canon = canonical(); if (!canon) return window.location.pathname; const parsed = url.parse(canon); return parsed.pathname } function canonicalUrl (search) { const canon = canonical(); if (canon) return ~canon.indexOf('?') ? canon : canon + search; const url = window.location.href; const i = url.indexOf('#'); return i === -1 ? url : url.slice(0, i) }module.exports = pageDefaults }, { canonical: 182, url: 184 }],
  211: [function (require, module, exports) { 'use strict'; const objToString = Object.prototype.toString; const existy = function (val) { return val != null }; const isArray = function (val) { return objToString.call(val) === '[object Array]' }; const isString = function (val) { return typeof val === 'string' || objToString.call(val) === '[object String]' }; const isObject = function (val) { return val != null && typeof val === 'object' }; const pick = function pick (props, object) { if (!existy(object) || !isObject(object)) { return {} } if (isString(props)) { props = [props] } if (!isArray(props)) { props = [] } const result = {}; for (let i = 0; i < props.length; i += 1) { if (isString(props[i]) && props[i] in object) { result[props[i]] = object[props[i]] } } return result }; module.exports = pick }, {}],
  212: [function (require, module, exports) { module.exports = function (e) { e = e || window.event; return e.preventDefault ? e.preventDefault() : e.returnValue = false } }, {}],
  213: [function (require, module, exports) { const encode = encodeURIComponent; const decode = decodeURIComponent; const trim = require('trim'); const type = require('type'); exports.parse = function (str) { if (typeof str !== 'string') return {}; str = trim(str); if (str == '') return {}; if (str.charAt(0) == '?')str = str.slice(1); const obj = {}; const pairs = str.split('&'); for (let i = 0; i < pairs.length; i++) { const parts = pairs[i].split('='); const key = decode(parts[0]); var m; if (m = /(\w+)\[(\d+)\]/.exec(key)) { obj[m[1]] = obj[m[1]] || []; obj[m[1]][m[2]] = decode(parts[1]); continue }obj[parts[0]] = parts[1] == null ? '' : decode(parts[1]) } return obj }; exports.stringify = function (obj) { if (!obj) return ''; const pairs = []; for (const key in obj) { const value = obj[key]; if (type(value) == 'array') { for (let i = 0; i < value.length; ++i) { pairs.push(encode(key + '[' + i + ']') + '=' + encode(value[i])) } continue }pairs.push(encode(key) + '=' + encode(obj[key])) } return pairs.join('&') } }, { trim: 141, type: 7 }],
  214: [function (require, module, exports) { const debug = require('debug')('analytics.js:normalize'); const indexof = require('component/indexof'); const defaults = require('defaults'); const map = require('component/map'); const each = require('each'); const is = require('is'); const has = Object.prototype.hasOwnProperty; module.exports = normalize; const toplevel = ['integrations', 'anonymousId', 'timestamp', 'context']; function normalize (msg, list) { const lower = map(list, function (s) { return s.toLowerCase() }); const opts = msg.options || {}; const integrations = opts.integrations || {}; const providers = opts.providers || {}; const context = opts.context || {}; let ret = {}; debug('<-', msg); each(opts, function (key, value) { if (!integration(key)) return; if (!has.call(integrations, key))integrations[key] = value; delete opts[key] }); delete opts.providers; each(providers, function (key, value) { if (!integration(key)) return; if (is.object(integrations[key])) return; if (has.call(integrations, key) && typeof providers[key] === 'boolean') return; integrations[key] = value }); each(opts, function (key) { if (~indexof(toplevel, key)) { ret[key] = opts[key] } else { context[key] = opts[key] } }); delete msg.options; ret.integrations = integrations; ret.context = context; ret = defaults(ret, msg); debug('->', ret); return ret; function integration (name) { return !!(~indexof(list, name) || name.toLowerCase() == 'all' || ~indexof(lower, name.toLowerCase())) } } }, { debug: 201, 'component/indexof': 116, defaults: 97, 'component/map': 221, each: 4, is: 91 }],
  221: [function (require, module, exports) { const toFunction = require('to-function'); module.exports = function (arr, fn) { const ret = []; fn = toFunction(fn); for (let i = 0; i < arr.length; ++i) { ret.push(fn(arr[i], i)) } return ret } }, { 'to-function': 185 }],
  217: [function (require, module, exports) { const debug = require('debug')('analytics:user'); const Entity = require('./entity'); const inherit = require('inherit'); const bind = require('bind'); const cookie = require('./cookie'); const uuid = require('uuid'); const rawCookie = require('cookie'); User.defaults = { persist: true, cookie: { key: 'ajs_user_id', oldKey: 'ajs_user' }, localStorage: { key: 'ajs_user_traits' } }; function User (options) { this.defaults = User.defaults; this.debug = debug; Entity.call(this, options) }inherit(User, Entity); User.prototype.id = function (id) { const prev = this._getId(); const ret = Entity.prototype.id.apply(this, arguments); if (prev == null) return ret; if (prev != id && id) this.anonymousId(null); return ret }; User.prototype.anonymousId = function (anonId) { const store = this.storage(); if (arguments.length) { store.set('ajs_anonymous_id', anonId); return this } if (anonId = store.get('ajs_anonymous_id')) { return anonId } if (anonId = rawCookie('_sio')) { anonId = anonId.split('----')[0]; store.set('ajs_anonymous_id', anonId); store.remove('_sio'); return anonId }anonId = uuid(); store.set('ajs_anonymous_id', anonId); return store.get('ajs_anonymous_id') }; User.prototype.logout = function () { Entity.prototype.logout.call(this); this.anonymousId(null) }; User.prototype.load = function () { if (this._loadOldCookie()) return; Entity.prototype.load.call(this) }; User.prototype._loadOldCookie = function () { const user = cookie.get(this._options.cookie.oldKey); if (!user) return false; this.id(user.id); this.traits(user.traits); cookie.remove(this._options.cookie.oldKey); return true }; module.exports = bind.all(new User()); module.exports.User = User }, { debug: 201, './entity': 218, inherit: 219, bind: 205, './cookie': 206, uuid: 195, cookie: 194 }],
  5: [function (require, module, exports) { module.exports = { name: 'analytics', version: '2.8.0', main: 'analytics.js', dependencies: {}, devDependencies: {} } }, {}]
}, {}, { 1: '' }))
